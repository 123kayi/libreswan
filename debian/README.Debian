openswan for Debian
----------------------

1) General Remarks

This package has been created from scratch with some ideas from the
freeswan 1.3 package by Tommi Virtanen and the freeswan 1.5 package by
Aaron Johnson merged in. Most of the (already removed) code in debian/rules
for creating the linux-patch-openswan package was initially taken from Tommi
Virtanen's package, but had been mostly rewritten to fit the needs of different
kernel versions (since version 1.9-1).

After the decision of the FreeS/WAN project to cease the development of
FreeS/WAN, the Debian package team decided to switch over to the Openswan fork.
This code base included all the patches that had to be applied manually before,
which made packaging simple. Alexander List prepared the first preliminary
openswan package based on Rene Mayrhofer's freeswan packaging, who in turn
updated to the relevant parts of the last freeswan package.

2) Plain RSA key creation

Note: Usage of such keys is deprecated in favour of newer X.509 certificates.

If you still want to create an old style plain RSA key, you can create it with
    ipsec rsasigkey $KEYLENGTH > $TMPFILE
where $KEYLENGTH should be >= 2048. The resulting private key must be inserted
into /etc/ipsec.secrets and enclosed with a ": RSA { .... }" marker. The
following commands can be used to create a correctly formatted block:
    echo -e ': RSA\t{' >> /etc/ipsec.secrets; 
    cat $TMPFILE >> /etc/ipsec.secrets; 
    echo -e '\t}' >> /etc/ipsec.secrets;
Afterwards, it is recommended to remove $TMPFILE in a secure manner (using
something line srm, shred, wipe...) and create a public key line for insertation
into the "conn" section of ipsec.conf with 
    ipsec showhostkey --left 
(or "--right" depending on which side you want to use it). For further
information please take a closer look at the manpages ipsec_rsasigkey,
ipsec.secrets, ipsec_showhostkey and ipsec.conf.

3) IPsec Kernel Support

Note: This package makes per default use of the in-kernel IPsec stack, which is
available in all recent stock Debian kernel images.

If you want to use the openswan utilities, you will need the appropriate
kernel modules. The Debian default kernel native IPsec stack can be used
out-of-the-box with openswan pluto, the key management daemon. This native Linux
IPsec stack is of high quality, has all of the features of the latest Debian
freeswan and openswan packages (i.e. support for other ciphers like AES and NAT
Traversal support) and is well integrated into the kernel networking subsystem
(which is not true for the openswan kernel modules). The easiest way to get
IPsec support in Debian is to use the default kernels (or recompile from the
Debian kernel sources).

If you do not want to use the in-kernel IPsec stack then the openswan kernel
part can be compiled as stand-alone module. Starting with kernel >= 2.6.23 and
openswan >= 2.6.22, NAT Traversal will work without patching the kernel, also
with KLIPS compiled as a module. Therefore, the linux-patch-openswan package and
the NAT Traversal patches have both been dropped. On the other hand, please note
that there are two packages available, each gearing towards a different group
of users:

* openswan-modules-dkms is suitable for the end user who wants to use KLIPS on
  a stand-alone PC or laptop without much hassle. When installed, the module
  will be built automatically upon installing a new kernel and its respective
  headers package.

* openswan-modules-source on the other side targets the system administrator
  willing to distribute pre-built KLIPS modules around a number of machines in
  a clean and easily maintainable manner as a standard Debian package. This
  approach consists of more work but is also a lot more flexible.

4) Building KLIPS from openswan-modules-source

For building modules with openswan-modules-source three different approaches
can be used:

* The easiest way consists of installing module-assistant and the needed
  linux-headers packages, then simply issuing
      module-assistant build openswan
  to build the package.
  Please note that when compiling modules for a kernel version which differs
  from the one running on the compile host then the option --kvers-list has to
  be supplied to the module-assistant command.

* When invoking make-kpkg from kernel-package to do the module compilation the
  linux-source package has to be installed and the openswan-modules.tar.gz
  from openswan-modules-source needs to be extracted under /usr/src. Keep in
  mind that it is not enough to just put the the linux source tree in place,
  but it also needs to be configured and a successful kernel build process
  must be completed before the command
      make-kpkg --added_modules openswan modules_image
  can be used to actually compile and package the module.
  Note that, in order to work with a specific kernel version, it's likely that
  also the options --append_to_version and --revision will need to be set. For
  getting example values of the running kernel, issue the command
      uname -r | sed 's/.*\.[0-9]*-/-/'
  to retrieve the --append_to_version parameter and look at the Version column
  in the output of the line
      dpkg --list linux-image-`uname -r`
  which provides the --revision argument.

* Invoking debian/rules directly is the third and most flexible approach to
  compile and package the module, but keep in mind this method also leaves the
  task of cleaning up to the administrator.
  After extracting openswan-modules.tar.gz change to /usr/src/modules/openswan
  and issue the command
      debian/rules binary-modules
  to start building the module. Some variables that might need to be set in
  order to make the process run correctly:
      KVERS: the complete kernel version (as retrieved by 'uname -r')
      KDREV: the kernel revision (equal --revision argument)
      KSRC: the location of the kernel tree (/usr/src/linux-headers-`uname -r`
                                             for example)
      KMAINT: the binary package maintainer (defaults to Rene Mayrhofer)
      KEMAIL: the maintainer's mailaddress (defaults to rmayr@debian.org)
  Please remember to clean up completely after building the binary package by
  calling
      debian/rules kdist_clean
  Otherwise, future build processes might lead to incorrect results.

 -- Harald Jenny <harald@a-little-linux-box.at>  Sun,  2 May 2010 18:15:33 +0200
