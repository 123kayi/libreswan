FIPS Product: NO
FIPS Kernel: NO
FIPS Mode: NO
NSS DB directory: sql:/etc/ipsec.d
Initializing NSS
Opening NSS database "sql:/etc/ipsec.d" read-only
NSS initialized
NSS crypto library initialized
FIPS HMAC integrity support [enabled]
FIPS mode disabled for pluto daemon
FIPS HMAC integrity verification self-test FAILED
libcap-ng support [enabled]
Linux audit support [enabled]
Linux audit activated
Starting Pluto (Libreswan Version v3.20-317-geaad6bd-dirty-master XFRM(netkey) KLIPS USE_FORK USE_PTHREAD_SETSCHEDPRIO NSS DNSSEC USE_SYSTEMD_WATCHDOG FIPS_CHECK LABELED_IPSEC LIBCAP_NG LINUX_AUDIT XAUTH_PAM NETWORKMANAGER CURL(non-NSS)) pid:2272
core dump dir: /var/tmp
secrets file: /etc/ipsec.secrets
leak-detective enabled
NSS crypto [enabled]
XAUTH PAM support [enabled]
| init_nat_traversal() initialized with keep_alive=0
NAT-Traversal support  [enabled]
| Initialize libevent base
| event_schedule called for 3600 seconds
| event_schedule_tv: new EVENT_REINIT_SECRET-pe@0x7fb107e0b0e8
| event_schedule_tv called for about 3600 seconds and change
| inserting event EVENT_REINIT_SECRET, timeout in 3600.000000 seconds
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_PENDING_DDNS-pe@0x7fb107e0b218
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| event_schedule called for 120 seconds
| event_schedule_tv: new EVENT_PENDING_PHASE2-pe@0x7fb107e0b2f8
| event_schedule_tv called for about 120 seconds and change
| inserting event EVENT_PENDING_PHASE2, timeout in 120.000000 seconds
| encryption algorithm assertion checks
| encryption algorithm aes_ccm_16; official name: aes_ccm_16, IKEv1 OAKLEY id: 16, IKEv1 ESP_INFO id: 16, IKEv2 id: 16
| IKEv1 OAKLEY ID id: 16 enum name: AES_CCM_16
| IKEv1 ESP ID id: 16 enum name: AES_CCM_C
| IKEv2 ID id: 16 enum name: AES_CCM_C
| encryption algorithm aes_ccm_12; official name: aes_ccm_12, IKEv1 OAKLEY id: 15, IKEv1 ESP_INFO id: 15, IKEv2 id: 15
| IKEv1 OAKLEY ID id: 15 enum name: AES_CCM_B
| IKEv1 ESP ID id: 15 enum name: AES_CCM_B
| IKEv2 ID id: 15 enum name: AES_CCM_B
| encryption algorithm aes_ccm_8; official name: aes_ccm_8, IKEv1 OAKLEY id: 14, IKEv1 ESP_INFO id: 14, IKEv2 id: 14
| IKEv1 OAKLEY ID id: 14 enum name: AES_CCM_A
| IKEv1 ESP ID id: 14 enum name: AES_CCM_A
| IKEv2 ID id: 14 enum name: AES_CCM_A
| encryption algorithm 3des_cbc; official name: 3des, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 3, IKEv2 id: 3
| IKEv1 OAKLEY ID id: 5 enum name: 3DES_CBC
| IKEv1 ESP ID id: 3 enum name: 3DES
| IKEv2 ID id: 3 enum name: 3DES
| encryption algorithm camellia_ctr; official name: camellia_ctr, IKEv1 OAKLEY id: 24, IKEv1 ESP_INFO id: 24, IKEv2 id: 24
| IKEv1 OAKLEY ID id: 24 enum name: CAMELLIA_CTR
| IKEv1 ESP ID id: 24 enum name: CAMELLIA_CTR
| IKEv2 ID id: 24 enum name: CAMELLIA_CTR
| encryption algorithm camellia; official name: camellia, IKEv1 OAKLEY id: 8, IKEv1 ESP_INFO id: 22, IKEv2 id: 23
| IKEv1 OAKLEY ID id: 8 enum name: CAMELLIA_CBC
| IKEv1 ESP ID id: 22 enum name: CAMELLIA
| IKEv2 ID id: 23 enum name: CAMELLIA_CBC
| encryption algorithm aes_gcm_16; official name: aes_gcm_16, IKEv1 OAKLEY id: 20, IKEv1 ESP_INFO id: 20, IKEv2 id: 20
| IKEv1 OAKLEY ID id: 20 enum name: AES_GCM_C
| IKEv1 ESP ID id: 20 enum name: AES_GCM_C
| IKEv2 ID id: 20 enum name: AES_GCM_C
| encryption algorithm aes_gcm_12; official name: aes_gcm_12, IKEv1 OAKLEY id: 19, IKEv1 ESP_INFO id: 19, IKEv2 id: 19
| IKEv1 OAKLEY ID id: 19 enum name: AES_GCM_B
| IKEv1 ESP ID id: 19 enum name: AES_GCM_B
| IKEv2 ID id: 19 enum name: AES_GCM_B
| encryption algorithm aes_gcm_8; official name: aes_gcm, IKEv1 OAKLEY id: 18, IKEv1 ESP_INFO id: 18, IKEv2 id: 18
| IKEv1 OAKLEY ID id: 18 enum name: AES_GCM_A
| IKEv1 ESP ID id: 18 enum name: AES_GCM_A
| IKEv2 ID id: 18 enum name: AES_GCM_A
| encryption algorithm aes_ctr; official name: aes_ctr, IKEv1 OAKLEY id: 13, IKEv1 ESP_INFO id: 13, IKEv2 id: 13
| IKEv1 OAKLEY ID id: 13 enum name: AES_CTR
| IKEv1 ESP ID id: 13 enum name: AES_CTR
| IKEv2 ID id: 13 enum name: AES_CTR
| encryption algorithm aes; official name: aes, IKEv1 OAKLEY id: 7, IKEv1 ESP_INFO id: 12, IKEv2 id: 12
| IKEv1 OAKLEY ID id: 7 enum name: AES_CBC
| IKEv1 ESP ID id: 12 enum name: AES
| IKEv2 ID id: 12 enum name: AES_CBC
| encryption algorithm serpent; official name: serpent, IKEv1 OAKLEY id: 65004, IKEv1 ESP_INFO id: 252, IKEv2 id: 65004
| IKEv1 OAKLEY ID id: 65004 enum name: SERPENT_CBC
| IKEv1 ESP ID id: 252 enum name: SERPENT
| IKEv2 ID id: 65004 enum name: SERPENT_CBC
| encryption algorithm twofish; official name: twofish, IKEv1 OAKLEY id: 65005, IKEv1 ESP_INFO id: 253, IKEv2 id: 65005
| IKEv1 OAKLEY ID id: 65005 enum name: TWOFISH_CBC
| IKEv1 ESP ID id: 253 enum name: TWOFISH
| IKEv2 ID id: 65005 enum name: TWOFISH_CBC
| encryption algorithm twofish_ssh; official name: twofish_ssh, IKEv1 OAKLEY id: 65289, IKEv1 ESP_INFO id: 0, IKEv2 id: 65289
| IKEv1 OAKLEY ID id: 65289 enum name: TWOFISH_CBC_SSH
| IKEv2 ID id: 65289 enum name: TWOFISH_CBC_SSH
| encryption algorithm cast; official name: cast, IKEv1 OAKLEY id: 6, IKEv1 ESP_INFO id: 6, IKEv2 id: 6
| IKEv1 OAKLEY ID id: 6 enum name: CAST_CBC
| IKEv1 ESP ID id: 6 enum name: CAST
| IKEv2 ID id: 6 enum name: CAST
| encryption algorithm null; official name: null, IKEv1 OAKLEY id: 0, IKEv1 ESP_INFO id: 11, IKEv2 id: 11
| IKEv1 ESP ID id: 11 enum name: NULL
| IKEv2 ID id: 11 enum name: NULL
Encryption algorithms:
  aes_ccm_16    IKEv1:     ESP     IKEv2:     ESP     FIPS  {256,192,*128}  (aes_ccm aes_ccm_c)
  aes_ccm_12    IKEv1:     ESP     IKEv2:     ESP     FIPS  {256,192,*128}  (aes_ccm_b)
  aes_ccm_8     IKEv1:     ESP     IKEv2:     ESP     FIPS  {256,192,*128}  (aes_ccm_a)
  3des_cbc      IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  [*192]  (3des)
  camellia_ctr  IKEv1:     ESP     IKEv2:     ESP           {256,192,*128}
  camellia      IKEv1: IKE ESP     IKEv2: IKE ESP           {256,192,*128}  (camellia_cbc)
  aes_gcm_16    IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aes_gcm aes_gcm_c)
  aes_gcm_12    IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aes_gcm_b)
  aes_gcm_8     IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aes_gcm_a)
  aes_ctr       IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aesctr)
  aes           IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aes_cbc)
  serpent       IKEv1: IKE ESP     IKEv2: IKE ESP           {256,192,*128}  (serpent_cbc)
  twofish       IKEv1: IKE ESP     IKEv2: IKE ESP           {256,192,*128}  (twofish_cbc)
  twofish_ssh   IKEv1: IKE         IKEv2: IKE ESP           {256,192,*128}  (twofish_cbc_ssh)
  cast          IKEv1:     ESP     IKEv2:     ESP           {*128}  (cast_cbc)
  null          IKEv1:     ESP     IKEv2:     ESP           []
| hash algorithm assertion checks
| hash algorithm md5; official name: md5, IKEv1 OAKLEY id: 1, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 1 enum name: MD5
| NSS: hash mechanism 210 derivation 390
| hash algorithm sha; official name: sha1, IKEv1 OAKLEY id: 2, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 2 enum name: SHA1
| NSS: hash mechanism 220 derivation 392
| hash algorithm sha2_256; official name: sha256, IKEv1 OAKLEY id: 4, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 4 enum name: SHA2_256
| NSS: hash mechanism 250 derivation 393
| hash algorithm sha2_384; official name: sha384, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 5 enum name: SHA2_384
| NSS: hash mechanism 260 derivation 394
| hash algorithm sha2_512; official name: sha512, IKEv1 OAKLEY id: 6, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 6 enum name: SHA2_512
| NSS: hash mechanism 270 derivation 395
Hash algorithms:
  md5           IKEv1: IKE         IKEv2:                 
  sha           IKEv1: IKE         IKEv2:             FIPS  (sha1)
  sha2_256      IKEv1: IKE         IKEv2:             FIPS  (sha2 sha256)
  sha2_384      IKEv1: IKE         IKEv2:             FIPS  (sha384)
  sha2_512      IKEv1: IKE         IKEv2:             FIPS  (sha512)
| PRF algorithm assertion checks
| PRF algorithm md5; official name: md5, IKEv1 OAKLEY id: 1, IKEv1 ESP_INFO id: 0, IKEv2 id: 1
| IKEv1 OAKLEY ID id: 1 enum name: MD5
| IKEv2 ID id: 1 enum name: HMAC_MD5
| PRF algorithm sha; official name: sha1, IKEv1 OAKLEY id: 2, IKEv1 ESP_INFO id: 0, IKEv2 id: 2
| IKEv1 OAKLEY ID id: 2 enum name: SHA1
| IKEv2 ID id: 2 enum name: HMAC_SHA1
| PRF algorithm sha2_256; official name: sha256, IKEv1 OAKLEY id: 4, IKEv1 ESP_INFO id: 0, IKEv2 id: 5
| IKEv1 OAKLEY ID id: 4 enum name: SHA2_256
| IKEv2 ID id: 5 enum name: HMAC_SHA2_256
| PRF algorithm sha2_384; official name: sha384, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 0, IKEv2 id: 6
| IKEv1 OAKLEY ID id: 5 enum name: SHA2_384
| IKEv2 ID id: 6 enum name: HMAC_SHA2_384
| PRF algorithm sha2_512; official name: sha512, IKEv1 OAKLEY id: 6, IKEv1 ESP_INFO id: 0, IKEv2 id: 7
| IKEv1 OAKLEY ID id: 6 enum name: SHA2_512
| IKEv2 ID id: 7 enum name: HMAC_SHA2_512
PRF algorithms:
  md5           IKEv1: IKE         IKEv2: IKE               (hmac_md5)
  sha           IKEv1: IKE         IKEv2: IKE         FIPS  (sha1 hmac_sha1)
  sha2_256      IKEv1: IKE         IKEv2: IKE         FIPS  (sha2 sha256 hmac_sha2_256)
  sha2_384      IKEv1: IKE         IKEv2: IKE         FIPS  (sha384 hmac_sha2_384)
  sha2_512      IKEv1: IKE         IKEv2: IKE         FIPS  (sha512 hmac_sha2_512)
| integrity algorithm assertion checks
| integrity algorithm md5; official name: md5, IKEv1 OAKLEY id: 1, IKEv1 ESP_INFO id: 1, IKEv2 id: 1
| IKEv1 OAKLEY ID id: 1 enum name: MD5
| IKEv1 ESP ID id: 1 enum name: HMAC_MD5
| IKEv2 ID id: 1 enum name: HMAC_MD5_96
| integrity algorithm sha; official name: sha1, IKEv1 OAKLEY id: 2, IKEv1 ESP_INFO id: 2, IKEv2 id: 2
| IKEv1 OAKLEY ID id: 2 enum name: SHA1
| IKEv1 ESP ID id: 2 enum name: HMAC_SHA1
| IKEv2 ID id: 2 enum name: HMAC_SHA1_96
| integrity algorithm sha2_512; official name: sha512, IKEv1 OAKLEY id: 6, IKEv1 ESP_INFO id: 7, IKEv2 id: 14
| IKEv1 OAKLEY ID id: 6 enum name: SHA2_512
| IKEv1 ESP ID id: 7 enum name: HMAC_SHA2_512
| IKEv2 ID id: 14 enum name: HMAC_SHA2_512_256
| integrity algorithm sha2_384; official name: sha384, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 6, IKEv2 id: 13
| IKEv1 OAKLEY ID id: 5 enum name: SHA2_384
| IKEv1 ESP ID id: 6 enum name: HMAC_SHA2_384
| IKEv2 ID id: 13 enum name: HMAC_SHA2_384_192
| integrity algorithm sha2_256; official name: sha256, IKEv1 OAKLEY id: 4, IKEv1 ESP_INFO id: 5, IKEv2 id: 12
| IKEv1 OAKLEY ID id: 4 enum name: SHA2_256
| IKEv1 ESP ID id: 5 enum name: HMAC_SHA2_256
| IKEv2 ID id: 12 enum name: HMAC_SHA2_256_128
| integrity algorithm aes_xcbc; official name: aes_xcbc, IKEv1 OAKLEY id: 0, IKEv1 ESP_INFO id: 9, IKEv2 id: 5
| IKEv1 ESP ID id: 9 enum name: AES_XCBC
| IKEv2 ID id: 5 enum name: AES_XCBC_96
| integrity algorithm aes_cmac; official name: aes_cmac, IKEv1 OAKLEY id: 0, IKEv1 ESP_INFO id: 250, IKEv2 id: 8
| IKEv1 ESP ID id: 250 enum name: AES_CMAC_96
| IKEv2 ID id: 8 enum name: AES_CMAC_96
Integrity algorithms:
  md5           IKEv1: IKE ESP AH  IKEv2: IKE ESP AH        (hmac_md5 hmac_md5_96)
  sha           IKEv1: IKE ESP AH  IKEv2: IKE ESP AH  FIPS  (sha1 sha1_96 hmac_sha1 hmac_sha1_96)
  sha2_512      IKEv1: IKE ESP AH  IKEv2: IKE ESP AH  FIPS  (sha512 hmac_sha2_512 hmac_sha2_512_256)
  sha2_384      IKEv1: IKE ESP AH  IKEv2: IKE ESP AH  FIPS  (sha384 hmac_sha2_384 hmac_sha2_384_192)
  sha2_256      IKEv1: IKE ESP AH  IKEv2: IKE ESP AH  FIPS  (sha2 sha256 hmac_sha2_256 hmac_sha2_256_128)
  aes_xcbc      IKEv1:     ESP AH  IKEv2:     ESP AH  FIPS  (aes_xcbc_96)
  aes_cmac      IKEv1:     ESP AH  IKEv2:     ESP AH  FIPS  (aes_cmac_96)
| DH algorithm assertion checks
| DH algorithm MODP1024; official name: modp1024, IKEv1 OAKLEY id: 2, IKEv1 ESP_INFO id: 0, IKEv2 id: 2
| IKEv1 OAKLEY ID id: 2 enum name: MODP1024
| IKEv2 ID id: 2 enum name: MODP1024
| DH algorithm MODP1536; official name: modp1536, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 0, IKEv2 id: 5
| IKEv1 OAKLEY ID id: 5 enum name: MODP1536
| IKEv2 ID id: 5 enum name: MODP1536
| DH algorithm MODP2048; official name: modp2048, IKEv1 OAKLEY id: 14, IKEv1 ESP_INFO id: 0, IKEv2 id: 14
| IKEv1 OAKLEY ID id: 14 enum name: MODP2048
| IKEv2 ID id: 14 enum name: MODP2048
| DH algorithm MODP3072; official name: modp3072, IKEv1 OAKLEY id: 15, IKEv1 ESP_INFO id: 0, IKEv2 id: 15
| IKEv1 OAKLEY ID id: 15 enum name: MODP3072
| IKEv2 ID id: 15 enum name: MODP3072
| DH algorithm MODP4096; official name: modp4096, IKEv1 OAKLEY id: 16, IKEv1 ESP_INFO id: 0, IKEv2 id: 16
| IKEv1 OAKLEY ID id: 16 enum name: MODP4096
| IKEv2 ID id: 16 enum name: MODP4096
| DH algorithm MODP6144; official name: modp6144, IKEv1 OAKLEY id: 17, IKEv1 ESP_INFO id: 0, IKEv2 id: 17
| IKEv1 OAKLEY ID id: 17 enum name: MODP6144
| IKEv2 ID id: 17 enum name: MODP6144
| DH algorithm MODP8192; official name: modp8192, IKEv1 OAKLEY id: 18, IKEv1 ESP_INFO id: 0, IKEv2 id: 18
| IKEv1 OAKLEY ID id: 18 enum name: MODP8192
| IKEv2 ID id: 18 enum name: MODP8192
| DH algorithm DH19; official name: dh19, IKEv1 OAKLEY id: 19, IKEv1 ESP_INFO id: 0, IKEv2 id: 19
| IKEv1 OAKLEY ID id: 19 enum name: ECP_256
| IKEv2 ID id: 19 enum name: ECP_256
| DH algorithm DH20; official name: dh20, IKEv1 OAKLEY id: 20, IKEv1 ESP_INFO id: 0, IKEv2 id: 20
| IKEv1 OAKLEY ID id: 20 enum name: ECP_384
| IKEv2 ID id: 20 enum name: ECP_384
| DH algorithm DH21; official name: dh21, IKEv1 OAKLEY id: 21, IKEv1 ESP_INFO id: 0, IKEv2 id: 21
| IKEv1 OAKLEY ID id: 21 enum name: ECP_521
| IKEv2 ID id: 21 enum name: ECP_521
| DH algorithm DH23; official name: dh23, IKEv1 OAKLEY id: 23, IKEv1 ESP_INFO id: 0, IKEv2 id: 23
| IKEv1 OAKLEY ID id: 23 enum name: DH23
| IKEv2 ID id: 23 enum name: DH23
| DH algorithm DH24; official name: dh24, IKEv1 OAKLEY id: 24, IKEv1 ESP_INFO id: 0, IKEv2 id: 24
| IKEv1 OAKLEY ID id: 24 enum name: DH24
| IKEv2 ID id: 24 enum name: DH24
DH algorithms:
  MODP1024      IKEv1: IKE         IKEv2: IKE               (dh2)
  MODP1536      IKEv1: IKE         IKEv2: IKE               (dh5)
  MODP2048      IKEv1: IKE         IKEv2: IKE         FIPS  (dh14)
  MODP3072      IKEv1: IKE         IKEv2: IKE         FIPS  (dh15)
  MODP4096      IKEv1: IKE         IKEv2: IKE         FIPS  (dh16)
  MODP6144      IKEv1: IKE         IKEv2: IKE         FIPS  (dh17)
  MODP8192      IKEv1: IKE         IKEv2: IKE         FIPS  (dh18)
  DH19          IKEv1: IKE         IKEv2: IKE         FIPS  (ecp_256)
  DH20          IKEv1: IKE         IKEv2: IKE         FIPS  (ecp_384)
  DH21          IKEv1: IKE         IKEv2: IKE         FIPS  (ecp_521)
  DH23          IKEv1: IKE         IKEv2: IKE         FIPS
  DH24          IKEv1: IKE         IKEv2: IKE         FIPS
| test_cbc_vector: Camellia: 16 bytes with 128-bit key
| decode_to_chunk: raw_key: input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0b3d8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: camellia, mechanism: CAMELLIA_CBC(1362), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: CAMELLIA_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: CAMELLIA_CBC (0x00000552)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: ciphertext: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| decode_to_chunk: cipertext: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Camellia: 16 bytes with 128-bit key passed
| test_cbc_vector: Camellia: 16 bytes with 128-bit key
| decode_to_chunk: raw_key: input "0x00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF"
| decode_to_chunk: output: 
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0b3d8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: camellia, mechanism: CAMELLIA_CBC(1362), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: CAMELLIA_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: CAMELLIA_CBC (0x00000552)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 "
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: ciphertext: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| decode_to_chunk: cipertext: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 "
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Camellia: 16 bytes with 128-bit key passed
| test_cbc_vector: Camellia: 16 bytes with 256-bit key
| decode_to_chunk: raw_key: input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0ffa8 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: camellia, mechanism: CAMELLIA_CBC(1362), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 32, flags: 0x300 -> target: CAMELLIA_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 32 bytes, type/mechanism: CAMELLIA_CBC (0x00000552)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: ciphertext: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| decode_to_chunk: cipertext: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Camellia: 16 bytes with 256-bit key passed
| test_cbc_vector: Camellia: 16 bytes with 256-bit key
| decode_to_chunk: raw_key: input "0x00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF FF EE DD CC BB AA 99 88 77 66 55 44 33 22 11 00"
| decode_to_chunk: output: 
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
|   ff ee dd cc  bb aa 99 88  77 66 55 44  33 22 11 00
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0ffa8 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
|   ff ee dd cc  bb aa 99 88  77 66 55 44  33 22 11 00
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: camellia, mechanism: CAMELLIA_CBC(1362), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 32, flags: 0x300 -> target: CAMELLIA_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 32 bytes, type/mechanism: CAMELLIA_CBC (0x00000552)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: ciphertext: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| decode_to_chunk: cipertext: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Camellia: 16 bytes with 256-bit key passed
| test_gcm_vector: enter
| decode_to_chunk: raw_key: input "0xcf063a34d4a9a76c2c86787d3f96db71"
| decode_to_chunk: output: 
|   cf 06 3a 34  d4 a9 a7 6c  2c 86 78 7d  3f 96 db 71
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0aae8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   cf 06 3a 34  d4 a9 a7 6c  2c 86 78 7d  3f 96 db 71
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_GCM (0x00001087)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: salted IV: input "0x113b9785971864c83b01c787"
| decode_to_chunk: output: 
|   11 3b 97 85  97 18 64 c8  3b 01 c7 87
| decode_to_chunk: AAD: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: plaintext: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: ciphertext: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: tag: input "0x72ac8493e3a5228b5d130a69d2510e42"
| decode_to_chunk: output: 
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| test_gcm_vector: decrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=0 tag-size=16
| test_gcm_vector: text+tag on call
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| test_gcm_vector: encrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=0 tag-size=16
| test_gcm_vector: text+tag on call
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| test_gcm_vector: release sym_key-key@0x7fb107e0ccf0
| test_gcm_vector: passed
| test_gcm_vector: enter
| decode_to_chunk: raw_key: input "0xe98b72a9881a84ca6b76e0f43e68647a"
| decode_to_chunk: output: 
|   e9 8b 72 a9  88 1a 84 ca  6b 76 e0 f4  3e 68 64 7a
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e10178 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   e9 8b 72 a9  88 1a 84 ca  6b 76 e0 f4  3e 68 64 7a
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_GCM (0x00001087)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: salted IV: input "0x8b23299fde174053f3d652ba"
| decode_to_chunk: output: 
|   8b 23 29 9f  de 17 40 53  f3 d6 52 ba
| decode_to_chunk: AAD: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: plaintext: input "0x28286a321293253c3e0aa2704a278032"
| decode_to_chunk: output: 
|   28 28 6a 32  12 93 25 3c  3e 0a a2 70  4a 27 80 32
| decode_to_chunk: ciphertext: input "0x5a3c1cf1985dbb8bed818036fdd5ab42"
| decode_to_chunk: output: 
|   5a 3c 1c f1  98 5d bb 8b  ed 81 80 36  fd d5 ab 42
| decode_to_chunk: tag: input "0x23c7ab0f952b7091cd324835043b5eb5"
| decode_to_chunk: output: 
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| test_gcm_vector: decrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=16 tag-size=16
| test_gcm_vector: text+tag on call
|   5a 3c 1c f1  98 5d bb 8b  ed 81 80 36  fd d5 ab 42
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   28 28 6a 32  12 93 25 3c  3e 0a a2 70  4a 27 80 32
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| test_gcm_vector: encrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=16 tag-size=16
| test_gcm_vector: text+tag on call
|   28 28 6a 32  12 93 25 3c  3e 0a a2 70  4a 27 80 32
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   5a 3c 1c f1  98 5d bb 8b  ed 81 80 36  fd d5 ab 42
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| test_gcm_vector: release sym_key-key@0x7fb107e0ccf0
| test_gcm_vector: passed
| test_gcm_vector: enter
| decode_to_chunk: raw_key: input "0xbfd414a6212958a607a0f5d3ab48471d"
| decode_to_chunk: output: 
|   bf d4 14 a6  21 29 58 a6  07 a0 f5 d3  ab 48 47 1d
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e10008 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   bf d4 14 a6  21 29 58 a6  07 a0 f5 d3  ab 48 47 1d
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_GCM (0x00001087)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: salted IV: input "0x86d8ea0ab8e40dcc481cd0e2"
| decode_to_chunk: output: 
|   86 d8 ea 0a  b8 e4 0d cc  48 1c d0 e2
| decode_to_chunk: AAD: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: plaintext: input "0xa6b76a066e63392c9443e60272ceaeb9d25c991b0f2e55e2804e168c05ea591a"
| decode_to_chunk: output: 
|   a6 b7 6a 06  6e 63 39 2c  94 43 e6 02  72 ce ae b9
|   d2 5c 99 1b  0f 2e 55 e2  80 4e 16 8c  05 ea 59 1a
| decode_to_chunk: ciphertext: input "0x62171db33193292d930bf6647347652c1ef33316d7feca99d54f1db4fcf513f8"
| decode_to_chunk: output: 
|   62 17 1d b3  31 93 29 2d  93 0b f6 64  73 47 65 2c
|   1e f3 33 16  d7 fe ca 99  d5 4f 1d b4  fc f5 13 f8
| decode_to_chunk: tag: input "0xc28280aa5c6c7a8bd366f28c1cfd1f6e"
| decode_to_chunk: output: 
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| test_gcm_vector: decrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=32 tag-size=16
| test_gcm_vector: text+tag on call
|   62 17 1d b3  31 93 29 2d  93 0b f6 64  73 47 65 2c
|   1e f3 33 16  d7 fe ca 99  d5 4f 1d b4  fc f5 13 f8
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   a6 b7 6a 06  6e 63 39 2c  94 43 e6 02  72 ce ae b9
|   d2 5c 99 1b  0f 2e 55 e2  80 4e 16 8c  05 ea 59 1a
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| test_gcm_vector: encrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=32 tag-size=16
| test_gcm_vector: text+tag on call
|   a6 b7 6a 06  6e 63 39 2c  94 43 e6 02  72 ce ae b9
|   d2 5c 99 1b  0f 2e 55 e2  80 4e 16 8c  05 ea 59 1a
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   62 17 1d b3  31 93 29 2d  93 0b f6 64  73 47 65 2c
|   1e f3 33 16  d7 fe ca 99  d5 4f 1d b4  fc f5 13 f8
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| test_gcm_vector: release sym_key-key@0x7fb107e0ccf0
| test_gcm_vector: passed
| test_gcm_vector: enter
| decode_to_chunk: raw_key: input "0x006c458100fc5f4d62949d2c833b82d1"
| decode_to_chunk: output: 
|   00 6c 45 81  00 fc 5f 4d  62 94 9d 2c  83 3b 82 d1
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e10088 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 6c 45 81  00 fc 5f 4d  62 94 9d 2c  83 3b 82 d1
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_GCM (0x00001087)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: salted IV: input "0xa4e9c4bc5725a21ff42c82b2"
| decode_to_chunk: output: 
|   a4 e9 c4 bc  57 25 a2 1f  f4 2c 82 b2
| decode_to_chunk: AAD: input "0x2efb14fb3657cdd6b9a8ff1a5f5a39b9"
| decode_to_chunk: output: 
|   2e fb 14 fb  36 57 cd d6  b9 a8 ff 1a  5f 5a 39 b9
| decode_to_chunk: plaintext: input "0xf381d3bfbee0a879f7a4e17b623278cedd6978053dd313530a18f1a836100950"
| decode_to_chunk: output: 
|   f3 81 d3 bf  be e0 a8 79  f7 a4 e1 7b  62 32 78 ce
|   dd 69 78 05  3d d3 13 53  0a 18 f1 a8  36 10 09 50
| decode_to_chunk: ciphertext: input "0xf39b4db3542d8542fb73fd2d66be568f26d7f814b3f87d1eceac3dd09a8d697e"
| decode_to_chunk: output: 
|   f3 9b 4d b3  54 2d 85 42  fb 73 fd 2d  66 be 56 8f
|   26 d7 f8 14  b3 f8 7d 1e  ce ac 3d d0  9a 8d 69 7e
| decode_to_chunk: tag: input "0x39f045cb23b698c925db134d56c5"
| decode_to_chunk: output: 
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| test_gcm_vector: decrypt: aad-size=16 salt-size=4 wire-IV-size=8 text-size=32 tag-size=14
| test_gcm_vector: text+tag on call
|   f3 9b 4d b3  54 2d 85 42  fb 73 fd 2d  66 be 56 8f
|   26 d7 f8 14  b3 f8 7d 1e  ce ac 3d d0  9a 8d 69 7e
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   f3 81 d3 bf  be e0 a8 79  f7 a4 e1 7b  62 32 78 ce
|   dd 69 78 05  3d d3 13 53  0a 18 f1 a8  36 10 09 50
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| test_gcm_vector: encrypt: aad-size=16 salt-size=4 wire-IV-size=8 text-size=32 tag-size=14
| test_gcm_vector: text+tag on call
|   f3 81 d3 bf  be e0 a8 79  f7 a4 e1 7b  62 32 78 ce
|   dd 69 78 05  3d d3 13 53  0a 18 f1 a8  36 10 09 50
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   f3 9b 4d b3  54 2d 85 42  fb 73 fd 2d  66 be 56 8f
|   26 d7 f8 14  b3 f8 7d 1e  ce ac 3d d0  9a 8d 69 7e
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| test_gcm_vector: release sym_key-key@0x7fb107e0ccf0
| test_gcm_vector: passed
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 128-bit key
| decode_to_chunk: raw_key: input "0x AE 68 52 F8 12 10 67 CC 4B F7 A5 76 55 77 F3 9E"
| decode_to_chunk: output: 
|   ae 68 52 f8  12 10 67 cc  4b f7 a5 76  55 77 f3 9e
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0b3d8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   ae 68 52 f8  12 10 67 cc  4b f7 a5 76  55 77 f3 9e
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: input counter-block: : input "0x 00 00 00 30  00 00 00 00 00 00 00 00  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: Ciphertext: input "0x E4 09 5D 4F B7 A7 B3 79 2D 61 75 A3 26 13 11 B8"
| decode_to_chunk: output: 
|   e4 09 5d 4f  b7 a7 b3 79  2d 61 75 a3  26 13 11 b8
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 00 00 30  00 00 00 00 00 00 00 00  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x E4 09 5D 4F B7 A7 B3 79 2D 61 75 A3 26 13 11 B8"
| decode_to_chunk: output: 
|   e4 09 5d 4f  b7 a7 b3 79  2d 61 75 a3  26 13 11 b8
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 128-bit key passed
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 128-bit key
| decode_to_chunk: raw_key: input "0x 7E 24 06 78 17 FA E0 D7 43 D6 CE 1F 32 53 91 63"
| decode_to_chunk: output: 
|   7e 24 06 78  17 fa e0 d7  43 d6 ce 1f  32 53 91 63
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0fee8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   7e 24 06 78  17 fa e0 d7  43 d6 ce 1f  32 53 91 63
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: input counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 01"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: Ciphertext: input "0x51 04 A1 06 16 8A 72 D9 79 0D 41 EE 8E DA D3 88EB 2E 1E FC 46 DA 57 C8 FC E6 30 DF 91 41 BE 28"
| decode_to_chunk: output: 
|   51 04 a1 06  16 8a 72 d9  79 0d 41 ee  8e da d3 88
|   eb 2e 1e fc  46 da 57 c8  fc e6 30 df  91 41 be 28
| decode_to_chunk: expected counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 03"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 01"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x51 04 A1 06 16 8A 72 D9 79 0D 41 EE 8E DA D3 88EB 2E 1E FC 46 DA 57 C8 FC E6 30 DF 91 41 BE 28"
| decode_to_chunk: output: 
|   51 04 a1 06  16 8a 72 d9  79 0d 41 ee  8e da d3 88
|   eb 2e 1e fc  46 da 57 c8  fc e6 30 df  91 41 be 28
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: expected counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 03"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 128-bit key passed
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 128-bit key
| decode_to_chunk: raw_key: input "0x 76 91 BE 03 5E 50 20 A8 AC 6E 61 85 29 F9 A0 DC"
| decode_to_chunk: output: 
|   76 91 be 03  5e 50 20 a8  ac 6e 61 85  29 f9 a0 dc
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0fee8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   76 91 be 03  5e 50 20 a8  ac 6e 61 85  29 f9 a0 dc
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: input counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 01"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: Ciphertext: input "0xC1 CF 48 A8 9F 2F FD D9 CF 46 52 E9 EF DB 72 D745 40 A4 2B DE 6D 78 36 D5 9A 5C EA AE F3 10 5325 B2 07 2F"
| decode_to_chunk: output: 
|   c1 cf 48 a8  9f 2f fd d9  cf 46 52 e9  ef db 72 d7
|   45 40 a4 2b  de 6d 78 36  d5 9a 5c ea  ae f3 10 53
|   25 b2 07 2f
| decode_to_chunk: expected counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 04"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 01"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 01
| decode_to_chunk: Ciphertext: input "0xC1 CF 48 A8 9F 2F FD D9 CF 46 52 E9 EF DB 72 D745 40 A4 2B DE 6D 78 36 D5 9A 5C EA AE F3 10 5325 B2 07 2F"
| decode_to_chunk: output: 
|   c1 cf 48 a8  9f 2f fd d9  cf 46 52 e9  ef db 72 d7
|   45 40 a4 2b  de 6d 78 36  d5 9a 5c ea  ae f3 10 53
|   25 b2 07 2f
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: expected counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 04"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 128-bit key passed
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 192-bit key
| decode_to_chunk: raw_key: input "0x16 AF 5B 14 5F C9 F5 79 C1 75 F9 3E 3B FB 0E ED86 3D 06 CC FD B7 85 15"
| decode_to_chunk: output: 
|   16 af 5b 14  5f c9 f5 79  c1 75 f9 3e  3b fb 0e ed
|   86 3d 06 cc  fd b7 85 15
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0ffa8 (24 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   16 af 5b 14  5f c9 f5 79  c1 75 f9 3e  3b fb 0e ed
|   86 3d 06 cc  fd b7 85 15
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 24, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 24 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: input counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 01
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: Ciphertext: input "0x 4B 55 38 4F E2 59 C9 C8 4E 79 35 A0 03 CB E9 28"
| decode_to_chunk: output: 
|   4b 55 38 4f  e2 59 c9 c8  4e 79 35 a0  03 cb e9 28
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x 4B 55 38 4F E2 59 C9 C8 4E 79 35 A0 03 CB E9 28"
| decode_to_chunk: output: 
|   4b 55 38 4f  e2 59 c9 c8  4e 79 35 a0  03 cb e9 28
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 192-bit key passed
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 192-bit key
| decode_to_chunk: raw_key: input "0x7C 5C B2 40 1B 3D C3 3C 19 E7 34 08 19 E0 F6 9C67 8C 3D B8 E6 F6 A9 1A"
| decode_to_chunk: output: 
|   7c 5c b2 40  1b 3d c3 3c  19 e7 34 08  19 e0 f6 9c
|   67 8c 3d b8  e6 f6 a9 1a
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0ffa8 (24 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   7c 5c b2 40  1b 3d c3 3c  19 e7 34 08  19 e0 f6 9c
|   67 8c 3d b8  e6 f6 a9 1a
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 24, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 24 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: input counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 01"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: Ciphertext: input "0x45 32 43 FC 60 9B 23 32 7E DF AA FA 71 31 CD 9F84 90 70 1C 5A D4 A7 9C FC 1F E0 FF 42 F4 FB 00"
| decode_to_chunk: output: 
|   45 32 43 fc  60 9b 23 32  7e df aa fa  71 31 cd 9f
|   84 90 70 1c  5a d4 a7 9c  fc 1f e0 ff  42 f4 fb 00
| decode_to_chunk: expected counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 03"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 01"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x45 32 43 FC 60 9B 23 32 7E DF AA FA 71 31 CD 9F84 90 70 1C 5A D4 A7 9C FC 1F E0 FF 42 F4 FB 00"
| decode_to_chunk: output: 
|   45 32 43 fc  60 9b 23 32  7e df aa fa  71 31 cd 9f
|   84 90 70 1c  5a d4 a7 9c  fc 1f e0 ff  42 f4 fb 00
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: expected counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 03"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 192-bit key passed
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 192-bit key
| decode_to_chunk: raw_key: input "0x02 BF 39 1E E8 EC B1 59 B9 59 61 7B 09 65 27 9BF5 9B 60 A7 86 D3 E0 FE"
| decode_to_chunk: output: 
|   02 bf 39 1e  e8 ec b1 59  b9 59 61 7b  09 65 27 9b
|   f5 9b 60 a7  86 d3 e0 fe
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0ffa8 (24 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   02 bf 39 1e  e8 ec b1 59  b9 59 61 7b  09 65 27 9b
|   f5 9b 60 a7  86 d3 e0 fe
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 24, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 24 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: input counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 01"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: Ciphertext: input "0x96 89 3F C5 5E 5C 72 2F 54 0B 7D D1 DD F7 E7 58D2 88 BC 95 C6 91 65 88 45 36 C8 11 66 2F 21 88AB EE 09 35"
| decode_to_chunk: output: 
|   96 89 3f c5  5e 5c 72 2f  54 0b 7d d1  dd f7 e7 58
|   d2 88 bc 95  c6 91 65 88  45 36 c8 11  66 2f 21 88
|   ab ee 09 35
| decode_to_chunk: expected counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 04"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 01"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x96 89 3F C5 5E 5C 72 2F 54 0B 7D D1 DD F7 E7 58D2 88 BC 95 C6 91 65 88 45 36 C8 11 66 2F 21 88AB EE 09 35"
| decode_to_chunk: output: 
|   96 89 3f c5  5e 5c 72 2f  54 0b 7d d1  dd f7 e7 58
|   d2 88 bc 95  c6 91 65 88  45 36 c8 11  66 2f 21 88
|   ab ee 09 35
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: expected counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 04"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 192-bit key passed
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 256-bit key
| decode_to_chunk: raw_key: input "0x77 6B EF F2 85 1D B0 6F 4C 8A 05 42 C8 69 6F 6C6A 81 AF 1E EC 96 B4 D3 7F C1 D6 89 E6 C1 C1 04"
| decode_to_chunk: output: 
|   77 6b ef f2  85 1d b0 6f  4c 8a 05 42  c8 69 6f 6c
|   6a 81 af 1e  ec 96 b4 d3  7f c1 d6 89  e6 c1 c1 04
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0ffa8 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   77 6b ef f2  85 1d b0 6f  4c 8a 05 42  c8 69 6f 6c
|   6a 81 af 1e  ec 96 b4 d3  7f c1 d6 89  e6 c1 c1 04
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 32, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 32 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: input counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 01
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: Ciphertext: input "0x 14 5A D0 1D BF 82 4E C7 56 08 63 DC 71 E3 E0 C0"
| decode_to_chunk: output: 
|   14 5a d0 1d  bf 82 4e c7  56 08 63 dc  71 e3 e0 c0
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x 14 5A D0 1D BF 82 4E C7 56 08 63 DC 71 E3 E0 C0"
| decode_to_chunk: output: 
|   14 5a d0 1d  bf 82 4e c7  56 08 63 dc  71 e3 e0 c0
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 256-bit key passed
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 256-bit key
| decode_to_chunk: raw_key: input "0xF6 D6 6D 6B D5 2D 59 BB 07 96 36 58 79 EF F8 86C6 6D D5 1A 5B 6A 99 74 4B 50 59 0C 87 A2 38 84"
| decode_to_chunk: output: 
|   f6 d6 6d 6b  d5 2d 59 bb  07 96 36 58  79 ef f8 86
|   c6 6d d5 1a  5b 6a 99 74  4b 50 59 0c  87 a2 38 84
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0ffa8 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   f6 d6 6d 6b  d5 2d 59 bb  07 96 36 58  79 ef f8 86
|   c6 6d d5 1a  5b 6a 99 74  4b 50 59 0c  87 a2 38 84
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 32, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 32 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: input counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 01"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: Ciphertext: input "0xF0 5E 23 1B 38 94 61 2C 49 EE 00 0B 80 4E B2 A9B8 30 6B 50 8F 83 9D 6A 55 30 83 1D 93 44 AF 1C"
| decode_to_chunk: output: 
|   f0 5e 23 1b  38 94 61 2c  49 ee 00 0b  80 4e b2 a9
|   b8 30 6b 50  8f 83 9d 6a  55 30 83 1d  93 44 af 1c
| decode_to_chunk: expected counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 03"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 01"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 01
| decode_to_chunk: Ciphertext: input "0xF0 5E 23 1B 38 94 61 2C 49 EE 00 0B 80 4E B2 A9B8 30 6B 50 8F 83 9D 6A 55 30 83 1D 93 44 AF 1C"
| decode_to_chunk: output: 
|   f0 5e 23 1b  38 94 61 2c  49 ee 00 0b  80 4e b2 a9
|   b8 30 6b 50  8f 83 9d 6a  55 30 83 1d  93 44 af 1c
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: expected counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 03"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 256-bit key passed
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 256-bit key
| decode_to_chunk: raw_key: input "0xFF 7A 61 7C E6 91 48 E4 F1 72 6E 2F 43 58 1D E2AA 62 D9 F8 05 53 2E DF F1 EE D6 87 FB 54 15 3D"
| decode_to_chunk: output: 
|   ff 7a 61 7c  e6 91 48 e4  f1 72 6e 2f  43 58 1d e2
|   aa 62 d9 f8  05 53 2e df  f1 ee d6 87  fb 54 15 3d
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e0ffa8 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   ff 7a 61 7c  e6 91 48 e4  f1 72 6e 2f  43 58 1d e2
|   aa 62 d9 f8  05 53 2e df  f1 ee d6 87  fb 54 15 3d
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 32, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 32 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: input counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 01"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: Ciphertext: input "0xEB 6C 52 82 1D 0B BB F7 CE 75 94 46 2A CA 4F AAB4 07 DF 86 65 69 FD 07 F4 8C C0 B5 83 D6 07 1F1E C0 E6 B8"
| decode_to_chunk: output: 
|   eb 6c 52 82  1d 0b bb f7  ce 75 94 46  2a ca 4f aa
|   b4 07 df 86  65 69 fd 07  f4 8c c0 b5  83 d6 07 1f
|   1e c0 e6 b8
| decode_to_chunk: expected counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 04"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 01"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 01
| decode_to_chunk: Ciphertext: input "0xEB 6C 52 82 1D 0B BB F7 CE 75 94 46 2A CA 4F AAB4 07 DF 86 65 69 FD 07 F4 8C C0 B5 83 D6 07 1F1E C0 E6 B8"
| decode_to_chunk: output: 
|   eb 6c 52 82  1d 0b bb f7  ce 75 94 46  2a ca 4f aa
|   b4 07 df 86  65 69 fd 07  f4 8c c0 b5  83 d6 07 1f
|   1e c0 e6 b8
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: expected counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 04"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 256-bit key passed
| test_cbc_vector: Encrypting 16 bytes (1 block) using AES-CBC with 128-bit key
| decode_to_chunk: raw_key: input "0x06a9214036b8a15b512e03d534120006"
| decode_to_chunk: output: 
|   06 a9 21 40  36 b8 a1 5b  51 2e 03 d5  34 12 00 06
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e10008 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   06 a9 21 40  36 b8 a1 5b  51 2e 03 d5  34 12 00 06
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes, mechanism: AES_CBC(4226), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_CBC (0x00001082)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: IV: : input "0x3dafba429d9eb430b422da802c9fac41"
| decode_to_chunk: output: 
|   3d af ba 42  9d 9e b4 30  b4 22 da 80  2c 9f ac 41
| decode_to_chunk: new IV: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| decode_to_chunk: plaintext: : input "Single block msg"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: ciphertext: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x3dafba429d9eb430b422da802c9fac41"
| decode_to_chunk: output: 
|   3d af ba 42  9d 9e b4 30  b4 22 da 80  2c 9f ac 41
| decode_to_chunk: new IV: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| decode_to_chunk: cipertext: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| decode_to_chunk: plaintext: : input "Single block msg"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 16 bytes (1 block) using AES-CBC with 128-bit key passed
| test_cbc_vector: Encrypting 32 bytes (2 blocks) using AES-CBC with 128-bit key
| decode_to_chunk: raw_key: input "0xc286696d887c9aa0611bbb3e2025a45a"
| decode_to_chunk: output: 
|   c2 86 69 6d  88 7c 9a a0  61 1b bb 3e  20 25 a4 5a
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e10008 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   c2 86 69 6d  88 7c 9a a0  61 1b bb 3e  20 25 a4 5a
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes, mechanism: AES_CBC(4226), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_CBC (0x00001082)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: IV: : input "0x562e17996d093d28ddb3ba695a2e6f58"
| decode_to_chunk: output: 
|   56 2e 17 99  6d 09 3d 28  dd b3 ba 69  5a 2e 6f 58
| decode_to_chunk: new IV: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| decode_to_chunk: plaintext: : input "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: ciphertext: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x562e17996d093d28ddb3ba695a2e6f58"
| decode_to_chunk: output: 
|   56 2e 17 99  6d 09 3d 28  dd b3 ba 69  5a 2e 6f 58
| decode_to_chunk: new IV: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| decode_to_chunk: cipertext: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| decode_to_chunk: plaintext: : input "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 32 bytes (2 blocks) using AES-CBC with 128-bit key passed
| test_cbc_vector: Encrypting 48 bytes (3 blocks) using AES-CBC with 128-bit key
| decode_to_chunk: raw_key: input "0x6c3ea0477630ce21a2ce334aa746c2cd"
| decode_to_chunk: output: 
|   6c 3e a0 47  76 30 ce 21  a2 ce 33 4a  a7 46 c2 cd
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e10008 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   6c 3e a0 47  76 30 ce 21  a2 ce 33 4a  a7 46 c2 cd
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes, mechanism: AES_CBC(4226), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_CBC (0x00001082)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: IV: : input "0xc782dc4c098c66cbd9cd27d825682c81"
| decode_to_chunk: output: 
|   c7 82 dc 4c  09 8c 66 cb  d9 cd 27 d8  25 68 2c 81
| decode_to_chunk: new IV: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| decode_to_chunk: plaintext: : input "This is a 48-byte message (exactly 3 AES blocks)"
| decode_to_chunk: output: 
|   54 68 69 73  20 69 73 20  61 20 34 38  2d 62 79 74
|   65 20 6d 65  73 73 61 67  65 20 28 65  78 61 63 74
|   6c 79 20 33  20 41 45 53  20 62 6c 6f  63 6b 73 29
| decode_to_chunk: ciphertext: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0xc782dc4c098c66cbd9cd27d825682c81"
| decode_to_chunk: output: 
|   c7 82 dc 4c  09 8c 66 cb  d9 cd 27 d8  25 68 2c 81
| decode_to_chunk: new IV: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| decode_to_chunk: cipertext: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| decode_to_chunk: plaintext: : input "This is a 48-byte message (exactly 3 AES blocks)"
| decode_to_chunk: output: 
|   54 68 69 73  20 69 73 20  61 20 34 38  2d 62 79 74
|   65 20 6d 65  73 73 61 67  65 20 28 65  78 61 63 74
|   6c 79 20 33  20 41 45 53  20 62 6c 6f  63 6b 73 29
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 48 bytes (3 blocks) using AES-CBC with 128-bit key passed
| test_cbc_vector: Encrypting 64 bytes (4 blocks) using AES-CBC with 128-bit key
| decode_to_chunk: raw_key: input "0x56e47a38c5598974bc46903dba290349"
| decode_to_chunk: output: 
|   56 e4 7a 38  c5 59 89 74  bc 46 90 3d  ba 29 03 49
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb107e10008 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   56 e4 7a 38  c5 59 89 74  bc 46 90 3d  ba 29 03 49
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes, mechanism: AES_CBC(4226), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0ccf0, size: 16 bytes, type/mechanism: AES_CBC (0x00001082)
| symkey: release tmp-key@0x7fb107e0e570
| decode_to_chunk: IV: : input "0x8ce82eefbea0da3c44699ed7db51b7d9"
| decode_to_chunk: output: 
|   8c e8 2e ef  be a0 da 3c  44 69 9e d7  db 51 b7 d9
| decode_to_chunk: new IV: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| decode_to_chunk: plaintext: : input "0xa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf"
| decode_to_chunk: output: 
|   a0 a1 a2 a3  a4 a5 a6 a7  a8 a9 aa ab  ac ad ae af
|   b0 b1 b2 b3  b4 b5 b6 b7  b8 b9 ba bb  bc bd be bf
|   c0 c1 c2 c3  c4 c5 c6 c7  c8 c9 ca cb  cc cd ce cf
|   d0 d1 d2 d3  d4 d5 d6 d7  d8 d9 da db  dc dd de df
| decode_to_chunk: ciphertext: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x8ce82eefbea0da3c44699ed7db51b7d9"
| decode_to_chunk: output: 
|   8c e8 2e ef  be a0 da 3c  44 69 9e d7  db 51 b7 d9
| decode_to_chunk: new IV: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| decode_to_chunk: cipertext: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| decode_to_chunk: plaintext: : input "0xa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf"
| decode_to_chunk: output: 
|   a0 a1 a2 a3  a4 a5 a6 a7  a8 a9 aa ab  ac ad ae af
|   b0 b1 b2 b3  b4 b5 b6 b7  b8 b9 ba bb  bc bd be bf
|   c0 c1 c2 c3  c4 c5 c6 c7  c8 c9 ca cb  cc cd ce cf
|   d0 d1 d2 d3  d4 d5 d6 d7  d8 d9 da db  dc dd de df
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7fb107e0ccf0
| test_ctr_vector: Encrypting 64 bytes (4 blocks) using AES-CBC with 128-bit key passed
starting up 1 crypto helpers
started thread for crypto helper 0 (master fd 11)
| setup helper callback for master fd 11
Using Linux XFRM/NETKEY IPsec interface code on 4.0.4-301.fc22.x86_64
| process 2272 listening for PF_KEY_V2 on file descriptor 15
| kernel_alg_init()
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=18(ESP_AES_GCM_A), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=19(ESP_AES_GCM_B), alg_ivlen=12, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=20(ESP_AES_GCM_C), alg_ivlen=16, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=14(ESP_AES_CCM_A), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=15(ESP_AES_CCM_B), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=16(ESP_AES_CCM_C), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| Registered AEAD AES CCM/GCM algorithms
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=250(AH_AES_CMAC_96), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| Registered new AUTH algorithms
| finish_pfkey_msg: K_SADB_REGISTER message 1 for AH 
|   02 07 00 02  02 00 00 00  01 00 00 00  e0 08 00 00
seccomp security for crypto helper not supported
| status value returned by setting the priority of this thread (crypto helper 0) 22
| crypto helper 0 waiting on fd 12
| pfkey_get: K_SADB_REGISTER message 1
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: sadb_msg_len=22 sadb_supported_len=72
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=251(AH_NULL), alg_ivlen=0, alg_minbits=0, alg_maxbits=0
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=2(AH_MD5), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=3(AH_SHA), alg_ivlen=0, alg_minbits=160, alg_maxbits=160
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=5(AH_SHA2_256), alg_ivlen=0, alg_minbits=256, alg_maxbits=256
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=6(AH_SHA2_384), alg_ivlen=0, alg_minbits=384, alg_maxbits=384
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=7(AH_SHA2_512), alg_ivlen=0, alg_minbits=512, alg_maxbits=512
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=8(AH_RIPEMD), alg_ivlen=0, alg_minbits=160, alg_maxbits=160
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=9(AH_AES_XCBC_MAC), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: sadb_msg_len=22 sadb_supported_len=88
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=11(ESP_NULL), alg_ivlen=0, alg_minbits=0, alg_maxbits=0
| kernel_alg_add(2,15,11) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=2(ESP_DES(UNUSED)), alg_ivlen=8, alg_minbits=64, alg_maxbits=64
| kernel_alg_add(2,15,2) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=3(ESP_3DES), alg_ivlen=8, alg_minbits=192, alg_maxbits=192
| kernel_alg_add(2,15,3) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=6(ESP_CAST), alg_ivlen=8, alg_minbits=40, alg_maxbits=128
| kernel_alg_add(2,15,6) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=7(ESP_BLOWFISH(UNUSED)), alg_ivlen=8, alg_minbits=40, alg_maxbits=448
| kernel_alg_add(2,15,7) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=12(ESP_AES), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(2,15,12) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=252(ESP_SERPENT), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(2,15,252) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=22(ESP_CAMELLIA), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(2,15,22) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=253(ESP_TWOFISH), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(2,15,253) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=13(ESP_AES_CTR), alg_ivlen=8, alg_minbits=160, alg_maxbits=288
| kernel_alg_add(2,15,13) fails because alg combo is invalid
| AH registered with kernel.
| finish_pfkey_msg: K_SADB_REGISTER message 2 for ESP 
|   02 07 00 03  02 00 00 00  02 00 00 00  e0 08 00 00
| pfkey_get: K_SADB_REGISTER message 2
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: sadb_msg_len=22 sadb_supported_len=72
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=251(AH_NULL), alg_ivlen=0, alg_minbits=0, alg_maxbits=0
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=251
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=2(AH_MD5), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=2
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=3(AH_SHA), alg_ivlen=0, alg_minbits=160, alg_maxbits=160
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=3
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=5(AH_SHA2_256), alg_ivlen=0, alg_minbits=256, alg_maxbits=256
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=5
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=6(AH_SHA2_384), alg_ivlen=0, alg_minbits=384, alg_maxbits=384
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=6
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=7(AH_SHA2_512), alg_ivlen=0, alg_minbits=512, alg_maxbits=512
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=7
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=8(AH_RIPEMD), alg_ivlen=0, alg_minbits=160, alg_maxbits=160
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=8
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=9(AH_AES_XCBC_MAC), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=9
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: sadb_msg_len=22 sadb_supported_len=88
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=11(ESP_NULL), alg_ivlen=0, alg_minbits=0, alg_maxbits=0
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=2(ESP_DES(UNUSED)), alg_ivlen=8, alg_minbits=64, alg_maxbits=64
| kernel_alg_add(): Ignoring alg_id=2(ESP_DES(UNUSED)) - too weak
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=3(ESP_3DES), alg_ivlen=8, alg_minbits=192, alg_maxbits=192
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=6(ESP_CAST), alg_ivlen=8, alg_minbits=40, alg_maxbits=128
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=7(ESP_BLOWFISH(UNUSED)), alg_ivlen=8, alg_minbits=40, alg_maxbits=448
| kernel_alg_add(): Ignoring alg_id=7(ESP_BLOWFISH(UNUSED)) - too weak
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=12(ESP_AES), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=252(ESP_SERPENT), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=22(ESP_CAMELLIA), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=253(ESP_TWOFISH), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=13(ESP_AES_CTR), alg_ivlen=8, alg_minbits=160, alg_maxbits=288
| ESP registered with kernel.
| finish_pfkey_msg: K_SADB_REGISTER message 3 for IPCOMP 
|   02 07 00 09  02 00 00 00  03 00 00 00  e0 08 00 00
| pfkey_get: K_SADB_REGISTER message 3
| IPCOMP registered with kernel.
| Registered AH, ESP and IPCOMP
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e0fe48
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| setup kernel fd callback
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952ed5 (length 11)
| vendor id hash md5 final bytes@0x7fb107e10138 (length 16)
| vendor id  70 03 cb c1  09 7d be 9c  26 00 ba 69  83 bc 8b 35
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952ee1 (length 19)
| vendor id hash md5 final bytes@0x7fb107e10178 (length 16)
| vendor id  1e 2b 51 69  05 99 1c 7d  7c 96 fc bf  b5 87 e4 61
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952ef8 (length 39)
| vendor id hash md5 final bytes@0x7fb107e0aae8 (length 16)
| vendor id  ad 2c 0d d0  b9 c3 20 83  cc ba 25 b8  86 1e c4 55
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952f20 (length 6)
| vendor id hash md5 final bytes@0x7fb107e101b8 (length 16)
| vendor id  62 1b 04 bb  09 88 2a c1  e1 59 35 fe  fa 24 ae ee
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952f27 (length 12)
| vendor id hash md5 final bytes@0x7fb107e10398 (length 16)
| vendor id  05 41 82 a0  7c 7a e2 06  f9 d2 cf 9d  24 32 c4 82
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952f34 (length 16)
| vendor id hash md5 final bytes@0x7fb107e104e8 (length 16)
| vendor id  b9 16 23 e6  93 ca 18 a5  4c 6a 27 78  55 23 05 e8
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952f45 (length 16)
| vendor id hash md5 final bytes@0x7fb107e10528 (length 16)
| vendor id  54 30 88 8d  e0 1a 31 a6  fa 8f 60 22  4e 44 99 58
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952f56 (length 16)
| vendor id hash md5 final bytes@0x7fb107e10568 (length 16)
| vendor id  7e e5 cb 85  f7 1c e2 59  c9 4a 5c 73  1e e4 e7 52
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952f67 (length 16)
| vendor id hash md5 final bytes@0x7fb107e105a8 (length 16)
| vendor id  63 d9 a1 a7  00 94 91 b5  a0 a6 fd eb  2a 82 84 f0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952f78 (length 18)
| vendor id hash md5 final bytes@0x7fb107e105e8 (length 16)
| vendor id  eb 4b 0d 96  27 6b 4e 22  0a d1 62 21  a7 b2 a5 e6
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952f90 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10628 (length 16)
| vendor id  fb f4 76 14  98 40 31 fa  8e 3b b6 19  80 89 b2 23
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106952fc8 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10668 (length 16)
| vendor id  19 52 dc 91  ac 20 f6 46  fb 01 cf 42  a3 3a ee 30
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953000 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10b78 (length 16)
| vendor id  e8 bf fa 64  3e 5c 8f 2c  d1 0f da 73  70 b6 eb e5
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953038 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10bb8 (length 16)
| vendor id  c1 11 1b 2d  ee 8c bc 3d  62 05 73 ec  57 aa b9 cb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953070 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10bf8 (length 16)
| vendor id  09 ec 27 bf  bc 09 c7 58  23 cf ec bf  fe 56 5a 2e
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069530a8 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10c38 (length 16)
| vendor id  7f 21 a5 96  e4 e3 18 f0  b2 f4 94 4c  23 84 cb 84
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069530e0 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10c78 (length 16)
| vendor id  28 36 d1 fd  28 07 bc 9e  5a e3 07 86  32 04 51 ec
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953118 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10cb8 (length 16)
| vendor id  a6 8d e7 56  a9 c5 22 9b  ae 66 49 80  40 95 1a d5
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953150 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10cf8 (length 16)
| vendor id  3f 23 72 86  7e 23 7c 1c  d8 25 0a 75  55 9c ae 20
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953188 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10d38 (length 16)
| vendor id  0e 58 d5 77  4d f6 02 00  7d 0b 02 44  36 60 f7 eb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069531c0 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10d78 (length 16)
| vendor id  f5 ce 31 eb  c2 10 f4 43  50 cf 71 26  5b 57 38 0f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069531f8 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10db8 (length 16)
| vendor id  f6 42 60 af  2e 27 42 da  dd d5 69 87  06 8a 99 a0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953230 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10df8 (length 16)
| vendor id  7a 54 d3 bd  b3 b1 e6 d9  23 89 20 64  be 2d 98 1c
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953268 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10e38 (length 16)
| vendor id  9a a1 f3 b4  34 72 a4 5d  5f 50 6a eb  26 0c f2 14
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069532a0 (length 55)
| vendor id hash md5 final bytes@0x7fb107e10e78 (length 16)
| vendor id  68 80 c7 d0  26 09 91 14  e4 86 c5 54  30 e7 ab ee
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953380 (length 41)
| vendor id hash md5 final bytes@0x7ffc1076c9f0 (length 16)
| vendor id  44 76 1b d7  6b 80 85 41  74 87 ee 8a  51 cf fc f3
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069533c0 (length 53)
| vendor id hash md5 final bytes@0x7ffc1076c9f0 (length 16)
| vendor id  b7 0e 8a c3  92 b1 6e 05  48 2f c4 dc  36 10 91 68
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953418 (length 58)
| vendor id hash md5 final bytes@0x7ffc1076c9f0 (length 16)
| vendor id  97 1d ea 93  c3 c2 06 74  f9 ae 35 40  83 de 3e 2f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695347c (length 14)
| vendor id hash md5 final bytes@0x7ffc1076c9f0 (length 16)
| vendor id  08 72 0b ee  9e 28 95 3c  e0 8f 0a 18  b6 e2 9d da
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069534a8 (length 37)
| vendor id hash md5 final bytes@0x7fb107e11f28 (length 16)
| vendor id  27 ba b5 dc  01 ea 07 60  ea 4e 31 90  ac 27 c0 d0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069534d0 (length 37)
| vendor id hash md5 final bytes@0x7fb107e11f68 (length 16)
| vendor id  61 05 c4 22  e7 68 47 e4  3f 96 84 80  12 92 ae cd
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069534f6 (length 10)
| vendor id hash md5 final bytes@0x7fb107e11fa8 (length 16)
| vendor id  50 76 0f 62  4c 63 e5 c5  3e ea 38 6c  68 5c a0 83
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953508 (length 38)
| vendor id hash md5 final bytes@0x7fb107e11fe8 (length 16)
| vendor id  6a 74 34 c1  9d 7e 36 34  80 90 a0 23  34 c9 c8 05
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695352f (length 29)
| vendor id hash md5 final bytes@0x7fb107e12028 (length 16)
| vendor id  44 85 15 2d  18 b6 bb cd  0b e8 a8 46  95 79 dd cc
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695354d (length 29)
| vendor id hash md5 final bytes@0x7fb107e12068 (length 16)
| vendor id  16 f6 ca 16  e4 a4 06 6d  83 82 1a 0f  0a ea a8 62
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695356b (length 29)
| vendor id hash md5 final bytes@0x7fb107e120a8 (length 16)
| vendor id  cd 60 46 43  35 df 21 f8  7c fd b2 fc  68 b6 a4 48
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953590 (length 30)
| vendor id hash md5 final bytes@0x7fb107e12168 (length 16)
| vendor id  90 cb 80 91  3e bb 69 6e  08 63 81 b5  ec 42 7b 1f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069535d0 (length 29)
| vendor id hash md5 final bytes@0x7fb107e121a8 (length 16)
| vendor id  7d 94 19 a6  53 10 ca 6f  2c 17 9d 92  15 52 9d 56
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069535ee (length 29)
| vendor id hash md5 final bytes@0x7fb107e121e8 (length 16)
| vendor id  99 09 b6 4e  ed 93 7c 65  73 de 52 ac  e9 52 fa 6b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695360c (length 29)
| vendor id hash md5 final bytes@0x7fb107e12228 (length 16)
| vendor id  80 d0 bb 3d  ef 54 56 5e  e8 46 45 d4  c8 5c e3 ee
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695362a (length 29)
| vendor id hash md5 final bytes@0x7fb107e12268 (length 16)
| vendor id  4d 1e 0e 13  6d ea fa 34  c4 f3 ea 9f  02 ec 72 85
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953648 (length 29)
| vendor id hash md5 final bytes@0x7fb107e122a8 (length 16)
| vendor id  43 9b 59 f8  ba 67 6c 4c  77 37 ae 22  ea b8 f5 82
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953666 (length 29)
| vendor id hash md5 final bytes@0x7fb107e122e8 (length 16)
| vendor id  8f 8d 83 82  6d 24 6b 6f  c7 a8 a6 a4  28 c1 1d e8
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953684 (length 26)
| vendor id hash md5 final bytes@0x7fb107e12328 (length 16)
| vendor id  4d f3 79 28  e9 fc 4f d1  b3 26 21 70  d5 15 c6 62
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695369f (length 8)
| vendor id hash md5 final bytes@0x7fb107e12368 (length 16)
| vendor id  4a 13 1c 81  07 03 58 45  5c 57 28 f2  0e 95 45 2f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069537a7 (length 13)
| vendor id hash md5 final bytes@0x7fb107e12428 (length 16)
| vendor id  40 48 b7 d5  6e bc e8 85  25 e7 de 7f  00 d6 c2 d3
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069537b5 (length 19)
| vendor id hash md5 final bytes@0x7fb107e124b8 (length 16)
| vendor id  26 24 4d 38  ed db 61 b3  17 2a 36 e3  d0 cf b8 19
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069537d0 (length 32)
| vendor id hash md5 final bytes@0x7fb107e124f8 (length 16)
| vendor id  fb 1d e3 cd  f3 41 b7 ea  16 b7 e5 be  08 55 f1 20
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069537f1 (length 17)
| vendor id hash md5 final bytes@0x7fb107e12538 (length 16)
| vendor id  e3 a5 96 6a  76 37 9f e7  07 22 82 31  e5 ce 86 52
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953803 (length 14)
| vendor id hash md5 final bytes@0x7fb107e12578 (length 16)
| vendor id  21 4c a4 fa  ff a7 f3 2d  67 48 e5 30  33 95 ae 83
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953812 (length 10)
| vendor id hash md5 final bytes@0x7fb107e125b8 (length 16)
| vendor id  88 2f e5 6d  6f d2 0d bc  22 51 61 3b  2e be 5b eb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695381d (length 16)
| vendor id hash md5 final bytes@0x7fb107e125f8 (length 16)
| vendor id  2c e9 c9 46  a4 c8 79 bf  11 b5 0b 76  cc 56 92 cb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695382e (length 16)
| vendor id hash md5 final bytes@0x7fb107e12638 (length 16)
| vendor id  9d bb af cf  1d b0 dd 59  5a e0 65 29  40 03 ad 3e
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695383f (length 16)
| vendor id hash md5 final bytes@0x7fb107e12678 (length 16)
| vendor id  77 e8 ee a6  f5 56 a4 99  de 3f fe 7f  7f 95 66 1c
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953850 (length 16)
| vendor id hash md5 final bytes@0x7fb107e126b8 (length 16)
| vendor id  b1 81 b1 8e  11 4f c2 09  b3 c6 e2 6c  3a 80 71 8e
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953861 (length 16)
| vendor id hash md5 final bytes@0x7fb107e126f8 (length 16)
| vendor id  1e f2 83 f8  35 49 b5 ff  96 08 b6 d6  34 f8 4d 75
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953872 (length 16)
| vendor id hash md5 final bytes@0x7fb107e127b8 (length 16)
| vendor id  dd 18 0d 21  e5 ce 65 5a  76 8b a3 22  11 dd 8a d9
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953883 (length 16)
| vendor id hash md5 final bytes@0x7fb107e127f8 (length 16)
| vendor id  4c 90 13 69  46 57 7b 51  91 9d 8d 9a  6b 8e 4a 9f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953894 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12838 (length 16)
| vendor id  ab 07 46 22  1c c8 fd 0d  52 38 f7 3a  9b 3d a5 57
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069538a5 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12878 (length 16)
| vendor id  47 94 ce f6  84 34 22 98  0d 1a 3d 06  af 41 c5 cd
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069538b6 (length 16)
| vendor id hash md5 final bytes@0x7fb107e128b8 (length 16)
| vendor id  d3 f1 c4 88  c3 68 17 5d  5f 40 a8 f5  ca 5f 5e 12
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069538c7 (length 16)
| vendor id hash md5 final bytes@0x7fb107e128f8 (length 16)
| vendor id  15 a1 ac e7  ee 52 fd df  ef 04 f9 28  db 2d d1 34
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069538d8 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12938 (length 16)
| vendor id  58 49 ab 6d  8b ea bd 6e  4d 09 e5 a3  b8 8c 08 9a
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069538e9 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12978 (length 16)
| vendor id  31 2f 9c b1  a6 b9 0e 19  de 75 28 c9  04 ac 30 87
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069538fa (length 16)
| vendor id hash md5 final bytes@0x7fb107e129b8 (length 16)
| vendor id  bf 0f bf 73  06 eb b7 82  70 42 d8 93  53 98 86 e2
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695390b (length 16)
| vendor id hash md5 final bytes@0x7fb107e129f8 (length 16)
| vendor id  d1 96 83 36  8a f4 b0 ed  c2 1c cd e9  82 b1 d1 b0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695391c (length 16)
| vendor id hash md5 final bytes@0x7fb107e12a38 (length 16)
| vendor id  ea 84 0a a4  df c9 71 2d  6c 32 b5 a1  6e b3 29 a3
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695392d (length 16)
| vendor id hash md5 final bytes@0x7fb107e12a78 (length 16)
| vendor id  66 a2 04 55  07 c1 19 da  78 a4 66 62  59 cd ea 48
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695393e (length 16)
| vendor id hash md5 final bytes@0x7fb107e12ab8 (length 16)
| vendor id  78 fd d2 87  de f0 1a 3f  07 4b 53 69  ea b4 fd 1c
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb10695394f (length 17)
| vendor id hash md5 final bytes@0x7fb107e12af8 (length 16)
| vendor id  bf 3a 89 ae  5b ef 8e 72  d4 4d ac 8b  b8 8d 7d 5f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953961 (length 17)
| vendor id hash md5 final bytes@0x7fb107e12b38 (length 16)
| vendor id  b7 bd 9f 2f  97 8e 32 59  a7 aa 9f 7a  13 96 ad 6c
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953973 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12b78 (length 16)
| vendor id  9f 68 90 13  25 a9 72 89  43 35 30 2a  95 31 ab 9f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953984 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12bb8 (length 16)
| vendor id  ba b2 53 f4  cb 10 a8 10  8a 7c 92 7c  56 c8 78 86
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953995 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12bf8 (length 16)
| vendor id  2a 51 7d 0d  23 c3 7d 08  bc e7 c2 92  a0 21 7b 39
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069539a6 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12c38 (length 16)
| vendor id  2d 1f 40 61  18 fb d5 d2  84 74 79 1f  fa 00 48 8a
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069539b7 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12c78 (length 16)
| vendor id  8c 4a 3b cb  72 9b 11 f7  03 d2 2a 5b  39 64 0c a8
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069539c8 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12cb8 (length 16)
| vendor id  3a 0d 4e 7c  a4 e4 92 ed  4d fe 47 6d  1a c6 01 8b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069539d9 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12cf8 (length 16)
| vendor id  fe 3f 49 70  6e 26 a9 fb  36 a8 7b fc  e9 ea 36 ce
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069539ea (length 16)
| vendor id hash md5 final bytes@0x7fb107e12d38 (length 16)
| vendor id  4c 7e fa 31  b3 9e 51 04  32 a3 17 57  0d 97 bb b9
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069539fb (length 16)
| vendor id hash md5 final bytes@0x7fb107e12d78 (length 16)
| vendor id  76 c7 2b fd  39 84 24 dd  00 1b 86 d0  01 2f e0 61
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953a0c (length 16)
| vendor id hash md5 final bytes@0x7fb107e12db8 (length 16)
| vendor id  fb 46 41 ad  0e eb 2a 34  49 1d 15 f4  ef f5 10 63
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953a1d (length 16)
| vendor id hash md5 final bytes@0x7fb107e12df8 (length 16)
| vendor id  29 99 32 27  7b 7d fe 38  2c e2 34 65  33 3a 7d 23
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953a2e (length 16)
| vendor id hash md5 final bytes@0x7fb107e12e38 (length 16)
| vendor id  e3 7f 2d 5b  a8 9a 62 cd  20 2e e2 7d  ac 06 c8 a8
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953a3f (length 16)
| vendor id hash md5 final bytes@0x7fb107e12e78 (length 16)
| vendor id  32 f0 e9 b9  c0 6d fe 8c  9a d5 59 9a  63 69 71 a1
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953a50 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12eb8 (length 16)
| vendor id  7f 50 cc 4e  bf 04 c2 d9  da 73 ab fd  69 b7 7a a2
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953a61 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12ef8 (length 16)
| vendor id  a1 94 e2 aa  dd d0 ba fb  95 25 3d d9  6d c7 33 eb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953a72 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12f38 (length 16)
| vendor id  81 34 87 85  82 12 17 85  ba 65 ea 34  5d 6b a7 24
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953a83 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12f78 (length 16)
| vendor id  07 fa 12 8e  47 54 f9 44  7b 1d d4 63  74 ee f3 60
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953a94 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12fb8 (length 16)
| vendor id  b9 27 f9 52  19 a0 fe 36  00 db a3 c1  18 2a e5 5f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953aa5 (length 16)
| vendor id hash md5 final bytes@0x7fb107e12ff8 (length 16)
| vendor id  b2 86 0e 78  37 f7 11 be  f3 d0 ee b1  06 87 2d ed
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953ab6 (length 16)
| vendor id hash md5 final bytes@0x7fb107e13038 (length 16)
| vendor id  5b 1c d6 fe  7d 05 0e da  6c 93 87 1c  10 7d b3 d2
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953ac7 (length 16)
| vendor id hash md5 final bytes@0x7fb107e13078 (length 16)
| vendor id  66 af bc 12  bb fe 6c e1  08 b1 f6 9f  4b c9 17 b7
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953ad8 (length 16)
| vendor id hash md5 final bytes@0x7fb107e130b8 (length 16)
| vendor id  3f 32 66 49  9f fd bd 85  95 0e 70 22  98 06 28 44
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953ae9 (length 16)
| vendor id hash md5 final bytes@0x7fb107e130f8 (length 16)
| vendor id  1f 44 42 29  6b 83 d7 e3  3a 8b 45 20  9b a0 e5 90
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953afa (length 16)
| vendor id hash md5 final bytes@0x7fb107e13138 (length 16)
| vendor id  3c 5e ba 3d  85 64 92 8e  32 ae 43 c3  d9 92 4d ee
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953b0b (length 16)
| vendor id hash md5 final bytes@0x7fb107e13178 (length 16)
| vendor id  3f 26 7e d6  21 ad a7 ee  6c 7d 88 93  cc b0 b1 4b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953b1c (length 16)
| vendor id hash md5 final bytes@0x7fb107e131b8 (length 16)
| vendor id  7a 6b f5 b7  df 89 64 2a  75 a7 8e f7  d6 57 c1 c0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953b2d (length 16)
| vendor id hash md5 final bytes@0x7fb107e131f8 (length 16)
| vendor id  df 5b 1f 0f  1d 56 79 d9  f8 51 2b 16  c5 5a 60 65
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953b3e (length 16)
| vendor id hash md5 final bytes@0x7fb107e13238 (length 16)
| vendor id  86 1c e5 eb  72 16 4b 19  0e 9e 62 9a  31 cf 49 01
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953b4f (length 16)
| vendor id hash md5 final bytes@0x7fb107e13278 (length 16)
| vendor id  9a 4a 46 48  f6 0f 8e da  7c fc bf e2  71 ee 5b 7d
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953b60 (length 16)
| vendor id hash md5 final bytes@0x7fb107e132b8 (length 16)
| vendor id  9e b3 d9 07  ed 7a da 4e  3c bc ac b9  17 ab c8 e4
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953b71 (length 16)
| vendor id hash md5 final bytes@0x7fb107e132f8 (length 16)
| vendor id  48 5a 70 36  1b 44 33 b3  1d ea 1c 6b  e0 df 24 3e
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953b82 (length 16)
| vendor id hash md5 final bytes@0x7fb107e13338 (length 16)
| vendor id  98 2b 7a 06  3a 33 c1 43  a8 ea dc 88  24 9f 6b cc
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953b93 (length 16)
| vendor id hash md5 final bytes@0x7fb107e13378 (length 16)
| vendor id  e7 a3 fd 0c  6d 77 1a 8f  1b 8a 86 a4  16 9c 9e a4
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953ba4 (length 16)
| vendor id hash md5 final bytes@0x7fb107e133b8 (length 16)
| vendor id  75 b0 65 3c  b2 81 eb 26  d3 1e de 38  c8 e1 e2 28
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953bb5 (length 16)
| vendor id hash md5 final bytes@0x7fb107e133f8 (length 16)
| vendor id  e8 29 c8 81  49 ba b3 c0  ce e8 5d a6  0e 18 ae 9b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953bc6 (length 16)
| vendor id hash md5 final bytes@0x7fb107e13438 (length 16)
| vendor id  42 a4 83 4c  92 ab 9a 77  77 06 3a fa  25 4b cb 69
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953bd7 (length 16)
| vendor id hash md5 final bytes@0x7fb107e13478 (length 16)
| vendor id  f6 97 c1 af  cc 2e c8 dd  cd f9 9d c7  af 03 a6 7f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953be8 (length 16)
| vendor id hash md5 final bytes@0x7fb107e134b8 (length 16)
| vendor id  b8 f9 2b 2f  a2 d3 fe 5f  e1 58 34 4b  da 1c c6 ae
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953bf9 (length 16)
| vendor id hash md5 final bytes@0x7fb107e134f8 (length 16)
| vendor id  99 dc 7c c8  23 37 6b 3b  33 d0 43 57  89 6a e0 7b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953c0a (length 16)
| vendor id hash md5 final bytes@0x7fb107e13538 (length 16)
| vendor id  d9 11 8b 1e  9d e5 ef ce  d9 cc 9d 88  3f 21 68 ff
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb106953c1b (length 16)
| vendor id hash md5 final bytes@0x7fb107e13578 (length 16)
| vendor id  85 b6 cb ec  48 0d 5c 8c  d9 88 2c 82  5a c2 c2 44
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7fb107e0ff10
| vendor id hash md5 digest data-bytes@0x7fb1069537a7 (length 13)
| vendor id hash md5 final bytes@0x7fb107e135b8 (length 16)
| vendor id  40 48 b7 d5  6e bc e8 85  25 e7 de 7f  00 d6 c2 d3
| selinux support is enabled.
| event_schedule called for 5696 seconds
| event_schedule_tv: new EVENT_LOG_DAILY-pe@0x7fb107e1bac8
| event_schedule_tv called for about 5696 seconds and change
| inserting event EVENT_LOG_DAILY, timeout in 5696.000000 seconds
systemd watchdog for ipsec service configured with timeout of 200000000 usecs
watchdog: sending probes every 100 secs
| pluto_sd: executing action action: start(2), status 0
| event_schedule called for 100 seconds
| event_schedule_tv: new EVENT_SD_WATCHDOG-pe@0x7fb107e1bc58
| event_schedule_tv called for about 100 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 100.000000 seconds
| created addconn helper (pid:2404) using fork+execve
seccomp security not supported
| Setting up events, loop start
| pluto_sd: executing action action: reloading(4), status 0
listening for IKE messages
| Inspecting interface lo 
| found lo with address 127.0.0.1
| Inspecting interface eth0 
| found eth0 with address 192.0.2.254
| Inspecting interface eth1 
| found eth1 with address 192.1.2.23
| Inspecting interface eth2 
| found eth2 with address 192.9.2.23
adding interface eth2/eth2 192.9.2.23:500
| NAT-Traversal: Trying sockopt style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for sockopt style NAT-T family IPv4
adding interface eth2/eth2 192.9.2.23:4500
adding interface eth1/eth1 192.1.2.23:500
| NAT-Traversal: Trying sockopt style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for sockopt style NAT-T family IPv4
adding interface eth1/eth1 192.1.2.23:4500
adding interface eth0/eth0 192.0.2.254:500
| NAT-Traversal: Trying sockopt style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for sockopt style NAT-T family IPv4
adding interface eth0/eth0 192.0.2.254:4500
adding interface lo/lo 127.0.0.1:500
| NAT-Traversal: Trying sockopt style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for sockopt style NAT-T family IPv4
adding interface lo/lo 127.0.0.1:4500
| setup callback for interface lo:4500 fd 24
| setup callback for interface lo:500 fd 23
| setup callback for interface eth0:4500 fd 22
| setup callback for interface eth0:500 fd 21
| setup callback for interface eth1:4500 fd 20
| setup callback for interface eth1:500 fd 19
| setup callback for interface eth2:4500 fd 18
| setup callback for interface eth2:500 fd 17
| certs and keys locked by 'free_preshared_secrets'
| certs and keys unlocked by 'free_preshard_secrets'
loading secrets from "/etc/ipsec.secrets"
| saving Modulus
| saving PublicExponent
| ignoring PrivateExponent
| ignoring Prime1
| ignoring Prime2
| ignoring Exponent1
| ignoring Exponent2
| ignoring Coefficient
| ignoring CKAIDNSS
| computed rsa CKAID  61 55 99 73  d3 ac ef 7d  3a 37 0e 3e  82 ad 92 c1
| computed rsa CKAID  8a 82 25 f1
loaded private key for keyid: PPK_RSA:AQO9bJbr3
| certs and keys locked by 'process_secret'
| certs and keys unlocked by 'process_secret'
| pluto_sd: executing action action: ready(5), status 0
| k did NOT match
| n did NOT match
| e did NOT match
| extracting the RSA private key for east
| certs and keys locked by 'lsw_add_rsa_secret'
| certs and keys unlocked by 'lsw_add_rsa_secret'
| Added new connection san with policy RSASIG+ENCRYPT+TUNNEL+PFS+IKEV2_ALLOW+IKEV2_PROPOSE+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO
| counting wild cards for west@testing.libreswan.org is 0
| no email 'NOTeast@testing.libreswan.org' for cert, using ASN1 subjectName
| setting ID to ID_DER_ASN1_DN: 'E=user-east@testing.libreswan.org,CN=east.testing.libreswan.org,OU=Test Department,O=Libreswan,L=Toronto,ST=Ontario,C=CA'
| loaded right certificate 'east'
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7fb107e1d738
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7fb107e34948
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7fb107e25bb8
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7fb107e25c08
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7fb107e1f518
| unreference key: 0x7fb107e04678 C=CA, ST=Ontario, L=Toronto, O=Libreswan, OU=Test Department, CN=east.testing.libreswan.org, E=user-east@testing.libreswan.org cnt 1--
| counting wild cards for C=CA, ST=Ontario, L=Toronto, O=Libreswan, OU=Test Department, CN=east.testing.libreswan.org, E=user-east@testing.libreswan.org is 0
| connect_to_host_pair: 192.1.2.23:500 192.1.2.45:500 -> hp:none
added connection description "san"
| 192.1.2.23<192.1.2.23>[C=CA, ST=Ontario, L=Toronto, O=Libreswan, OU=Test Department, CN=east.testing.libreswan.org, E=user-east@testing.libreswan.org]...192.1.2.45<192.1.2.45>[west@testing.libreswan.org]
| ike_life: 3600s; ipsec_life: 28800s; rekey_margin: 540s; rekey_fuzz: 100%; keyingtries: 0; replay_window: 32; policy: RSASIG+ENCRYPT+TUNNEL+PFS+IKEV2_ALLOW+IKEV2_PROPOSE+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO
| pluto_sd: executing action action: reloading(4), status 0
listening for IKE messages
| Inspecting interface lo 
| found lo with address 127.0.0.1
| Inspecting interface eth0 
| found eth0 with address 192.0.2.254
| Inspecting interface eth1 
| found eth1 with address 192.1.2.23
| Inspecting interface eth2 
| found eth2 with address 192.9.2.23
| refresh. setup callback for interface lo:4500 24
| setup callback for interface lo:4500 fd 24
| refresh. setup callback for interface lo:500 23
| setup callback for interface lo:500 fd 23
| refresh. setup callback for interface eth0:4500 22
| setup callback for interface eth0:4500 fd 22
| refresh. setup callback for interface eth0:500 21
| setup callback for interface eth0:500 fd 21
| refresh. setup callback for interface eth1:4500 20
| setup callback for interface eth1:4500 fd 20
| refresh. setup callback for interface eth1:500 19
| setup callback for interface eth1:500 fd 19
| refresh. setup callback for interface eth2:4500 18
| setup callback for interface eth2:4500 fd 18
| refresh. setup callback for interface eth2:500 17
| setup callback for interface eth2:500 fd 17
| certs and keys locked by 'free_preshared_secrets'
forgetting secrets
| certs and keys unlocked by 'free_preshard_secrets'
loading secrets from "/etc/ipsec.secrets"
| saving Modulus
| saving PublicExponent
| ignoring PrivateExponent
| ignoring Prime1
| ignoring Prime2
| ignoring Exponent1
| ignoring Exponent2
| ignoring Coefficient
| ignoring CKAIDNSS
| computed rsa CKAID  61 55 99 73  d3 ac ef 7d  3a 37 0e 3e  82 ad 92 c1
| computed rsa CKAID  8a 82 25 f1
loaded private key for keyid: PPK_RSA:AQO9bJbr3
| certs and keys locked by 'process_secret'
| certs and keys unlocked by 'process_secret'
| pluto_sd: executing action action: ready(5), status 0
| reaped addconn helper child
| *received 748 bytes from 192.1.2.45:500 on eth1 (port=500)
|   30 b1 73 cf  41 fb bd 01  00 00 00 00  00 00 00 00
|   21 20 22 08  00 00 00 00  00 00 02 ec  22 00 01 64
|   02 00 00 54  01 01 00 09  03 00 00 0c  01 00 00 14
|   80 0e 01 00  03 00 00 08  02 00 00 07  03 00 00 08
|   02 00 00 05  03 00 00 08  02 00 00 02  03 00 00 08
|   03 00 00 00  03 00 00 08  04 00 00 0e  03 00 00 08
|   04 00 00 0f  03 00 00 08  04 00 00 10  00 00 00 08
|   04 00 00 12  02 00 00 54  02 01 00 09  03 00 00 0c
|   01 00 00 14  80 0e 00 80  03 00 00 08  02 00 00 07
|   03 00 00 08  02 00 00 05  03 00 00 08  02 00 00 02
|   03 00 00 08  03 00 00 00  03 00 00 08  04 00 00 0e
|   03 00 00 08  04 00 00 0f  03 00 00 08  04 00 00 10
|   00 00 00 08  04 00 00 12  02 00 00 5c  03 01 00 0a
|   03 00 00 0c  01 00 00 0c  80 0e 01 00  03 00 00 08
|   02 00 00 07  03 00 00 08  02 00 00 05  03 00 00 08
|   02 00 00 02  03 00 00 08  03 00 00 0e  03 00 00 08
|   03 00 00 0c  03 00 00 08  03 00 00 02  03 00 00 08
|   04 00 00 0e  03 00 00 08  04 00 00 0f  00 00 00 08
|   04 00 00 05  00 00 00 5c  04 01 00 0a  03 00 00 0c
|   01 00 00 0c  80 0e 00 80  03 00 00 08  02 00 00 07
|   03 00 00 08  02 00 00 05  03 00 00 08  02 00 00 02
|   03 00 00 08  03 00 00 0e  03 00 00 08  03 00 00 0c
|   03 00 00 08  03 00 00 02  03 00 00 08  04 00 00 0e
|   03 00 00 08  04 00 00 0f  00 00 00 08  04 00 00 05
|   28 00 01 08  00 0e 00 00  6c 63 c7 50  06 e2 08 fb
|   60 b6 61 a9  56 e6 e2 15  de 75 93 6c  a7 ec 64 7d
|   69 37 86 63  35 7b 4a 1c  71 c0 ef 2a  a8 79 1b c9
|   63 de 42 e6  57 ac fc de  17 8e 89 0d  61 27 72 50
|   2a 43 cf 4d  4c 8c 5a 61  c9 4e 2e ef  0e 2b 38 40
|   bf 05 10 de  f0 2d c0 f4  05 c3 2f d8  fa 99 41 67
|   54 54 a3 62  f2 dd 15 73  84 5a 65 74  75 ca b1 1f
|   86 d8 13 1d  7f 81 c7 5d  62 95 d8 28  5a 49 43 fa
|   b7 15 cf b8  ae 80 f3 fa  b4 f0 35 d3  d2 45 17 e8
|   b0 9b ed 2c  48 71 5d 47  ec 30 4a c5  cd 6f 62 b0
|   66 52 1e dc  26 0b 19 56  de de 0c cb  f7 92 f0 f5
|   44 2e f3 af  f5 8e d9 a2  d8 96 79 df  e8 e2 31 b8
|   8d c4 7c 48  0f f5 ff 62  ab b6 51 c8  63 a6 ae 96
|   eb 6d 9f c3  56 f9 ab 20  6b aa f9 03  a1 7d 6c 3b
|   e1 71 3d d7  1d 53 8e 36  7f b6 8d db  59 22 82 4c
|   94 74 33 d1  3b ce b3 fa  98 d6 92 91  7b fe 4e 69
|   06 1f 6c f0  20 6b 12 2c  29 00 00 24  f7 b6 c2 13
|   ae 61 b3 f6  89 0d 9e 7e  1c b0 34 b4  69 e6 75 09
|   3f 9f b6 e0  0d ee e8 20  b6 56 cf e2  29 00 00 08
|   00 00 40 2e  29 00 00 1c  00 00 40 04  68 93 60 07
|   9a f9 5e b2  3d 80 fa a4  8f 66 81 88  ab 15 e9 e2
|   00 00 00 1c  00 00 40 05  c4 1e 83 3c  84 39 d6 85
|   2a 7e bb 98  0a 2a 1e 5b  a7 76 e7 e4
| **parse ISAKMP Message:
|    initiator cookie:
|   30 b1 73 cf  41 fb bd 01
|    responder cookie:
|   00 00 00 00  00 00 00 00
|    next payload type: ISAKMP_NEXT_v2SA (0x21)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_SA_INIT (0x22)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 00
|    length: 748 (0x2ec)
|  processing version=2.0 packet with exchange type=ISAKMP_v2_SA_INIT (34)
| I am receiving an IKEv2 Request ISAKMP_v2_SA_INIT
| I am the IKE SA Original Responder
| finding hash chain in icookie hash table
|   ICOOKIE:  30 b1 73 cf  41 fb bd 01
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 3
| parent_init v2 state object not found
| from_state is STATE_UNDEFINED
| Unpacking clear payload for svm: Respond to IKE_SA_INIT
| Now let's proceed with payload (ISAKMP_NEXT_v2SA)
| ***parse IKEv2 Security Association Payload:
|    next payload type: ISAKMP_NEXT_v2KE (0x22)
|    flags: none (0x0)
|    length: 356 (0x164)
| processing payload: ISAKMP_NEXT_v2SA (len=356)
| Now let's proceed with payload (ISAKMP_NEXT_v2KE)
| ***parse IKEv2 Key Exchange Payload:
|    IKEv2 next payload type: ISAKMP_NEXT_v2Ni (0x28)
|    flags: none (0x0)
|    length: 264 (0x108)
|    DH group: OAKLEY_GROUP_MODP2048 (0xe)
| processing payload: ISAKMP_NEXT_v2KE (len=264)
| Now let's proceed with payload (ISAKMP_NEXT_v2Ni)
| ***parse IKEv2 Nonce Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    length: 36 (0x24)
| processing payload: ISAKMP_NEXT_v2Ni (len=36)
| Now let's proceed with payload (ISAKMP_NEXT_v2N)
| ***parse IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    length: 8 (0x8)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_IKEV2_FRAGMENTATION_SUPPORTED (0x402e)
| processing payload: ISAKMP_NEXT_v2N (len=8)
| Now let's proceed with payload (ISAKMP_NEXT_v2N)
| ***parse IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    length: 28 (0x1c)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_NAT_DETECTION_SOURCE_IP (0x4004)
| processing payload: ISAKMP_NEXT_v2N (len=28)
| Now let's proceed with payload (ISAKMP_NEXT_v2N)
| ***parse IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    length: 28 (0x1c)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_NAT_DETECTION_DESTINATION_IP (0x4005)
| processing payload: ISAKMP_NEXT_v2N (len=28)
| selected state microcode Respond to IKE_SA_INIT
| Now lets proceed with state specific processing
| calling processor Respond to IKE_SA_INIT
| anti-DDoS cookies not required (and no cookie received)
| find_host_connection me=192.1.2.23:500 him=192.1.2.45:500 policy=RSASIG+IKEV2_ALLOW
| find_host_pair: comparing 192.1.2.23:500 to 192.1.2.45:500
| find_next_host_connection policy=RSASIG+IKEV2_ALLOW
| found policy = RSASIG+ENCRYPT+TUNNEL+PFS+IKEV2_ALLOW+IKEV2_PROPOSE+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO (san)
| find_next_host_connection returns san
| found connection: san with policy RSASIG+IKEV2_ALLOW
| find_host_pair: comparing 192.1.2.23:500 to 192.1.2.45:500
| no Vendor ID's received - skipped check for VID_OPPORTUNISTIC
| no VIDs received
| selecting default IKE proposals for initial responder
packet from 192.1.2.45:500: san IKE proposals for initial responder: 1:IKE:ENCR=AES_GCM_C_256;PRF=HMAC_SHA2_512,HMAC_SHA2_256,HMAC_SHA1;INTEG=NONE;DH=MODP2048,MODP3072,MODP4096,MODP8192 2:IKE:ENCR=AES_GCM_C_128;PRF=HMAC_SHA2_512,HMAC_SHA2_256,HMAC_SHA1;INTEG=NONE;DH=MODP2048,MODP3072,MODP4096,MODP8192 3:IKE:ENCR=AES_CBC_256;PRF=HMAC_SHA2_512,HMAC_SHA2_256,HMAC_SHA1;INTEG=HMAC_SHA2_512_256,HMAC_SHA2_256_128,HMAC_SHA1_96;DH=MODP2048,MODP3072,MODP1536 4:IKE:ENCR=AES_CBC_128;PRF=HMAC_SHA2_512,HMAC_SHA2_256,HMAC_SHA1;INTEG=HMAC_SHA2_512_256,HMAC_SHA2_256_128,HMAC_SHA1_96;DH=MODP2048,MODP3072,MODP1536 (default)
| Comparing remote proposals against IKE responder 4 local proposals
| ****parse IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    length: 84 (0x54)
|    prop #: 1 (0x1)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 9 (0x9)
| Comparing remote proposal 1 containing 9 transforms against local proposal [1..4] of 4 local proposals
| local proposal 1 type ENCR has 1 transforms
| local proposal 1 type PRF has 3 transforms
| local proposal 1 type INTEG has 1 transforms
| local proposal 1 type DH has 4 transforms
| local proposal 1 type ESN has 0 transforms
| local proposal 1 transforms: required: ENCR+PRF+DH; optional: INTEG
| local proposal 2 type ENCR has 1 transforms
| local proposal 2 type PRF has 3 transforms
| local proposal 2 type INTEG has 1 transforms
| local proposal 2 type DH has 4 transforms
| local proposal 2 type ESN has 0 transforms
| local proposal 2 transforms: required: ENCR+PRF+DH; optional: INTEG
| local proposal 3 type ENCR has 1 transforms
| local proposal 3 type PRF has 3 transforms
| local proposal 3 type INTEG has 3 transforms
| local proposal 3 type DH has 3 transforms
| local proposal 3 type ESN has 0 transforms
| local proposal 3 transforms: required: ENCR+PRF+INTEG+DH; optional: none
| local proposal 4 type ENCR has 1 transforms
| local proposal 4 type PRF has 3 transforms
| local proposal 4 type INTEG has 3 transforms
| local proposal 4 type DH has 3 transforms
| local proposal 4 type ESN has 0 transforms
| local proposal 4 transforms: required: ENCR+PRF+INTEG+DH; optional: none
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 12 (0xc)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_GCM_C (0x14)
| ******parse IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| remote proposal 1 transform 0 (ENCR=AES_GCM_C_256) matches local proposal 1 type 1 (ENCR) transform 0
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| remote proposal 1 transform 1 (PRF=HMAC_SHA2_512) matches local proposal 1 type 2 (PRF) transform 0
| remote proposal 1 transform 1 (PRF=HMAC_SHA2_512) matches local proposal 2 type 2 (PRF) transform 0
| remote proposal 1 transform 1 (PRF=HMAC_SHA2_512) matches local proposal 3 type 2 (PRF) transform 0
| remote proposal 1 transform 1 (PRF=HMAC_SHA2_512) matches local proposal 4 type 2 (PRF) transform 0
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_256 (0x5)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA1 (0x2)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_NONE (0x0)
| remote proposal 1 transform 4 (INTEG=NONE) matches local proposal 1 type 3 (INTEG) transform 0
| remote proposal 1 transform 4 (INTEG=NONE) matches local proposal 2 type 3 (INTEG) transform 0
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| remote proposal 1 transform 5 (DH=MODP2048) matches local proposal 1 type 4 (DH) transform 0
| remote proposal 1 transform 5 (DH=MODP2048) matches local proposal 2 type 4 (DH) transform 0
| remote proposal 1 transform 5 (DH=MODP2048) matches local proposal 3 type 4 (DH) transform 0
| remote proposal 1 transform 5 (DH=MODP2048) matches local proposal 4 type 4 (DH) transform 0
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP3072 (0xf)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP4096 (0x10)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP8192 (0x12)
| remote proposal 1 proposed transforms: ENCR+PRF+INTEG+DH; matched: ENCR+PRF+INTEG+DH; unmatched: none
| comparing remote proposal 1 and local proposal 1 transforms: required: ENCR+PRF+DH; optional: INTEG; proposed: ENCR+PRF+INTEG+DH; matched: ENCR+PRF+INTEG+DH
| remote proposal 1 matches local proposal 1
| ****parse IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    length: 84 (0x54)
|    prop #: 2 (0x2)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 9 (0x9)
| Comparing remote proposal 2 containing 9 transforms against local proposal [1..0] of 4 local proposals
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 12 (0xc)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_GCM_C (0x14)
| ******parse IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_256 (0x5)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA1 (0x2)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_NONE (0x0)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP3072 (0xf)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP4096 (0x10)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP8192 (0x12)
| remote proposal 2 proposed transforms: ENCR+PRF+INTEG+DH; matched: none; unmatched: ENCR+PRF+INTEG+DH
| remote proposal 2 does not match; unmatched remote transforms: ENCR+PRF+INTEG+DH
| ****parse IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    length: 92 (0x5c)
|    prop #: 3 (0x3)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 10 (0xa)
| Comparing remote proposal 3 containing 10 transforms against local proposal [1..0] of 4 local proposals
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 12 (0xc)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_CBC (0xc)
| ******parse IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_256 (0x5)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA1 (0x2)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_512_256 (0xe)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_256_128 (0xc)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA1_96 (0x2)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP3072 (0xf)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP1536 (0x5)
| remote proposal 3 proposed transforms: ENCR+PRF+INTEG+DH; matched: none; unmatched: ENCR+PRF+INTEG+DH
| remote proposal 3 does not match; unmatched remote transforms: ENCR+PRF+INTEG+DH
| ****parse IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_LAST (0x0)
|    length: 92 (0x5c)
|    prop #: 4 (0x4)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 10 (0xa)
| Comparing remote proposal 4 containing 10 transforms against local proposal [1..0] of 4 local proposals
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 12 (0xc)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_CBC (0xc)
| ******parse IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_256 (0x5)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA1 (0x2)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_512_256 (0xe)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_256_128 (0xc)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA1_96 (0x2)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP3072 (0xf)
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP1536 (0x5)
| remote proposal 4 proposed transforms: ENCR+PRF+INTEG+DH; matched: none; unmatched: ENCR+PRF+INTEG+DH
| remote proposal 4 does not match; unmatched remote transforms: ENCR+PRF+INTEG+DH
packet from 192.1.2.45:500: proposal 1:IKE:ENCR=AES_GCM_C_256;PRF=HMAC_SHA2_512;INTEG=NONE;DH=MODP2048 chosen from: 1:IKE:ENCR=AES_GCM_C_256;PRF=HMAC_SHA2_512;PRF=HMAC_SHA2_256;PRF=HMAC_SHA1;INTEG=NONE;DH=MODP2048;DH=MODP3072;DH=MODP4096;DH=MODP8192[first-match] 2:IKE:ENCR=AES_GCM_C_128;PRF=HMAC_SHA2_512;PRF=HMAC_SHA2_256;PRF=HMAC_SHA1;INTEG=NONE;DH=MODP2048;DH=MODP3072;DH=MODP4096;DH=MODP8192 3:IKE:ENCR=AES_CBC_256;PRF=HMAC_SHA2_512;PRF=HMAC_SHA2_256;PRF=HMAC_SHA1;INTEG=HMAC_SHA2_512_256;INTEG=HMAC_SHA2_256_128;INTEG=HMAC_SHA1_96;DH=MODP2048;DH=MODP3072;DH=MODP1536 4:IKE:ENCR=AES_CBC_128;PRF=HMAC_SHA2_512;PRF=HMAC_SHA2_256;PRF=HMAC_SHA1;INTEG=HMAC_SHA2_512_256;INTEG=HMAC_SHA2_256_128;INTEG=HMAC_SHA1_96;DH=MODP2048;DH=MODP3072;DH=MODP1536
| accepted IKE proposal ikev2_proposal: 1:IKE:ENCR=AES_GCM_C_256;PRF=HMAC_SHA2_512;INTEG=NONE;DH=MODP2048
| converting proposal to internal trans attrs
| encryption ike_alg_lookup_by_id id: AES_GCM_C=20, found aes_gcm_16 
| PRF ike_alg_lookup_by_id id: HMAC_SHA2_512=7, found sha2_512 
| ignoring NULL integrity
| DH public value received:
|   6c 63 c7 50  06 e2 08 fb  60 b6 61 a9  56 e6 e2 15
|   de 75 93 6c  a7 ec 64 7d  69 37 86 63  35 7b 4a 1c
|   71 c0 ef 2a  a8 79 1b c9  63 de 42 e6  57 ac fc de
|   17 8e 89 0d  61 27 72 50  2a 43 cf 4d  4c 8c 5a 61
|   c9 4e 2e ef  0e 2b 38 40  bf 05 10 de  f0 2d c0 f4
|   05 c3 2f d8  fa 99 41 67  54 54 a3 62  f2 dd 15 73
|   84 5a 65 74  75 ca b1 1f  86 d8 13 1d  7f 81 c7 5d
|   62 95 d8 28  5a 49 43 fa  b7 15 cf b8  ae 80 f3 fa
|   b4 f0 35 d3  d2 45 17 e8  b0 9b ed 2c  48 71 5d 47
|   ec 30 4a c5  cd 6f 62 b0  66 52 1e dc  26 0b 19 56
|   de de 0c cb  f7 92 f0 f5  44 2e f3 af  f5 8e d9 a2
|   d8 96 79 df  e8 e2 31 b8  8d c4 7c 48  0f f5 ff 62
|   ab b6 51 c8  63 a6 ae 96  eb 6d 9f c3  56 f9 ab 20
|   6b aa f9 03  a1 7d 6c 3b  e1 71 3d d7  1d 53 8e 36
|   7f b6 8d db  59 22 82 4c  94 74 33 d1  3b ce b3 fa
|   98 d6 92 91  7b fe 4e 69  06 1f 6c f0  20 6b 12 2c
| creating state object #1 at 0x7fb107e28dd8
| parent state #1: new => STATE_UNDEFINED(ignore)
| cookie hash sha2_256 init
| cookie sha2_256 hasher: context 0x7fb107e08dc0
| cookie hash sha2_256 digest addr-bytes@0x7ffc1076b320 (length 4)
| cookie hash sha2_256 digest sod-bytes@0x7fb106baa520 (length 20)
| cookie hash sha2_256 digest counter-bytes@0x7fb106b91cd4 (length 4)
| cookie hash sha2_256 final bytes@0x7ffc1076b330 (length 32)
| cookie  2c 8f 04 1f  b8 a9 98 af  1c c1 c0 4f  11 29 0c f0
| cookie  ac 7a 09 dd  f5 35 6a b0  9f 5a f8 d1  76 46 33 f2
| processing connection "san"
| inserting state object #1
| finding hash chain in state hash table
|   ICOOKIE:  30 b1 73 cf  41 fb bd 01
|   RCOOKIE:  2c 8f 04 1f  b8 a9 98 af
| found hash chain 9
| list 0x7fb106b8b6b0 first entry (nil)
| inserted state 0x7fb107e28dd8 entry 0x7fb107e29458 next (nil) prev-next 0x7fb106b8b6b0 into list
| updated next entry is (nil)
| finding hash chain in icookie hash table
|   ICOOKIE:  30 b1 73 cf  41 fb bd 01
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 3
| list 0x7fb106b8b560 first entry (nil)
| inserted state 0x7fb107e28dd8 entry 0x7fb107e29470 next (nil) prev-next 0x7fb106b8b560 into list
| updated next entry is (nil)
| event_schedule called for 0 seconds
| event_schedule_tv: new EVENT_SO_DISCARD-pe@0x7fb107e1f518
| event_schedule_tv called for about 0 seconds and change
| inserting event EVENT_SO_DISCARD, timeout in 0.000000 seconds for #1
| processing connection "san"
| parent state #1: STATE_UNDEFINED(ignore) => STATE_PARENT_R1(half-open-ike)
| ignore states: 0
| half-open-ike states: 1
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| natd_hash: Warning, rcookie is zero !!
| NATD hash sha init
| NATD sha hasher: context 0x7fb107e08dc0
| NATD hash sha digest ICOOKIE-bytes@0x7fb107e29260 (length 8)
| NATD hash sha digest RCOOKIE-bytes@0x7fb106b992b8 (length 8)
| NATD hash sha digest SIN_ADDR-bytes@0x7fb107e1ce48 (length 4)
| NATD hash sha digest PORT-bytes@0x7ffc1076b26e (length 2)
| NATD hash sha final bytes@0x7ffc1076b310 (length 20)
| NATD  c4 1e 83 3c  84 39 d6 85  2a 7e bb 98  0a 2a 1e 5b
| NATD  a7 76 e7 e4
| natd_hash: hasher=0x7fb106b85420(20)
| natd_hash: icookie=  30 b1 73 cf  41 fb bd 01
| natd_hash: rcookie=  00 00 00 00  00 00 00 00
| natd_hash: ip=  c0 01 02 17
| natd_hash: port=500
| natd_hash: hash=  c4 1e 83 3c  84 39 d6 85  2a 7e bb 98  0a 2a 1e 5b
| natd_hash: hash=  a7 76 e7 e4
| natd_hash: Warning, rcookie is zero !!
| NATD hash sha init
| NATD sha hasher: context 0x7fb107e08dc0
| NATD hash sha digest ICOOKIE-bytes@0x7fb107e29260 (length 8)
| NATD hash sha digest RCOOKIE-bytes@0x7fb106b992b8 (length 8)
| NATD hash sha digest SIN_ADDR-bytes@0x7fb107e278cc (length 4)
| NATD hash sha digest PORT-bytes@0x7ffc1076b26e (length 2)
| NATD hash sha final bytes@0x7ffc1076b330 (length 20)
| NATD  68 93 60 07  9a f9 5e b2  3d 80 fa a4  8f 66 81 88
| NATD  ab 15 e9 e2
| natd_hash: hasher=0x7fb106b85420(20)
| natd_hash: icookie=  30 b1 73 cf  41 fb bd 01
| natd_hash: rcookie=  00 00 00 00  00 00 00 00
| natd_hash: ip=  c0 01 02 2d
| natd_hash: port=500
| natd_hash: hash=  68 93 60 07  9a f9 5e b2  3d 80 fa a4  8f 66 81 88
| natd_hash: hash=  ab 15 e9 e2
| NAT_TRAVERSAL encaps using auto-detect
| NAT_TRAVERSAL nat_keepalive enabled 192.1.2.45
| crypto helper 0: pcw_work: 0
| asking crypto helper 0 to do build KE and nonce; request ID 1 (len=2816, pcw_work=0)
| crypto helper 0 read fd: 12
| crypto helper 0 doing build KE and nonce; request ID 1
| NSS: Value of Prime:
|   ff ff ff ff  ff ff ff ff  c9 0f da a2  21 68 c2 34
|   c4 c6 62 8b  80 dc 1c d1  29 02 4e 08  8a 67 cc 74
|   02 0b be a6  3b 13 9b 22  51 4a 08 79  8e 34 04 dd
|   ef 95 19 b3  cd 3a 43 1b  30 2b 0a 6d  f2 5f 14 37
|   4f e1 35 6d  6d 51 c2 45  e4 85 b5 76  62 5e 7e c6
|   f4 4c 42 e9  a6 37 ed 6b  0b ff 5c b6  f4 06 b7 ed
|   ee 38 6b fb  5a 89 9f a5  ae 9f 24 11  7c 4b 1f e6
|   49 28 66 51  ec e4 5b 3d  c2 00 7c b8  a1 63 bf 05
|   98 da 48 36  1c 55 d3 9a  69 16 3f a8  fd 24 cf 5f
|   83 65 5d 23  dc a3 ad 96  1c 62 f3 56  20 85 52 bb
|   9e d5 29 07  70 96 96 6d  67 0c 35 4e  4a bc 98 04
|   f1 74 6c 08  ca 18 21 7c  32 90 5e 46  2e 36 ce 3b
|   e3 9e 77 2c  18 0e 86 03  9b 27 83 a2  ec 07 a2 8f
|   b5 c5 5d f0  6f 4c 52 c9  de 2b cb f6  95 58 17 18
|   39 95 49 7c  ea 95 6a e5  15 d2 26 18  98 fa 05 10
|   15 72 8e 5a  8a ac aa 68  ff ff ff ff  ff ff ff ff
| NSS: Value of base:  02
| NSS: Local DH MODP2048 public value (pointer): 0x7fb107e220b0
| NSS: Local DH MODP2048 secret (pointer): 0x7fb0f8001850
| NSS: Public DH wire value:
|   9c d2 00 50  29 99 c2 fa  11 ec 48 2c  41 64 39 e8
|   b1 8e 7a 44  8e a3 cf cd  21 de 1f d7  1e 05 65 bd
|   7f 3e e8 02  dc 14 e2 2c  ce ba 35 d1  fd d8 84 86
|   8a e8 a3 3c  0f 0d d3 72  81 83 d3 6d  78 a4 2e 7b
|   d7 8d f4 9a  92 73 7c ed  78 b0 15 2c  96 4f f3 94
|   83 88 d0 cd  f8 36 5d b1  39 6e 00 48  20 2d 74 cd
|   0c ff e2 68  83 49 3c 4a  d2 34 1b fe  95 ba 9c 21
|   43 3d 84 62  f1 75 69 d8  e3 6c a1 07  3e 7b 40 d4
|   6a c9 b8 d2  89 d1 fa 5b  a1 5b 5b 6f  57 63 65 63
|   db d3 2b bf  23 f2 82 d6  68 88 c6 14  c7 ef 88 78
|   97 d0 05 2b  88 f6 5e 70  8b 75 e1 5a  ff 99 6b 72
|   17 b1 03 3c  94 95 db 46  dd f7 15 86  02 b1 71 d1
|   23 b2 f8 ae  89 f9 84 66  92 ec c2 1b  c0 0d 6b 60
|   a5 e1 10 a2  f8 b5 fd c5  07 a9 dc d4  91 b3 bd 55
|   af 7e 6c 8f  8b 3c f1 03  b4 89 c6 7b  4b c6 71 32
|   9d 51 b2 d0  13 8e 8a 20  51 77 cb c9  9e b7 6d 25
| Generated nonce:  87 1a e2 ec  b9 40 1c 2f  29 ba 0b 84  94 4b 3c b5
| Generated nonce:  24 7a 7f 19  fc 6a da c3  ea 27 02 97  83 4a af 2e
| crypto helper 0 finished build KE and nonce; request ID 1 time elapsed 2552 usec
| #1 send_crypto_helper_request:642 st->st_calculating = TRUE;
| state #1 requesting EVENT_SO_DISCARD to be deleted
| delete_pluto_event: release EVENT_SO_DISCARD-pe@0x7fb107e1f518
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_CRYPTO_FAILED-pe@0x7fb107e1f518
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_CRYPTO_FAILED, timeout in 60.000000 seconds for #1
| complete v2 state transition with STF_SUSPEND
| crypto helper 0 has finished work (pcw_work now 1)
| crypto helper 0 replies to request ID 1
| calling continuation function 0x7fb1068a623e
| ikev2_parent_inI1outR1_continue for #1: calculated ke+nonce, sending R1
| processing connection "san"
| #1 ikev2_parent_inI1outR1_continue:1319 st->st_calculating = FALSE;
| **emit ISAKMP Message:
|    initiator cookie:
|   30 b1 73 cf  41 fb bd 01
|    responder cookie:
|   2c 8f 04 1f  b8 a9 98 af
|    next payload type: ISAKMP_NEXT_v2SA (0x21)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_SA_INIT (0x22)
|    flags: ISAKMP_FLAG_v2_MSG_RESPONSE (0x20)
|    message ID:  00 00 00 00
| Emitting ikev2_proposal ...
| ***emit IKEv2 Security Association Payload:
|    next payload type: ISAKMP_NEXT_v2KE (0x22)
|    flags: none (0x0)
| ****emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_LAST (0x0)
|    prop #: 1 (0x1)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 4 (0x4)
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_GCM_C (0x14)
| ******emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_NONE (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 44
| emitting length of IKEv2 Security Association Payload: 48
| wire (crypto helper) group MODP2048 and state group MODP2048 match
| saving DH priv (local secret) and pub key into state struct
| ***emit IKEv2 Key Exchange Payload:
|    IKEv2 next payload type: ISAKMP_NEXT_v2Ni (0x28)
|    flags: none (0x0)
|    DH group: OAKLEY_GROUP_MODP2048 (0xe)
| emitting 256 raw bytes of ikev2 g^x into IKEv2 Key Exchange Payload
| ikev2 g^x  9c d2 00 50  29 99 c2 fa  11 ec 48 2c  41 64 39 e8
| ikev2 g^x  b1 8e 7a 44  8e a3 cf cd  21 de 1f d7  1e 05 65 bd
| ikev2 g^x  7f 3e e8 02  dc 14 e2 2c  ce ba 35 d1  fd d8 84 86
| ikev2 g^x  8a e8 a3 3c  0f 0d d3 72  81 83 d3 6d  78 a4 2e 7b
| ikev2 g^x  d7 8d f4 9a  92 73 7c ed  78 b0 15 2c  96 4f f3 94
| ikev2 g^x  83 88 d0 cd  f8 36 5d b1  39 6e 00 48  20 2d 74 cd
| ikev2 g^x  0c ff e2 68  83 49 3c 4a  d2 34 1b fe  95 ba 9c 21
| ikev2 g^x  43 3d 84 62  f1 75 69 d8  e3 6c a1 07  3e 7b 40 d4
| ikev2 g^x  6a c9 b8 d2  89 d1 fa 5b  a1 5b 5b 6f  57 63 65 63
| ikev2 g^x  db d3 2b bf  23 f2 82 d6  68 88 c6 14  c7 ef 88 78
| ikev2 g^x  97 d0 05 2b  88 f6 5e 70  8b 75 e1 5a  ff 99 6b 72
| ikev2 g^x  17 b1 03 3c  94 95 db 46  dd f7 15 86  02 b1 71 d1
| ikev2 g^x  23 b2 f8 ae  89 f9 84 66  92 ec c2 1b  c0 0d 6b 60
| ikev2 g^x  a5 e1 10 a2  f8 b5 fd c5  07 a9 dc d4  91 b3 bd 55
| ikev2 g^x  af 7e 6c 8f  8b 3c f1 03  b4 89 c6 7b  4b c6 71 32
| ikev2 g^x  9d 51 b2 d0  13 8e 8a 20  51 77 cb c9  9e b7 6d 25
| emitting length of IKEv2 Key Exchange Payload: 264
| ***emit IKEv2 Nonce Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
| emitting 32 raw bytes of IKEv2 nonce into IKEv2 Nonce Payload
| IKEv2 nonce  87 1a e2 ec  b9 40 1c 2f  29 ba 0b 84  94 4b 3c b5
| IKEv2 nonce  24 7a 7f 19  fc 6a da c3  ea 27 02 97  83 4a af 2e
| emitting length of IKEv2 Nonce Payload: 36
| Adding a v2N Payload
| ***emit IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_IKEV2_FRAGMENTATION_SUPPORTED (0x402e)
| emitting 0 raw bytes of Notify data into IKEv2 Notify Payload
| Notify data
| emitting length of IKEv2 Notify Payload: 8
|  NAT-Traversal support  [enabled] add v2N payloads.
| NATD hash sha init
| NATD sha hasher: context 0x7fb107e08dc0
| NATD hash sha digest ICOOKIE-bytes@0x7fb107e29260 (length 8)
| NATD hash sha digest RCOOKIE-bytes@0x7fb107e29288 (length 8)
| NATD hash sha digest SIN_ADDR-bytes@0x7fb107e290f4 (length 4)
| NATD hash sha digest PORT-bytes@0x7ffc1076aaae (length 2)
| NATD hash sha final bytes@0x7ffc1076ab10 (length 20)
| NATD  77 16 d6 9f  ed 43 6f 19  2c f1 0c 0d  9c ed 2b cf
| NATD  07 ec f6 b1
| natd_hash: hasher=0x7fb106b85420(20)
| natd_hash: icookie=  30 b1 73 cf  41 fb bd 01
| natd_hash: rcookie=  2c 8f 04 1f  b8 a9 98 af
| natd_hash: ip=  c0 01 02 17
| natd_hash: port=500
| natd_hash: hash=  77 16 d6 9f  ed 43 6f 19  2c f1 0c 0d  9c ed 2b cf
| natd_hash: hash=  07 ec f6 b1
| Adding a v2N Payload
| ***emit IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_NAT_DETECTION_SOURCE_IP (0x4004)
| emitting 20 raw bytes of Notify data into IKEv2 Notify Payload
| Notify data  77 16 d6 9f  ed 43 6f 19  2c f1 0c 0d  9c ed 2b cf
| Notify data  07 ec f6 b1
| emitting length of IKEv2 Notify Payload: 28
| NATD hash sha init
| NATD sha hasher: context 0x7fb107e08dc0
| NATD hash sha digest ICOOKIE-bytes@0x7fb107e29260 (length 8)
| NATD hash sha digest RCOOKIE-bytes@0x7fb107e29288 (length 8)
| NATD hash sha digest SIN_ADDR-bytes@0x7fb107e290cc (length 4)
| NATD hash sha digest PORT-bytes@0x7ffc1076aaae (length 2)
| NATD hash sha final bytes@0x7ffc1076ab10 (length 20)
| NATD  cd 94 63 65  ed 36 d1 67  0e cd 80 df  a7 d2 b3 19
| NATD  03 b0 83 bb
| natd_hash: hasher=0x7fb106b85420(20)
| natd_hash: icookie=  30 b1 73 cf  41 fb bd 01
| natd_hash: rcookie=  2c 8f 04 1f  b8 a9 98 af
| natd_hash: ip=  c0 01 02 2d
| natd_hash: port=500
| natd_hash: hash=  cd 94 63 65  ed 36 d1 67  0e cd 80 df  a7 d2 b3 19
| natd_hash: hash=  03 b0 83 bb
| Adding a v2N Payload
| ***emit IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2CERTREQ (0x26)
|    flags: none (0x0)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_NAT_DETECTION_DESTINATION_IP (0x4005)
| emitting 20 raw bytes of Notify data into IKEv2 Notify Payload
| Notify data  cd 94 63 65  ed 36 d1 67  0e cd 80 df  a7 d2 b3 19
| Notify data  03 b0 83 bb
| emitting length of IKEv2 Notify Payload: 28
| going to send a certreq
| connection->kind is CK_PERMANENT so send CERTREQ
| ***emit IKEv2 Certificate Request Payload:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    ikev2 cert encoding: CERT_X509_SIGNATURE (0x4)
| emitting length of IKEv2 Certificate Request Payload: 5
| no IKE message padding required for IKEv2
| emitting length of ISAKMP Message: 445
| #1 complete v2 state transition from STATE_PARENT_R1 with STF_OK
| transition from state STATE_IKEv2_BASE to state STATE_PARENT_R1
| parent state #1: STATE_PARENT_R1(half-open-ike) => STATE_PARENT_R1(half-open-ike)
| ignore states: 0
| half-open-ike states: 1
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| message ID #1 STATE_PARENT_R1 san pst #1 st_msgid_nextuse(before=0) 0 st_msgid_lastack 4294967295 st_msgid_lastrecv 0
"san" #1: STATE_PARENT_R1: received v2I1, sent v2R1 {auth=IKEv2 cipher=aes_gcm_16_256 integ=n/a prf=sha2_512 group=MODP2048}
| sending V2 new request packet to 192.1.2.45:500 (from port 500)
| sending 445 bytes for STATE_IKEv2_BASE through eth1:500 to 192.1.2.45:500 (using #1)
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   21 20 22 20  00 00 00 00  00 00 01 bd  22 00 00 30
|   00 00 00 2c  01 01 00 04  03 00 00 0c  01 00 00 14
|   80 0e 01 00  03 00 00 08  02 00 00 07  03 00 00 08
|   03 00 00 00  00 00 00 08  04 00 00 0e  28 00 01 08
|   00 0e 00 00  9c d2 00 50  29 99 c2 fa  11 ec 48 2c
|   41 64 39 e8  b1 8e 7a 44  8e a3 cf cd  21 de 1f d7
|   1e 05 65 bd  7f 3e e8 02  dc 14 e2 2c  ce ba 35 d1
|   fd d8 84 86  8a e8 a3 3c  0f 0d d3 72  81 83 d3 6d
|   78 a4 2e 7b  d7 8d f4 9a  92 73 7c ed  78 b0 15 2c
|   96 4f f3 94  83 88 d0 cd  f8 36 5d b1  39 6e 00 48
|   20 2d 74 cd  0c ff e2 68  83 49 3c 4a  d2 34 1b fe
|   95 ba 9c 21  43 3d 84 62  f1 75 69 d8  e3 6c a1 07
|   3e 7b 40 d4  6a c9 b8 d2  89 d1 fa 5b  a1 5b 5b 6f
|   57 63 65 63  db d3 2b bf  23 f2 82 d6  68 88 c6 14
|   c7 ef 88 78  97 d0 05 2b  88 f6 5e 70  8b 75 e1 5a
|   ff 99 6b 72  17 b1 03 3c  94 95 db 46  dd f7 15 86
|   02 b1 71 d1  23 b2 f8 ae  89 f9 84 66  92 ec c2 1b
|   c0 0d 6b 60  a5 e1 10 a2  f8 b5 fd c5  07 a9 dc d4
|   91 b3 bd 55  af 7e 6c 8f  8b 3c f1 03  b4 89 c6 7b
|   4b c6 71 32  9d 51 b2 d0  13 8e 8a 20  51 77 cb c9
|   9e b7 6d 25  29 00 00 24  87 1a e2 ec  b9 40 1c 2f
|   29 ba 0b 84  94 4b 3c b5  24 7a 7f 19  fc 6a da c3
|   ea 27 02 97  83 4a af 2e  29 00 00 08  00 00 40 2e
|   29 00 00 1c  00 00 40 04  77 16 d6 9f  ed 43 6f 19
|   2c f1 0c 0d  9c ed 2b cf  07 ec f6 b1  26 00 00 1c
|   00 00 40 05  cd 94 63 65  ed 36 d1 67  0e cd 80 df
|   a7 d2 b3 19  03 b0 83 bb  00 00 00 05  04
| state #1 requesting EVENT_CRYPTO_FAILED to be deleted
| delete_pluto_event: release EVENT_CRYPTO_FAILED-pe@0x7fb107e1f518
| event_schedule called for 200 seconds
| event_schedule_tv: new EVENT_v2_RESPONDER_TIMEOUT-pe@0x7fb107e1f518
| event_schedule_tv called for about 200 seconds and change
| inserting event EVENT_v2_RESPONDER_TIMEOUT, timeout in 200.000000 seconds for #1
| *received 539 bytes from 192.1.2.45:500 on eth1 (port=500)
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   35 20 23 08  00 00 00 01  00 00 02 1b  23 00 01 ff
|   00 01 00 04  bb f1 7a ad  57 c9 86 3a  fc 03 ae 63
|   d3 b4 90 b9  32 fe d2 6b  5e 10 1d f1  e0 7f 6b 65
|   2a 5d 46 64  94 48 e1 ea  63 2b 35 d0  ec d7 91 80
|   15 a8 a8 1f  b8 61 f4 64  12 43 54 32  ab 21 3a c4
|   70 8f 6a 0b  e0 61 bf fb  b4 23 c4 cc  a6 89 94 fe
|   a9 07 c2 f4  3c 48 0a ce  49 80 ef 2f  29 ed 4e b8
|   a4 f0 d4 5c  49 e8 ec 4f  b1 c9 9d 60  8f d8 0a 7f
|   1e e7 8f b2  f4 2e 3b 9a  1a da 12 d0  42 ea 8b 57
|   d4 d0 73 33  56 af 07 66  1b ff 5f fb  e8 2b f3 26
|   5e 80 a6 dc  a6 a2 42 b5  7e 3f c3 6a  98 c9 f5 3e
|   26 68 9c 5f  db 3a 77 e1  32 2a 16 05  8e f0 57 04
|   69 5e 57 7b  34 b3 d2 f1  b2 16 ac 4e  19 48 25 8b
|   c1 74 d5 62  ee e3 ad d1  01 a6 1a fa  63 c1 a5 c8
|   d2 69 b8 65  8c 05 37 f7  cb dc 6e b4  47 c2 45 a7
|   17 85 88 42  14 c7 e3 e2  bf ca 88 91  80 b1 ba 58
|   56 50 97 39  f7 94 75 e4  a1 d8 9f e2  18 21 26 56
|   d2 01 95 8d  ab 2c 47 77  f7 36 07 d3  72 03 a9 c5
|   3d 7c 19 52  ea cb f0 0a  42 2e 3b 10  5b 84 06 7a
|   ce 5c 9e 9a  ed 2b 2a 34  e0 8d 1a 80  c0 6e 11 5f
|   40 41 ad f2  f8 16 6e b2  3f 6b e8 c0  20 92 17 65
|   0d 37 2b 78  67 bf a1 88  fb e8 db 3c  3b 24 fc b0
|   22 14 f7 6c  a4 b2 a7 c6  29 bb 95 35  3b bb a9 d7
|   88 77 4d a2  0f e1 a7 cb  96 0a 1b 9a  e9 62 30 ef
|   53 13 d4 1c  4c 31 2e 30  8c a2 51 0b  56 75 b7 22
|   f3 18 99 83  e7 33 82 c3  13 af d7 0d  b9 e0 52 33
|   04 bc 82 62  e3 69 22 83  ca d5 17 68  31 ed 19 1d
|   ba ab 9e 8f  95 8d 56 94  cf 47 3c a9  19 a5 ae 99
|   47 8a 05 04  e0 c3 33 8b  ce c3 fe 89  31 0d 5b 7a
|   a5 f6 ce 00  4a 5f 88 07  42 f3 f1 3b  21 84 62 aa
|   c7 15 01 8b  f1 50 4d ba  b1 44 93 49  d5 c3 86 9e
|   62 e9 52 16  69 95 aa f1  3f e2 db 03  cf a0 01 f4
|   3c 80 c8 f3  9c 94 bb 43  ac 1e dc
| **parse ISAKMP Message:
|    initiator cookie:
|   30 b1 73 cf  41 fb bd 01
|    responder cookie:
|   2c 8f 04 1f  b8 a9 98 af
|    next payload type: ISAKMP_NEXT_v2SKF (0x35)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_AUTH (0x23)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 01
|    length: 539 (0x21b)
|  processing version=2.0 packet with exchange type=ISAKMP_v2_AUTH (35)
| I am receiving an IKEv2 Request ISAKMP_v2_AUTH
| I am the IKE SA Original Responder
| finding hash chain in state hash table
|   ICOOKIE:  30 b1 73 cf  41 fb bd 01
|   RCOOKIE:  2c 8f 04 1f  b8 a9 98 af
| found hash chain 9
| parent v2 peer and cookies match on #1
| v2 state object #1 found, in STATE_PARENT_R1
| found state #1
| from_state is STATE_PARENT_R1
| Unpacking clear payload for svm: respond to IKE_AUTH
| Now let's proceed with payload (ISAKMP_NEXT_v2SKF)
| ***parse IKEv2 Encrypted Fragment:
|    next payload type: ISAKMP_NEXT_v2IDi (0x23)
|    flags: none (0x0)
|    length: 511 (0x1ff)
|    fragment number: 1 (0x1)
|    total fragments: 4 (0x4)
| processing payload: ISAKMP_NEXT_v2SKF (len=511)
| received IKE encrypted fragment number '1', total number '4', next payload '35'
| *received 539 bytes from 192.1.2.45:500 on eth1 (port=500)
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   35 20 23 08  00 00 00 01  00 00 02 1b  00 00 01 ff
|   00 02 00 04  66 ff 13 36  15 5e ad 3c  26 a1 a5 35
|   5d 35 95 df  34 aa f9 54  fe 0a 30 81  22 7d 1e 0d
|   c8 8a f3 da  8e 7c cf 69  be aa df a2  16 fb e5 d0
|   bc 23 6a 64  d6 08 eb 96  12 1e c6 46  7e 1f d1 fd
|   19 ed 14 0a  77 d6 8a 69  48 60 0d 4a  17 50 8f 87
|   65 da 25 42  db 43 10 cd  1c 45 26 6f  76 07 ca 49
|   19 2a d1 64  88 4c 4c f9  da 0c 44 4b  06 9a 42 c2
|   49 51 7e cb  09 0a 82 fc  d4 66 96 eb  53 fa 3d fe
|   37 7e f7 fc  e5 da 1b f8  13 c9 fd fe  47 f1 05 07
|   75 72 5f fc  96 00 2e 72  a6 9b 40 8a  45 65 b7 23
|   44 b2 53 49  59 89 93 df  c0 c7 79 b4  f0 8a 61 2c
|   48 07 1b 55  5e 1d c7 1f  6e 01 d1 0a  52 be 05 11
|   5f 64 cd d3  c5 03 df 6b  47 e4 7b 66  c3 b8 70 6a
|   a5 cc 3a d5  e0 a4 5b ee  9f 15 5c d4  71 05 f4 79
|   b5 55 97 bc  f5 19 4f 94  52 a1 91 7d  95 5b 90 0f
|   98 90 86 6e  6f 43 ff 96  ca 19 38 95  d7 af f8 7d
|   e4 ba e9 06  6b ab b9 7a  8a 83 8d c3  77 57 1b 28
|   0b 39 4f ee  92 22 f2 84  50 d6 f2 c0  78 19 67 b2
|   71 af 5f f1  8d 68 70 65  92 dc a0 07  a8 1a d6 43
|   4f 1c 40 47  e4 94 e0 7c  3e 00 42 66  9f bf a6 f9
|   1a 84 d7 15  07 a9 55 1e  ab cf 14 18  6a 47 6f d9
|   86 a1 b1 b6  47 e5 da 88  9c b6 31 0b  54 0b 06 03
|   e4 a5 05 9e  94 14 c3 d1  7a e1 2a be  9f b5 0e 4e
|   9d 80 f7 61  ba 18 11 52  07 e0 23 83  5b b8 b9 1a
|   d1 6b cd a8  24 f3 e6 34  a9 ae 4e c2  c6 fe 00 ad
|   88 e5 9e 57  3f 66 2e b8  72 a6 0c 28  fd 4a 64 f0
|   ab 97 5c 11  c7 ee fd 7b  e2 02 a6 c0  10 d5 fa 15
|   a9 e3 c3 01  77 3f a7 af  fb 37 46 d2  a7 81 a9 eb
|   ce 69 8e 59  f9 c6 1d d2  61 73 7c 7b  8d 25 97 1b
|   8a b9 9b 78  53 5f dd 45  c0 2a 84 75  1c 24 63 14
|   d3 43 76 a6  3c 28 63 c8  f5 22 c7 a2  f5 ff 1b 6a
|   b3 5d 6e 1a  eb 59 ea 56  8f 6e 13
| **parse ISAKMP Message:
|    initiator cookie:
|   30 b1 73 cf  41 fb bd 01
|    responder cookie:
|   2c 8f 04 1f  b8 a9 98 af
|    next payload type: ISAKMP_NEXT_v2SKF (0x35)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_AUTH (0x23)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 01
|    length: 539 (0x21b)
|  processing version=2.0 packet with exchange type=ISAKMP_v2_AUTH (35)
| I am receiving an IKEv2 Request ISAKMP_v2_AUTH
| I am the IKE SA Original Responder
| finding hash chain in state hash table
|   ICOOKIE:  30 b1 73 cf  41 fb bd 01
|   RCOOKIE:  2c 8f 04 1f  b8 a9 98 af
| found hash chain 9
| parent v2 peer and cookies match on #1
| v2 state object #1 found, in STATE_PARENT_R1
| found state #1
| from_state is STATE_PARENT_R1
| Unpacking clear payload for svm: respond to IKE_AUTH
| Now let's proceed with payload (ISAKMP_NEXT_v2SKF)
| ***parse IKEv2 Encrypted Fragment:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    length: 511 (0x1ff)
|    fragment number: 2 (0x2)
|    total fragments: 4 (0x4)
| processing payload: ISAKMP_NEXT_v2SKF (len=511)
| received IKE encrypted fragment number '2', total number '4', next payload '0'
| *received 539 bytes from 192.1.2.45:500 on eth1 (port=500)
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   35 20 23 08  00 00 00 01  00 00 02 1b  00 00 01 ff
|   00 03 00 04  33 bf 78 66  60 6c 9d 32  59 98 17 66
|   16 e0 64 f6  58 ec a2 97  74 14 d8 4e  6d eb da 55
|   45 38 d3 69  7d 0b e8 dc  53 9e e0 93  97 5e aa 42
|   d4 02 01 01  1a fb d3 c1  78 c4 33 29  25 66 5a 8d
|   dd 2f 2c 70  da ca 8d 3d  fc 6b 10 5a  4c 6f a7 77
|   4a 4b 7c 80  c8 29 93 b1  10 d5 f8 b8  7e 18 e4 e6
|   77 d4 4b bf  44 1b 07 48  42 e8 32 a4  1f 03 01 b2
|   6e 69 4b a7  7e 14 32 bd  65 43 2e 66  70 d1 5a 51
|   1e 15 42 b0  09 be 94 b3  f6 22 31 b0  7a f9 25 23
|   5c 2f 7d 00  61 c9 d2 3b  a8 b4 ae 4a  68 61 52 76
|   04 22 55 3d  7e 44 a1 17  70 58 da 41  32 64 68 97
|   89 80 9b 70  8d 6c c9 35  b7 bc 7f 75  2e 91 36 3d
|   34 24 62 09  5e d6 7c f7  22 2f 46 0a  3d e6 d9 d8
|   40 b6 b4 2b  05 b6 58 9d  7d 4a ea ac  e9 56 f8 ad
|   80 fe 04 e5  99 e8 d1 80  d6 5d 19 f1  96 7c 20 61
|   e4 da 83 f1  0a 95 c4 a4  53 83 c2 66  01 80 fc 61
|   e8 3d 0f de  c0 c4 ee b3  0e 7e 62 39  75 7b 8a 01
|   65 2d 7c ae  ce 6b 44 1c  9d 91 7e f8  a3 9d 3b 53
|   0e 81 cf 5f  8c a3 33 44  7d a0 13 f6  af aa 6d 5c
|   aa bc ed ac  e6 91 12 c8  0d 5d a0 68  ba b9 00 82
|   98 77 82 66  26 f1 c0 20  96 01 4d 6a  25 8e 66 f3
|   36 67 b0 89  ea 0b c9 06  74 6b f8 bd  e2 61 4f b6
|   06 6e 30 13  dc 62 91 b0  66 d9 eb ba  11 4c aa 00
|   f5 18 11 fb  9a ff 19 81  47 df 10 fd  55 eb 5d 91
|   30 14 bc c0  47 0c 6e 6e  3a 6d 41 fd  5f 91 7c 11
|   55 16 ee 39  7d 5a 0b 9b  43 1c 90 c6  40 53 f5 b4
|   09 09 62 29  28 72 c1 33  d6 a6 93 44  b7 e0 44 b7
|   a0 81 5c c2  6d 43 70 ae  2f a2 5b a5  6b e7 c9 f5
|   c9 ff ce e2  74 7d 53 52  ac 0b f6 7f  15 41 5d 87
|   3b d4 4c 13  1e df b2 97  c0 4c c4 8a  85 88 5f f1
|   bc 2b 93 11  8f 08 7c 39  6d 64 61 27  c2 bc 70 e6
|   c6 b7 e2 5f  05 57 d6 5d  fc e4 d0
| **parse ISAKMP Message:
|    initiator cookie:
|   30 b1 73 cf  41 fb bd 01
|    responder cookie:
|   2c 8f 04 1f  b8 a9 98 af
|    next payload type: ISAKMP_NEXT_v2SKF (0x35)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_AUTH (0x23)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 01
|    length: 539 (0x21b)
|  processing version=2.0 packet with exchange type=ISAKMP_v2_AUTH (35)
| I am receiving an IKEv2 Request ISAKMP_v2_AUTH
| I am the IKE SA Original Responder
| finding hash chain in state hash table
|   ICOOKIE:  30 b1 73 cf  41 fb bd 01
|   RCOOKIE:  2c 8f 04 1f  b8 a9 98 af
| found hash chain 9
| parent v2 peer and cookies match on #1
| v2 state object #1 found, in STATE_PARENT_R1
| found state #1
| from_state is STATE_PARENT_R1
| Unpacking clear payload for svm: respond to IKE_AUTH
| Now let's proceed with payload (ISAKMP_NEXT_v2SKF)
| ***parse IKEv2 Encrypted Fragment:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    length: 511 (0x1ff)
|    fragment number: 3 (0x3)
|    total fragments: 4 (0x4)
| processing payload: ISAKMP_NEXT_v2SKF (len=511)
| received IKE encrypted fragment number '3', total number '4', next payload '0'
| *received 194 bytes from 192.1.2.45:500 on eth1 (port=500)
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   35 20 23 08  00 00 00 01  00 00 00 c2  00 00 00 a6
|   00 04 00 04  92 0d 50 03  24 0f d0 cf  70 ca 40 6c
|   9a 4f 24 f4  4c ce 32 c6  92 c2 53 74  cb cd 5a 77
|   ef 60 f2 2e  eb 05 1a 00  fa a1 6f a8  8f f9 30 e6
|   e8 07 42 de  0e 55 7b 09  15 31 b8 16  d0 3a a5 5a
|   29 3e 0a ad  c1 1f 9a 97  a7 86 a1 dc  c5 89 f0 0d
|   49 88 fe a8  cc 3c c2 15  b8 f1 e2 c8  dd ce 05 71
|   5c 86 56 5b  b7 2c de c2  98 d0 49 44  67 b5 fd 24
|   24 e3 da f9  e6 23 b2 ce  4f 56 0d d9  7a b7 be 48
|   6c 35 55 99  78 dc d4 0e  2b 70 83 48  16 de d0 7e
|   c6 b5 23 14  d7 11 0e 26  32 90 52 32  09 4e 39 75
|   1b b4
| **parse ISAKMP Message:
|    initiator cookie:
|   30 b1 73 cf  41 fb bd 01
|    responder cookie:
|   2c 8f 04 1f  b8 a9 98 af
|    next payload type: ISAKMP_NEXT_v2SKF (0x35)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_AUTH (0x23)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 01
|    length: 194 (0xc2)
|  processing version=2.0 packet with exchange type=ISAKMP_v2_AUTH (35)
| I am receiving an IKEv2 Request ISAKMP_v2_AUTH
| I am the IKE SA Original Responder
| finding hash chain in state hash table
|   ICOOKIE:  30 b1 73 cf  41 fb bd 01
|   RCOOKIE:  2c 8f 04 1f  b8 a9 98 af
| found hash chain 9
| parent v2 peer and cookies match on #1
| v2 state object #1 found, in STATE_PARENT_R1
| found state #1
| from_state is STATE_PARENT_R1
| Unpacking clear payload for svm: respond to IKE_AUTH
| Now let's proceed with payload (ISAKMP_NEXT_v2SKF)
| ***parse IKEv2 Encrypted Fragment:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    length: 166 (0xa6)
|    fragment number: 4 (0x4)
|    total fragments: 4 (0x4)
| processing payload: ISAKMP_NEXT_v2SKF (len=166)
| received IKE encrypted fragment number '4', total number '4', next payload '0'
|  updated IKE fragment state to respond using fragments without waiting for re-transmits
| selected state microcode respond to IKE_AUTH
| processing connection "san"
| processing connection "san"
| #1 state_busy:2535 st != NULL && st->st_calculating == FALSE;
| Now lets proceed with state specific processing
| calling processor respond to IKE_AUTH
| ikev2 parent inI2outR2: calculating g^{xy} in order to decrypt I2
| calculating skeyseed using prf=PRF_HMAC_SHA2_512 integ=AUTH_NONE cipherkey=AES_GCM_C
| start_dh_v2: reference skey_d_old-key@NULL
| Copying DH pub key pointer to be sent to a thread helper
| crypto helper 0: pcw_work: 0
| asking crypto helper 0 to do compute dh (V2); request ID 2 (len=2816, pcw_work=0)
| crypto helper 0 read fd: 12
| crypto helper 0 doing compute dh (V2); request ID 2
| peer's g:   6c 63 c7 50  06 e2 08 fb  60 b6 61 a9  56 e6 e2 15
| peer's g:   de 75 93 6c  a7 ec 64 7d  69 37 86 63  35 7b 4a 1c
| peer's g:   71 c0 ef 2a  a8 79 1b c9  63 de 42 e6  57 ac fc de
| peer's g:   17 8e 89 0d  61 27 72 50  2a 43 cf 4d  4c 8c 5a 61
| peer's g:   c9 4e 2e ef  0e 2b 38 40  bf 05 10 de  f0 2d c0 f4
| peer's g:   05 c3 2f d8  fa 99 41 67  54 54 a3 62  f2 dd 15 73
| peer's g:   84 5a 65 74  75 ca b1 1f  86 d8 13 1d  7f 81 c7 5d
| peer's g:   62 95 d8 28  5a 49 43 fa  b7 15 cf b8  ae 80 f3 fa
| peer's g:   b4 f0 35 d3  d2 45 17 e8  b0 9b ed 2c  48 71 5d 47
| peer's g:   ec 30 4a c5  cd 6f 62 b0  66 52 1e dc  26 0b 19 56
| peer's g:   de de 0c cb  f7 92 f0 f5  44 2e f3 af  f5 8e d9 a2
| peer's g:   d8 96 79 df  e8 e2 31 b8  8d c4 7c 48  0f f5 ff 62
| peer's g:   ab b6 51 c8  63 a6 ae 96  eb 6d 9f c3  56 f9 ab 20
| peer's g:   6b aa f9 03  a1 7d 6c 3b  e1 71 3d d7  1d 53 8e 36
| peer's g:   7f b6 8d db  59 22 82 4c  94 74 33 d1  3b ce b3 fa
| peer's g:   98 d6 92 91  7b fe 4e 69  06 1f 6c f0  20 6b 12 2c
| Started DH shared-secret computation in NSS:
| nss_modp_calc_g_ir: new g_ir-key@0x7fb107e0ccf0, size: 256 bytes, type/mechanism: CONCATENATE_DATA_AND_BASE (0x00000363)
| calc_dh_shared: g^ir-key@0x7fb107e0ccf0, size: 256 bytes, type/mechanism: CONCATENATE_DATA_AND_BASE (0x00000363)
| NSS: Started key computation
| calculating skeyseed using prf=sha2_512 integ=n/a cipherkey-size=32 salt-size=4
| ike sa SKEYSEED PRF sha2_512 init Ni|Nr-chunk@0x7fb0f8003768 (length 64)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb0f8003768 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   f7 b6 c2 13  ae 61 b3 f6  89 0d 9e 7e  1c b0 34 b4
|   69 e6 75 09  3f 9f b6 e0  0d ee e8 20  b6 56 cf e2
|   87 1a e2 ec  b9 40 1c 2f  29 ba 0b 84  94 4b 3c b5
|   24 7a 7f 19  fc 6a da c3  ea 27 02 97  83 4a af 2e
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb0f8004e50, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey Ni|Nr for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f8004e50, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f8004e50, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0e570, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| Ni|Nr: release tmp-key@0x7fb0f8004e50
| ike sa SKEYSEED prf: created sha2_512 context 0x7fb0f80067e0 from Ni|Nr-key@0x7fb107e0e570
| ike sa SKEYSEED prf: begin sha2_512 with context 0x7fb0f80067e0 from Ni|Nr-key@0x7fb107e0e570
| ike sa SKEYSEED: release clone-key@0x7fb107e0e570
| ike sa SKEYSEED PRF sha2_512 crypt-prf@0x7fb0f8006f18
| ike sa SKEYSEED PRF sha2_512 update g^ir-key@0x7fb107e0ccf0 (size 256)
| nss hmac digest hack extracting all 256 bytes of key@0x7fb107e0ccf0
| nss hmac digest hack: symkey-key@0x7fb107e0ccf0, size: 256 bytes, type/mechanism: CONCATENATE_DATA_AND_BASE (0x00000363)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 256 bytes, type/mechanism: CONCATENATE_DATA_AND_BASE (0x00000363)
| sizeof bytes 256
| wrapper:  a2 74 d1 10  83 d6 cc e5  69 8c c3 35  e6 ea bc ff
| wrapper:  87 b3 12 10  88 ef bb ce  e8 3a 98 11  48 96 7f 5a
| wrapper:  d4 e9 02 26  a4 60 0a da  ea d5 58 24  54 5b 6d 34
| wrapper:  bf 77 d4 12  5d a1 88 90  2e 84 54 a7  34 99 7a 1b
| wrapper:  be 53 79 89  e6 bf 40 d2  c7 fa e5 a4  c5 1f 69 ba
| wrapper:  0b 28 4a 9c  6b f5 8e d5  fe 99 d7 1d  9f 6d 40 9f
| wrapper:  d1 33 e9 43  5f 8c 15 18  b2 ed f8 78  e3 de 39 91
| wrapper:  46 dd 52 84  6f 3b d8 4b  91 de 1c 04  f6 5a 38 bc
| wrapper:  ef 33 a2 98  83 f2 c2 dd  52 83 53 fc  e5 48 0a cf
| wrapper:  08 7a 92 a6  86 f9 b9 77  b5 d6 7c f7  38 21 9a a9
| wrapper:  7e ff bd 7d  b2 99 9d bb  8d 7e e1 de  8a e2 c7 82
| wrapper:  12 9a 66 6a  0a 9f 3f fa  f0 18 6b 54  d1 0b b4 ee
| wrapper:  87 df 28 fe  a8 09 31 a5  77 6a 6b e5  83 8c a7 08
| wrapper:  6c 4f e5 1b  d8 86 7a 66  a7 f2 72 d3  fc 3b fb 10
| wrapper:  ea ec 50 3f  e9 24 70 91  51 b8 70 5d  5e a2 28 b7
| wrapper:  41 cd a3 ec  92 68 fa a2  4a dd a9 98  cf 98 52 a6
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 256 bytes at 0x7fb0f80075c8
| unwrapped:  47 cc 53 4f  d7 02 2d 71  9b 9a 62 71  7e 6d 32 60
| unwrapped:  83 04 b7 5d  cf f5 1e 87  34 c8 05 a6  7c 30 b2 80
| unwrapped:  09 19 b8 13  77 bf d8 b4  12 4c 23 2a  c2 81 2b 29
| unwrapped:  5e 79 f2 bf  04 1b 4c aa  1f 4f 2d af  22 d6 16 4e
| unwrapped:  d1 18 26 ed  5e db 66 bd  b8 a3 34 a6  bd 15 3f 61
| unwrapped:  a4 f3 97 d6  03 96 34 e7  87 91 70 a1  22 69 db 4a
| unwrapped:  45 05 5b 39  5c 46 10 98  c4 ac 75 49  f1 bc 25 8c
| unwrapped:  d1 c6 52 30  32 94 4a 68  9a f0 c0 fb  1c cc 25 6f
| unwrapped:  50 7b 2f 06  94 3d 48 d7  61 78 1a f0  3e 29 7d 41
| unwrapped:  3f 27 3e d7  1a 68 a7 9e  21 33 e4 96  80 3d da 38
| unwrapped:  e7 c6 d5 d9  02 84 2c 29  d1 7d b6 63  5b ef 7c 17
| unwrapped:  91 07 93 a0  44 6b c4 40  57 d5 19 a6  80 6e da 24
| unwrapped:  f9 21 ba 28  75 f2 45 2a  74 23 e8 b9  b1 62 f0 33
| unwrapped:  4b a0 6b 57  26 1d 6e 17  20 ed 18 1a  9c 40 ce 8f
| unwrapped:  8b 60 a0 72  a1 25 8a b9  ba ae 43 22  17 c4 23 f6
| unwrapped:  6d 88 7e 70  47 2f fd 38  b0 24 9a a6  60 1f bc 43
| ike sa SKEYSEED PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb0f8003768 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   6f c9 5e 4b  0e ab 89 3f  00 c1 3d ea  e1 9c d9 a1
|   b8 53 de ac  53 6a 44 c9  69 32 88 1e  72 d9 be 46
|   22 96 67 99  b7 73 c2 c8  4f 03 59 f9  15 d8 02 cc
|   84 1d 6b 35  cc 77 0b 01  2a 3d e2 ce  2e 8a 84 8b
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb0f8004e50, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f8004e50, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f8004e50, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0e570, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7fb0f8004e50
| ike sa SKEYSEED PRF sha2_512 final-key@0x7fb107e0e570 (size 64)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb0feb71670 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   f7 b6 c2 13  ae 61 b3 f6  89 0d 9e 7e  1c b0 34 b4
|   69 e6 75 09  3f 9f b6 e0  0d ee e8 20  b6 56 cf e2
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb0f80066d0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey data for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80066d0, key-offset: 0, key-size: 32, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80066d0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8004e50, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| data: release tmp-key@0x7fb0f80066d0
| CONCATENATE_BASE_AND_DATA: base-key@0x7fb0f8004e50, data-bytes@0x7fb0feb71690 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_DATA: base-key@0x7fb0f8004e50, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_DATA: data
|   87 1a e2 ec  b9 40 1c 2f  29 ba 0b 84  94 4b 3c b5
|   24 7a 7f 19  fc 6a da c3  ea 27 02 97  83 4a af 2e
| CONCATENATE_BASE_AND_DATA: new result-key@0x7fb0f80066d0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_bytes: release lhs-key@0x7fb0f8004e50
| CONCATENATE_BASE_AND_DATA: base-key@0x7fb0f80066d0, data-bytes@0x7fb0feb718b0 (8 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_DATA: base-key@0x7fb0f80066d0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_DATA: data
|   30 b1 73 cf  41 fb bd 01
| CONCATENATE_BASE_AND_DATA: new result-key@0x7fb0f8004e50, size: 72 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_bytes: release lhs-key@0x7fb0f80066d0
| CONCATENATE_BASE_AND_DATA: base-key@0x7fb0f8004e50, data-bytes@0x7fb0feb718b8 (8 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_DATA: base-key@0x7fb0f8004e50, size: 72 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_DATA: data
|   2c 8f 04 1f  b8 a9 98 af
| CONCATENATE_BASE_AND_DATA: new result-key@0x7fb0f80066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_bytes: release lhs-key@0x7fb0f8004e50
| prf+0 PRF sha2_512 init key-key@0x7fb107e0e570 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+0 prf: created sha2_512 context 0x7fb0f8006c30 from key-key@0x7fb0f8004e50
| prf+0 prf: begin sha2_512 with context 0x7fb0f8006c30 from key-key@0x7fb0f8004e50
| prf+0: release clone-key@0x7fb0f8004e50
| prf+0 PRF sha2_512 crypt-prf@0x7fb0f8000e88
| prf+0 PRF sha2_512 update seed-key@0x7fb0f80066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7fb0f80066d0
| nss hmac digest hack: symkey-key@0x7fb0f80066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  28 60 2f fe  24 a3 77 f4  d5 e1 4b fa  17 56 ca 3d
| wrapper:  97 3f 87 56  db 4a 06 f8  68 63 67 e7  e8 86 50 e2
| wrapper:  07 de c5 a5  6c 78 d5 63  1e 5c b6 fa  c9 c1 09 87
| wrapper:  75 9d fe c0  2c 5f 3d 64  65 a7 d6 40  6b ca a5 dc
| wrapper:  37 30 66 f8  c4 eb 80 d0  c6 f5 b0 f3  81 fc eb a2
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 80 bytes at 0x7fb0f800a358
| unwrapped:  f7 b6 c2 13  ae 61 b3 f6  89 0d 9e 7e  1c b0 34 b4
| unwrapped:  69 e6 75 09  3f 9f b6 e0  0d ee e8 20  b6 56 cf e2
| unwrapped:  87 1a e2 ec  b9 40 1c 2f  29 ba 0b 84  94 4b 3c b5
| unwrapped:  24 7a 7f 19  fc 6a da c3  ea 27 02 97  83 4a af 2e
| unwrapped:  30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
| prf+0 PRF sha2_512 update 1++-byte@0x1 (1)
| prf+0 PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb0f800a3d8 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   b5 9f 80 36  1d 4f 5c 2f  89 ca c5 c3  98 31 59 85
|   be 30 ca 60  09 6b 3b 8c  f2 ab bc 77  28 f4 c9 87
|   a3 a0 d4 24  02 eb ea 2f  52 06 dd 65  dc 9a 4d 0a
|   c1 74 e3 c1  a1 02 98 ab  94 31 db 15  8e 2f 67 ca
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb0f8006ca0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f8006ca0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f8006ca0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7fb0f8006ca0
| prf+0 PRF sha2_512 final-key@0x7fb0f8004e50 (size 64)
| ikev2_prfplus: reference old_t[1]-key@0x7fb0f8004e50
| prf+N PRF sha2_512 init key-key@0x7fb107e0e570 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+N prf: created sha2_512 context 0x7fb0f800a3b0 from key-key@0x7fb0f8006ca0
| prf+N prf: begin sha2_512 with context 0x7fb0f800a3b0 from key-key@0x7fb0f8006ca0
| prf+N: release clone-key@0x7fb0f8006ca0
| prf+N PRF sha2_512 crypt-prf@0x7fb0f8003768
| prf+N PRF sha2_512 update old_t-key@0x7fb0f8004e50 (size 64)
| nss hmac digest hack extracting all 64 bytes of key@0x7fb0f8004e50
| nss hmac digest hack: symkey-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  9c a3 e8 dd  ec d0 ab 79  f9 95 b4 d8  ea d7 55 72
| wrapper:  76 29 82 b5  8b b1 85 95  d5 f6 82 dd  63 0a 67 a3
| wrapper:  e4 91 19 ac  11 b5 91 f4  ed e4 24 66  ca 96 b5 e2
| wrapper:  c4 0d ab 5e  77 6d 0c 3c  fb b4 9f 25  08 64 9e a9
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 64 bytes at 0x7fb0f80068e8
| unwrapped:  b5 9f 80 36  1d 4f 5c 2f  89 ca c5 c3  98 31 59 85
| unwrapped:  be 30 ca 60  09 6b 3b 8c  f2 ab bc 77  28 f4 c9 87
| unwrapped:  a3 a0 d4 24  02 eb ea 2f  52 06 dd 65  dc 9a 4d 0a
| unwrapped:  c1 74 e3 c1  a1 02 98 ab  94 31 db 15  8e 2f 67 ca
| prf+N PRF sha2_512 update seed-key@0x7fb0f80066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7fb0f80066d0
| nss hmac digest hack: symkey-key@0x7fb0f80066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  28 60 2f fe  24 a3 77 f4  d5 e1 4b fa  17 56 ca 3d
| wrapper:  97 3f 87 56  db 4a 06 f8  68 63 67 e7  e8 86 50 e2
| wrapper:  07 de c5 a5  6c 78 d5 63  1e 5c b6 fa  c9 c1 09 87
| wrapper:  75 9d fe c0  2c 5f 3d 64  65 a7 d6 40  6b ca a5 dc
| wrapper:  37 30 66 f8  c4 eb 80 d0  c6 f5 b0 f3  81 fc eb a2
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 80 bytes at 0x7fb0f80068e8
| unwrapped:  f7 b6 c2 13  ae 61 b3 f6  89 0d 9e 7e  1c b0 34 b4
| unwrapped:  69 e6 75 09  3f 9f b6 e0  0d ee e8 20  b6 56 cf e2
| unwrapped:  87 1a e2 ec  b9 40 1c 2f  29 ba 0b 84  94 4b 3c b5
| unwrapped:  24 7a 7f 19  fc 6a da c3  ea 27 02 97  83 4a af 2e
| unwrapped:  30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
| prf+N PRF sha2_512 update N++-byte@0x2 (2)
| prf+N PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb0f8006c58 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   f0 37 f3 18  24 ab 96 16  6a 18 49 48  e0 b6 6f 70
|   75 68 65 40  73 c5 e7 cf  54 90 c4 c8  53 16 22 9a
|   7c af bc 01  4f 70 b4 c3  54 12 0a c0  fb 01 6c 44
|   12 4f a5 cd  91 37 4c 4f  bf 7b 89 71  50 97 c7 7b
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb0f80068c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80068c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80068c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7fb0f80068c0
| prf+N PRF sha2_512 final-key@0x7fb0f8006ca0 (size 64)
| CONCATENATE_BASE_AND_KEY: base-key@0x7fb0f8004e50, key@0x7fb0f8006ca0 -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_KEY: base-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: key-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: new result-key@0x7fb0f80068c0, size: 128 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_symkey: release lhs-key@0x7fb0f8004e50
| ikev2_prfplus: release old_t[N]-key@0x7fb0f8004e50
| prf+N PRF sha2_512 init key-key@0x7fb107e0e570 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+N prf: created sha2_512 context 0x7fb0f8006c30 from key-key@0x7fb0f8004e50
| prf+N prf: begin sha2_512 with context 0x7fb0f8006c30 from key-key@0x7fb0f8004e50
| prf+N: release clone-key@0x7fb0f8004e50
| prf+N PRF sha2_512 crypt-prf@0x7fb0f8003768
| prf+N PRF sha2_512 update old_t-key@0x7fb0f8006ca0 (size 64)
| nss hmac digest hack extracting all 64 bytes of key@0x7fb0f8006ca0
| nss hmac digest hack: symkey-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  10 bc b3 26  7b d3 f6 fa  2d 9b 64 8a  da 27 c7 c7
| wrapper:  fa ef 5d d6  49 3e 1c 34  28 16 01 d5  0e b6 2c 13
| wrapper:  36 e5 68 da  ef 32 1a 81  0c 52 b7 b3  4e b2 73 7d
| wrapper:  0b df 55 3a  fe 45 a7 31  d5 25 34 d7  7c 97 f5 2b
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 64 bytes at 0x7fb0f80089e8
| unwrapped:  f0 37 f3 18  24 ab 96 16  6a 18 49 48  e0 b6 6f 70
| unwrapped:  75 68 65 40  73 c5 e7 cf  54 90 c4 c8  53 16 22 9a
| unwrapped:  7c af bc 01  4f 70 b4 c3  54 12 0a c0  fb 01 6c 44
| unwrapped:  12 4f a5 cd  91 37 4c 4f  bf 7b 89 71  50 97 c7 7b
| prf+N PRF sha2_512 update seed-key@0x7fb0f80066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7fb0f80066d0
| nss hmac digest hack: symkey-key@0x7fb0f80066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  28 60 2f fe  24 a3 77 f4  d5 e1 4b fa  17 56 ca 3d
| wrapper:  97 3f 87 56  db 4a 06 f8  68 63 67 e7  e8 86 50 e2
| wrapper:  07 de c5 a5  6c 78 d5 63  1e 5c b6 fa  c9 c1 09 87
| wrapper:  75 9d fe c0  2c 5f 3d 64  65 a7 d6 40  6b ca a5 dc
| wrapper:  37 30 66 f8  c4 eb 80 d0  c6 f5 b0 f3  81 fc eb a2
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 80 bytes at 0x7fb0f80089e8
| unwrapped:  f7 b6 c2 13  ae 61 b3 f6  89 0d 9e 7e  1c b0 34 b4
| unwrapped:  69 e6 75 09  3f 9f b6 e0  0d ee e8 20  b6 56 cf e2
| unwrapped:  87 1a e2 ec  b9 40 1c 2f  29 ba 0b 84  94 4b 3c b5
| unwrapped:  24 7a 7f 19  fc 6a da c3  ea 27 02 97  83 4a af 2e
| unwrapped:  30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
| prf+N PRF sha2_512 update N++-byte@0x3 (3)
| prf+N PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb0f800a3d8 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   30 bf 24 f1  89 60 c0 fe  00 f7 bc 57  99 f5 17 2c
|   ec 8b f3 96  d5 6b ee 50  e3 10 61 a9  5d b6 59 d2
|   05 34 c5 b4  e8 15 71 67  eb 3e 5d 40  91 4c ba f1
|   15 81 53 7d  7b 16 f5 14  03 ce cc 79  84 81 64 46
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb0f80089c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7fb0f80089c0
| prf+N PRF sha2_512 final-key@0x7fb0f8004e50 (size 64)
| CONCATENATE_BASE_AND_KEY: base-key@0x7fb0f80068c0, key@0x7fb0f8004e50 -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_KEY: base-key@0x7fb0f80068c0, size: 128 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: key-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: new result-key@0x7fb0f80089c0, size: 192 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_symkey: release lhs-key@0x7fb0f80068c0
| ikev2_prfplus: release old_t[N]-key@0x7fb0f8006ca0
| prf+N PRF sha2_512 init key-key@0x7fb107e0e570 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+N prf: created sha2_512 context 0x7fb0f800a3b0 from key-key@0x7fb0f8006ca0
| prf+N prf: begin sha2_512 with context 0x7fb0f800a3b0 from key-key@0x7fb0f8006ca0
| prf+N: release clone-key@0x7fb0f8006ca0
| prf+N PRF sha2_512 crypt-prf@0x7fb0f8003768
| prf+N PRF sha2_512 update old_t-key@0x7fb0f8004e50 (size 64)
| nss hmac digest hack extracting all 64 bytes of key@0x7fb0f8004e50
| nss hmac digest hack: symkey-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  80 fe 47 ef  ee d6 6f f4  77 26 50 cf  2c 83 3b f3
| wrapper:  44 2e 88 29  d5 22 18 16  ab b5 81 6a  de 4d 99 d9
| wrapper:  46 53 c4 46  fb 89 d6 66  87 35 1e 3b  37 5e 45 76
| wrapper:  f3 52 96 bb  3f 6d d8 8d  6f 9b e3 e7  15 2c b0 54
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 64 bytes at 0x7fb0f800a778
| unwrapped:  30 bf 24 f1  89 60 c0 fe  00 f7 bc 57  99 f5 17 2c
| unwrapped:  ec 8b f3 96  d5 6b ee 50  e3 10 61 a9  5d b6 59 d2
| unwrapped:  05 34 c5 b4  e8 15 71 67  eb 3e 5d 40  91 4c ba f1
| unwrapped:  15 81 53 7d  7b 16 f5 14  03 ce cc 79  84 81 64 46
| prf+N PRF sha2_512 update seed-key@0x7fb0f80066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7fb0f80066d0
| nss hmac digest hack: symkey-key@0x7fb0f80066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  28 60 2f fe  24 a3 77 f4  d5 e1 4b fa  17 56 ca 3d
| wrapper:  97 3f 87 56  db 4a 06 f8  68 63 67 e7  e8 86 50 e2
| wrapper:  07 de c5 a5  6c 78 d5 63  1e 5c b6 fa  c9 c1 09 87
| wrapper:  75 9d fe c0  2c 5f 3d 64  65 a7 d6 40  6b ca a5 dc
| wrapper:  37 30 66 f8  c4 eb 80 d0  c6 f5 b0 f3  81 fc eb a2
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 80 bytes at 0x7fb0f8008b98
| unwrapped:  f7 b6 c2 13  ae 61 b3 f6  89 0d 9e 7e  1c b0 34 b4
| unwrapped:  69 e6 75 09  3f 9f b6 e0  0d ee e8 20  b6 56 cf e2
| unwrapped:  87 1a e2 ec  b9 40 1c 2f  29 ba 0b 84  94 4b 3c b5
| unwrapped:  24 7a 7f 19  fc 6a da c3  ea 27 02 97  83 4a af 2e
| unwrapped:  30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
| prf+N PRF sha2_512 update N++-byte@0x4 (4)
| prf+N PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb0f8006c58 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   78 d6 17 c2  0e fe 52 e1  d5 77 f8 c5  1b ce a1 04
|   9a b1 7c 54  fb a6 4a 32  e7 d9 5a e7  65 17 07 11
|   c2 cb 96 02  9d e1 58 ec  26 18 a1 13  7d 67 4f 69
|   f9 2f da 47  c4 44 a8 9c  54 b1 49 ad  7d e4 39 b6
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb0f80068c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80068c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80068c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7fb0f80068c0
| prf+N PRF sha2_512 final-key@0x7fb0f8006ca0 (size 64)
| CONCATENATE_BASE_AND_KEY: base-key@0x7fb0f80089c0, key@0x7fb0f8006ca0 -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_KEY: base-key@0x7fb0f80089c0, size: 192 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: key-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: new result-key@0x7fb0f80068c0, size: 256 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_symkey: release lhs-key@0x7fb0f80089c0
| ikev2_prfplus: release old_t[N]-key@0x7fb0f8004e50
| prf+N PRF sha2_512 init key-key@0x7fb107e0e570 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7fb107e0e570, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb107e0e570, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+N prf: created sha2_512 context 0x7fb0f8006c30 from key-key@0x7fb0f8004e50
| prf+N prf: begin sha2_512 with context 0x7fb0f8006c30 from key-key@0x7fb0f8004e50
| prf+N: release clone-key@0x7fb0f8004e50
| prf+N PRF sha2_512 crypt-prf@0x7fb0f8003768
| prf+N PRF sha2_512 update old_t-key@0x7fb0f8006ca0 (size 64)
| nss hmac digest hack extracting all 64 bytes of key@0x7fb0f8006ca0
| nss hmac digest hack: symkey-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  64 bb 69 d0  ce cd 53 fb  37 da 68 ab  c5 4c 7b 3b
| wrapper:  18 ca 02 70  f8 6d f9 a7  8c b4 c0 13  c2 57 68 7e
| wrapper:  5a 7a e6 81  9f 37 46 df  d5 a2 8e c4  ce 01 b2 1d
| wrapper:  12 43 77 71  7c 4e 21 6e  6c be b1 08  4a c9 bc 89
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 64 bytes at 0x7fb0f8008a78
| unwrapped:  78 d6 17 c2  0e fe 52 e1  d5 77 f8 c5  1b ce a1 04
| unwrapped:  9a b1 7c 54  fb a6 4a 32  e7 d9 5a e7  65 17 07 11
| unwrapped:  c2 cb 96 02  9d e1 58 ec  26 18 a1 13  7d 67 4f 69
| unwrapped:  f9 2f da 47  c4 44 a8 9c  54 b1 49 ad  7d e4 39 b6
| prf+N PRF sha2_512 update seed-key@0x7fb0f80066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7fb0f80066d0
| nss hmac digest hack: symkey-key@0x7fb0f80066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7fb0f8007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  28 60 2f fe  24 a3 77 f4  d5 e1 4b fa  17 56 ca 3d
| wrapper:  97 3f 87 56  db 4a 06 f8  68 63 67 e7  e8 86 50 e2
| wrapper:  07 de c5 a5  6c 78 d5 63  1e 5c b6 fa  c9 c1 09 87
| wrapper:  75 9d fe c0  2c 5f 3d 64  65 a7 d6 40  6b ca a5 dc
| wrapper:  37 30 66 f8  c4 eb 80 d0  c6 f5 b0 f3  81 fc eb a2
| nss hmac digest hack: release slot-key-key@0x7fb0f8007050
| nss hmac digest hack extracted len 80 bytes at 0x7fb0f8008a78
| unwrapped:  f7 b6 c2 13  ae 61 b3 f6  89 0d 9e 7e  1c b0 34 b4
| unwrapped:  69 e6 75 09  3f 9f b6 e0  0d ee e8 20  b6 56 cf e2
| unwrapped:  87 1a e2 ec  b9 40 1c 2f  29 ba 0b 84  94 4b 3c b5
| unwrapped:  24 7a 7f 19  fc 6a da c3  ea 27 02 97  83 4a af 2e
| unwrapped:  30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
| prf+N PRF sha2_512 update N++-byte@0x5 (5)
| prf+N PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, data-bytes@0x7fb0f800a388 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   2b 2c c2 39  2d c5 e4 4c  36 ee ae 62  a6 f1 9c 2f
|   62 bf be cc  7e ad 0b a6  78 9c dd 17  60 1d b8 dc
|   24 f3 0c ad  a7 a5 3e dc  ba cb 18 b5  a5 09 a2 36
|   2b f1 ec 84  03 8a e8 f0  70 69 ce 4f  df 17 16 48
| CONCATENATE_DATA_AND_BASE: new result-key@0x7fb0f80089c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| #1 send_crypto_helper_request:642 st->st_calculating = TRUE;
| state #1 requesting EVENT_v2_RESPONDER_TIMEOUT to be deleted
| delete_pluto_event: release EVENT_v2_RESPONDER_TIMEOUT-pe@0x7fb107e1f518
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_CRYPTO_FAILED-pe@0x7fb107e1f518
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_CRYPTO_FAILED, timeout in 60.000000 seconds for #1
| complete v2 state transition with STF_SUSPEND
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7fb0f80089c0
| prf+N PRF sha2_512 final-key@0x7fb0f8004e50 (size 64)
| CONCATENATE_BASE_AND_KEY: base-key@0x7fb0f80068c0, key@0x7fb0f8004e50 -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_KEY: base-key@0x7fb0f80068c0, size: 256 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: key-key@0x7fb0f8004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: new result-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_symkey: release lhs-key@0x7fb0f80068c0
| ikev2_prfplus: release old_t[N]-key@0x7fb0f8006ca0
| ikev2_prfplus: release old_t[final]-key@0x7fb0f8004e50
| ikev2_ike_sa_keymat: release data-key@0x7fb0f80066d0
| calc_skeyseed_v2: release skeyseed_k-key@0x7fb107e0e570
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb107e0e570, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 64, key-size: 0, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@NULL
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 64, key-size: 0, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@NULL
| extract symkey SK_ei_k for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 64, key-size: 32, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f80066d0, size: 32 bytes, type/mechanism: AES_GCM (0x00001087)
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 96, key-size: 4, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8004e50, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| initiator salt extracting all 4 bytes of key@0x7fb0f8004e50
| initiator salt: symkey-key@0x7fb0f8004e50, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| initiator salt: new slot-key@0x7fb0f8007050, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 16
| wrapper:  0e 51 ed 5f  b3 36 7e 6b  68 b8 df 4d  b9 11 6f fc
| initiator salt: release slot-key-key@0x7fb0f8007050
| initiator salt extracted len 16 bytes at 0x7fb0f800a7b8
| unwrapped:  7c af bc 01  00 00 00 00  00 00 00 00  00 00 00 00
| calc_skeyseed_v2: release initiator-salt-key-key@0x7fb0f8004e50
| extract symkey SK_er_k for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 100, key-size: 32, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8004e50, size: 32 bytes, type/mechanism: AES_GCM (0x00001087)
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 132, key-size: 4, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8006ca0, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| responder salt extracting all 4 bytes of key@0x7fb0f8006ca0
| responder salt: symkey-key@0x7fb0f8006ca0, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| responder salt: new slot-key@0x7fb0f8007050, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 16
| wrapper:  38 76 a2 bd  be d7 9d ec  d3 31 f0 ea  93 3b d5 ae
| responder salt: release slot-key-key@0x7fb0f8007050
| responder salt extracted len 16 bytes at 0x7fb0f800a7f8
| unwrapped:  89 60 c0 fe  00 00 00 00  00 00 00 00  00 00 00 00
| calc_skeyseed_v2: release responder-salt-key-key@0x7fb0f8006ca0
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 136, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| chunk_SK_pi extracting all 64 bytes of key@0x7fb0f8006ca0
| chunk_SK_pi: symkey-key@0x7fb0f8006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| chunk_SK_pi: new slot-key@0x7fb0f8007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  df 93 a3 3f  96 e9 ed 18  76 a2 68 e7  10 dc 88 2a
| wrapper:  d0 22 50 b2  e7 0f a8 1e  91 37 23 21  e0 19 1b 1d
| wrapper:  f1 2c f3 fe  7c 5d 40 79  49 23 ce 48  e8 28 f4 82
| wrapper:  25 51 96 03  78 0b 4b 60  47 d3 33 ee  f5 a0 e2 ed
| chunk_SK_pi: release slot-key-key@0x7fb0f8007050
| chunk_SK_pi extracted len 64 bytes at 0x7fb0f8006c58
| unwrapped:  00 f7 bc 57  99 f5 17 2c  ec 8b f3 96  d5 6b ee 50
| unwrapped:  e3 10 61 a9  5d b6 59 d2  05 34 c5 b4  e8 15 71 67
| unwrapped:  eb 3e 5d 40  91 4c ba f1  15 81 53 7d  7b 16 f5 14
| unwrapped:  03 ce cc 79  84 81 64 46  78 d6 17 c2  0e fe 52 e1
| EXTRACT_KEY_FROM_KEY: key@0x7fb0f80089c0, key-offset: 200, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7fb0f80089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7fb0f80068c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| chunk_SK_pr extracting all 64 bytes of key@0x7fb0f80068c0
| chunk_SK_pr: symkey-key@0x7fb0f80068c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7fb107e0b5c0, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| chunk_SK_pr: new slot-key@0x7fb0f8007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  5c 42 b8 be  3e d1 8d f6  cf 57 a2 11  09 0a 66 70
| wrapper:  af 08 0f ed  34 8c 8d cb  fa a0 35 d0  d2 35 bd 79
| wrapper:  9f d6 3a eb  87 88 e7 ef  3b 95 a9 04  13 4b 53 e2
| wrapper:  2e 38 4e a5  a0 d1 7b a9  cf 32 2c 72  e7 5f 0b 4a
| chunk_SK_pr: release slot-key-key@0x7fb0f8007050
| chunk_SK_pr extracted len 64 bytes at 0x7fb0f8008b98
| unwrapped:  d5 77 f8 c5  1b ce a1 04  9a b1 7c 54  fb a6 4a 32
| unwrapped:  e7 d9 5a e7  65 17 07 11  c2 cb 96 02  9d e1 58 ec
| unwrapped:  26 18 a1 13  7d 67 4f 69  f9 2f da 47  c4 44 a8 9c
| unwrapped:  54 b1 49 ad  7d e4 39 b6  2b 2c c2 39  2d c5 e4 4c
| NSS ikev2: finished computing individual keys for IKEv2 SA
| calc_skeyseed_v2: release finalkey-key@0x7fb0f80089c0
| calc_skeyseed_v2 pointers: shared-key@0x7fb107e0ccf0, SK_d-key@0x7fb107e0e570, SK_ai-key@(nil), SK_ar-key@(nil), SK_ei-key@0x7fb0f80066d0, SK_er-key@0x7fb0f8004e50, SK_pi-key@0x7fb0f8006ca0, SK_pr-key@0x7fb0f80068c0
| calc_skeyseed_v2 initiator salt
|   7c af bc 01
| calc_skeyseed_v2 responder salt
|   89 60 c0 fe
| calc_skeyseed_v2 SK_pi
|   00 f7 bc 57  99 f5 17 2c  ec 8b f3 96  d5 6b ee 50
|   e3 10 61 a9  5d b6 59 d2  05 34 c5 b4  e8 15 71 67
|   eb 3e 5d 40  91 4c ba f1  15 81 53 7d  7b 16 f5 14
|   03 ce cc 79  84 81 64 46  78 d6 17 c2  0e fe 52 e1
| calc_skeyseed_v2 SK_pr
|   d5 77 f8 c5  1b ce a1 04  9a b1 7c 54  fb a6 4a 32
|   e7 d9 5a e7  65 17 07 11  c2 cb 96 02  9d e1 58 ec
|   26 18 a1 13  7d 67 4f 69  f9 2f da 47  c4 44 a8 9c
|   54 b1 49 ad  7d e4 39 b6  2b 2c c2 39  2d c5 e4 4c
| crypto helper 0 finished compute dh (V2); request ID 2 time elapsed 26490 usec
| crypto helper 0 has finished work (pcw_work now 1)
| crypto helper 0 replies to request ID 2
| calling continuation function 0x7fb1068ac188
| ikev2_parent_inI2outR2_continue for #1: calculating g^{xy}, sending R2
| processing connection "san"
| #1 ikev2_parent_inI2outR2_continue:3392 st->st_calculating = FALSE;
| Salt before authenticated decryption:
|   7c af bc 01
| IV before authenticated decryption:
|   bb f1 7a ad  57 c9 86 3a
| AAD before authenticated decryption:
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   35 20 23 08  00 00 00 01  00 00 02 1b  23 00 01 ff
|   00 01 00 04
| data before authenticated decryption:
|   fc 03 ae 63  d3 b4 90 b9  32 fe d2 6b  5e 10 1d f1
|   e0 7f 6b 65  2a 5d 46 64  94 48 e1 ea  63 2b 35 d0
|   ec d7 91 80  15 a8 a8 1f  b8 61 f4 64  12 43 54 32
|   ab 21 3a c4  70 8f 6a 0b  e0 61 bf fb  b4 23 c4 cc
|   a6 89 94 fe  a9 07 c2 f4  3c 48 0a ce  49 80 ef 2f
|   29 ed 4e b8  a4 f0 d4 5c  49 e8 ec 4f  b1 c9 9d 60
|   8f d8 0a 7f  1e e7 8f b2  f4 2e 3b 9a  1a da 12 d0
|   42 ea 8b 57  d4 d0 73 33  56 af 07 66  1b ff 5f fb
|   e8 2b f3 26  5e 80 a6 dc  a6 a2 42 b5  7e 3f c3 6a
|   98 c9 f5 3e  26 68 9c 5f  db 3a 77 e1  32 2a 16 05
|   8e f0 57 04  69 5e 57 7b  34 b3 d2 f1  b2 16 ac 4e
|   19 48 25 8b  c1 74 d5 62  ee e3 ad d1  01 a6 1a fa
|   63 c1 a5 c8  d2 69 b8 65  8c 05 37 f7  cb dc 6e b4
|   47 c2 45 a7  17 85 88 42  14 c7 e3 e2  bf ca 88 91
|   80 b1 ba 58  56 50 97 39  f7 94 75 e4  a1 d8 9f e2
|   18 21 26 56  d2 01 95 8d  ab 2c 47 77  f7 36 07 d3
|   72 03 a9 c5  3d 7c 19 52  ea cb f0 0a  42 2e 3b 10
|   5b 84 06 7a  ce 5c 9e 9a  ed 2b 2a 34  e0 8d 1a 80
|   c0 6e 11 5f  40 41 ad f2  f8 16 6e b2  3f 6b e8 c0
|   20 92 17 65  0d 37 2b 78  67 bf a1 88  fb e8 db 3c
|   3b 24 fc b0  22 14 f7 6c  a4 b2 a7 c6  29 bb 95 35
|   3b bb a9 d7  88 77 4d a2  0f e1 a7 cb  96 0a 1b 9a
|   e9 62 30 ef  53 13 d4 1c  4c 31 2e 30  8c a2 51 0b
|   56 75 b7 22  f3 18 99 83  e7 33 82 c3  13 af d7 0d
|   b9 e0 52 33  04 bc 82 62  e3 69 22 83  ca d5 17 68
|   31 ed 19 1d  ba ab 9e 8f  95 8d 56 94  cf 47 3c a9
|   19 a5 ae 99  47 8a 05 04  e0 c3 33 8b  ce c3 fe 89
|   31 0d 5b 7a  a5 f6 ce 00  4a 5f 88 07  42 f3 f1 3b
|   21 84 62 aa  c7 15 01 8b  f1 50 4d ba  b1 44 93 49
|   d5 c3 86 9e  62 e9 52 16  69 95 aa f1  3f e2 db
| integ before authenticated decryption:
|   03 cf a0 01  f4 3c 80 c8  f3 9c 94 bb  43 ac 1e dc
| data after authenticated decryption:
|   25 00 00 bf  09 00 00 00  30 81 b4 31  0b 30 09 06
|   03 55 04 06  13 02 43 41  31 10 30 0e  06 03 55 04
|   08 0c 07 4f  6e 74 61 72  69 6f 31 10  30 0e 06 03
|   55 04 07 0c  07 54 6f 72  6f 6e 74 6f  31 12 30 10
|   06 03 55 04  0a 0c 09 4c  69 62 72 65  73 77 61 6e
|   31 18 30 16  06 03 55 04  0b 0c 0f 54  65 73 74 20
|   44 65 70 61  72 74 6d 65  6e 74 31 23  30 21 06 03
|   55 04 03 0c  1a 77 65 73  74 2e 74 65  73 74 69 6e
|   67 2e 6c 69  62 72 65 73  77 61 6e 2e  6f 72 67 31
|   2e 30 2c 06  09 2a 86 48  86 f7 0d 01  09 01 16 1f
|   75 73 65 72  2d 77 65 73  74 40 74 65  73 74 69 6e
|   67 2e 6c 69  62 72 65 73  77 61 6e 2e  6f 72 67 27
|   00 03 cc 04  30 82 03 c3  30 82 03 2c  a0 03 02 01
|   02 02 01 04  30 0d 06 09  2a 86 48 86  f7 0d 01 01
|   05 05 00 30  81 ac 31 0b  30 09 06 03  55 04 06 13
|   02 43 41 31  10 30 0e 06  03 55 04 08  0c 07 4f 6e
|   74 61 72 69  6f 31 10 30  0e 06 03 55  04 07 0c 07
|   54 6f 72 6f  6e 74 6f 31  12 30 10 06  03 55 04 0a
|   0c 09 4c 69  62 72 65 73  77 61 6e 31  18 30 16 06
|   03 55 04 0b  0c 0f 54 65  73 74 20 44  65 70 61 72
|   74 6d 65 6e  74 31 25 30  23 06 03 55  04 03 0c 1c
|   4c 69 62 72  65 73 77 61  6e 20 74 65  73 74 20 43
|   41 20 66 6f  72 20 6d 61  69 6e 63 61  31 24 30 22
|   06 09 2a 86  48 86 f7 0d  01 09 01 16  15 74 65 73
|   74 69 6e 67  40 6c 69 62  72 65 73 77  61 6e 2e 6f
|   72 67 30 22  18 0f 32 30  31 37 30 35  30 32 32 32
|   33 32 30 39  5a 18 0f 32  30 32 30 30  35 30 31 32
|   32 33 32 30  39 5a 30 81  b4 31 0b 30  09 06 03 55
|   04 06 13 02  43 41 31 10  30 0e 06 03  55 04 08 0c
|   07 4f 6e 74  61 72 69 6f  31 10 30 0e  06 03 00 03
|   cf a0 01 f4  3c 80 c8 f3  9c 94 bb 43  ac 1e dc
| stripping 1 octets as pad
| Salt before authenticated decryption:
|   7c af bc 01
| IV before authenticated decryption:
|   66 ff 13 36  15 5e ad 3c
| AAD before authenticated decryption:
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   35 20 23 08  00 00 00 01  00 00 02 1b  00 00 01 ff
|   00 02 00 04
| data before authenticated decryption:
|   26 a1 a5 35  5d 35 95 df  34 aa f9 54  fe 0a 30 81
|   22 7d 1e 0d  c8 8a f3 da  8e 7c cf 69  be aa df a2
|   16 fb e5 d0  bc 23 6a 64  d6 08 eb 96  12 1e c6 46
|   7e 1f d1 fd  19 ed 14 0a  77 d6 8a 69  48 60 0d 4a
|   17 50 8f 87  65 da 25 42  db 43 10 cd  1c 45 26 6f
|   76 07 ca 49  19 2a d1 64  88 4c 4c f9  da 0c 44 4b
|   06 9a 42 c2  49 51 7e cb  09 0a 82 fc  d4 66 96 eb
|   53 fa 3d fe  37 7e f7 fc  e5 da 1b f8  13 c9 fd fe
|   47 f1 05 07  75 72 5f fc  96 00 2e 72  a6 9b 40 8a
|   45 65 b7 23  44 b2 53 49  59 89 93 df  c0 c7 79 b4
|   f0 8a 61 2c  48 07 1b 55  5e 1d c7 1f  6e 01 d1 0a
|   52 be 05 11  5f 64 cd d3  c5 03 df 6b  47 e4 7b 66
|   c3 b8 70 6a  a5 cc 3a d5  e0 a4 5b ee  9f 15 5c d4
|   71 05 f4 79  b5 55 97 bc  f5 19 4f 94  52 a1 91 7d
|   95 5b 90 0f  98 90 86 6e  6f 43 ff 96  ca 19 38 95
|   d7 af f8 7d  e4 ba e9 06  6b ab b9 7a  8a 83 8d c3
|   77 57 1b 28  0b 39 4f ee  92 22 f2 84  50 d6 f2 c0
|   78 19 67 b2  71 af 5f f1  8d 68 70 65  92 dc a0 07
|   a8 1a d6 43  4f 1c 40 47  e4 94 e0 7c  3e 00 42 66
|   9f bf a6 f9  1a 84 d7 15  07 a9 55 1e  ab cf 14 18
|   6a 47 6f d9  86 a1 b1 b6  47 e5 da 88  9c b6 31 0b
|   54 0b 06 03  e4 a5 05 9e  94 14 c3 d1  7a e1 2a be
|   9f b5 0e 4e  9d 80 f7 61  ba 18 11 52  07 e0 23 83
|   5b b8 b9 1a  d1 6b cd a8  24 f3 e6 34  a9 ae 4e c2
|   c6 fe 00 ad  88 e5 9e 57  3f 66 2e b8  72 a6 0c 28
|   fd 4a 64 f0  ab 97 5c 11  c7 ee fd 7b  e2 02 a6 c0
|   10 d5 fa 15  a9 e3 c3 01  77 3f a7 af  fb 37 46 d2
|   a7 81 a9 eb  ce 69 8e 59  f9 c6 1d d2  61 73 7c 7b
|   8d 25 97 1b  8a b9 9b 78  53 5f dd 45  c0 2a 84 75
|   1c 24 63 14  d3 43 76 a6  3c 28 63 c8  f5 22 c7
| integ before authenticated decryption:
|   a2 f5 ff 1b  6a b3 5d 6e  1a eb 59 ea  56 8f 6e 13
| data after authenticated decryption:
|   55 04 07 0c  07 54 6f 72  6f 6e 74 6f  31 12 30 10
|   06 03 55 04  0a 0c 09 4c  69 62 72 65  73 77 61 6e
|   31 18 30 16  06 03 55 04  0b 0c 0f 54  65 73 74 20
|   44 65 70 61  72 74 6d 65  6e 74 31 23  30 21 06 03
|   55 04 03 0c  1a 77 65 73  74 2e 74 65  73 74 69 6e
|   67 2e 6c 69  62 72 65 73  77 61 6e 2e  6f 72 67 31
|   2e 30 2c 06  09 2a 86 48  86 f7 0d 01  09 01 16 1f
|   75 73 65 72  2d 77 65 73  74 40 74 65  73 74 69 6e
|   67 2e 6c 69  62 72 65 73  77 61 6e 2e  6f 72 67 30
|   81 9f 30 0d  06 09 2a 86  48 86 f7 0d  01 01 01 05
|   00 03 81 8d  00 30 81 89  02 81 81 00  da 1c 5a 87
|   0a b7 ba 0e  17 b6 62 7d  8b 68 a6 2d  94 1d ec d4
|   f1 06 9e 55  9e 3b 79 2e  46 a4 bd 3a  ac 9b 07 38
|   fa a2 74 97  75 3e 17 8e  5c c1 7e 68  6a d7 af 19
|   b9 12 54 c9  37 c0 f6 05  a8 d4 5c 6d  0c 63 e0 a2
|   dd a9 0d bb  14 42 f4 7f  76 f0 19 70  e4 44 7c fd
|   c2 cc 2f 01  75 8a f9 0c  d1 06 5f ad  b3 2b 94 4d
|   69 97 5c 15  0c 54 02 7e  0d a6 b4 a2  8f c5 22 b4
|   7d f2 27 41  e4 0c 1d 81  a8 02 07 01  02 03 01 00
|   01 a3 81 e6  30 81 e3 30  09 06 03 55  1d 13 04 02
|   30 00 30 47  06 03 55 1d  11 04 40 30  3e 82 1a 77
|   65 73 74 2e  74 65 73 74  69 6e 67 2e  6c 69 62 72
|   65 73 77 61  6e 2e 6f 72  67 81 1a 77  65 73 74 40
|   74 65 73 74  69 6e 67 2e  6c 69 62 72  65 73 77 61
|   6e 2e 6f 72  67 87 04 c0  01 02 2d 30  0b 06 03 55
|   1d 0f 04 04  03 02 07 80  30 41 06 08  2b 06 01 05
|   05 07 01 01  04 35 30 33  30 31 06 08  2b 06 01 05
|   05 07 30 01  86 25 68 74  74 70 3a 2f  2f 6e 69 63
|   2e 74 65 73  74 69 6e 67  2e 6c 69 62  72 65 73 77
|   61 6e 2e 6f  72 67 3a 32  35 36 30 30  3d 06 00 a2
|   f5 ff 1b 6a  b3 5d 6e 1a  eb 59 ea 56  8f 6e 13
| stripping 1 octets as pad
| Salt before authenticated decryption:
|   7c af bc 01
| IV before authenticated decryption:
|   33 bf 78 66  60 6c 9d 32
| AAD before authenticated decryption:
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   35 20 23 08  00 00 00 01  00 00 02 1b  00 00 01 ff
|   00 03 00 04
| data before authenticated decryption:
|   59 98 17 66  16 e0 64 f6  58 ec a2 97  74 14 d8 4e
|   6d eb da 55  45 38 d3 69  7d 0b e8 dc  53 9e e0 93
|   97 5e aa 42  d4 02 01 01  1a fb d3 c1  78 c4 33 29
|   25 66 5a 8d  dd 2f 2c 70  da ca 8d 3d  fc 6b 10 5a
|   4c 6f a7 77  4a 4b 7c 80  c8 29 93 b1  10 d5 f8 b8
|   7e 18 e4 e6  77 d4 4b bf  44 1b 07 48  42 e8 32 a4
|   1f 03 01 b2  6e 69 4b a7  7e 14 32 bd  65 43 2e 66
|   70 d1 5a 51  1e 15 42 b0  09 be 94 b3  f6 22 31 b0
|   7a f9 25 23  5c 2f 7d 00  61 c9 d2 3b  a8 b4 ae 4a
|   68 61 52 76  04 22 55 3d  7e 44 a1 17  70 58 da 41
|   32 64 68 97  89 80 9b 70  8d 6c c9 35  b7 bc 7f 75
|   2e 91 36 3d  34 24 62 09  5e d6 7c f7  22 2f 46 0a
|   3d e6 d9 d8  40 b6 b4 2b  05 b6 58 9d  7d 4a ea ac
|   e9 56 f8 ad  80 fe 04 e5  99 e8 d1 80  d6 5d 19 f1
|   96 7c 20 61  e4 da 83 f1  0a 95 c4 a4  53 83 c2 66
|   01 80 fc 61  e8 3d 0f de  c0 c4 ee b3  0e 7e 62 39
|   75 7b 8a 01  65 2d 7c ae  ce 6b 44 1c  9d 91 7e f8
|   a3 9d 3b 53  0e 81 cf 5f  8c a3 33 44  7d a0 13 f6
|   af aa 6d 5c  aa bc ed ac  e6 91 12 c8  0d 5d a0 68
|   ba b9 00 82  98 77 82 66  26 f1 c0 20  96 01 4d 6a
|   25 8e 66 f3  36 67 b0 89  ea 0b c9 06  74 6b f8 bd
|   e2 61 4f b6  06 6e 30 13  dc 62 91 b0  66 d9 eb ba
|   11 4c aa 00  f5 18 11 fb  9a ff 19 81  47 df 10 fd
|   55 eb 5d 91  30 14 bc c0  47 0c 6e 6e  3a 6d 41 fd
|   5f 91 7c 11  55 16 ee 39  7d 5a 0b 9b  43 1c 90 c6
|   40 53 f5 b4  09 09 62 29  28 72 c1 33  d6 a6 93 44
|   b7 e0 44 b7  a0 81 5c c2  6d 43 70 ae  2f a2 5b a5
|   6b e7 c9 f5  c9 ff ce e2  74 7d 53 52  ac 0b f6 7f
|   15 41 5d 87  3b d4 4c 13  1e df b2 97  c0 4c c4 8a
|   85 88 5f f1  bc 2b 93 11  8f 08 7c 39  6d 64 61
| integ before authenticated decryption:
|   27 c2 bc 70  e6 c6 b7 e2  5f 05 57 d6  5d fc e4 d0
| data after authenticated decryption:
|   03 55 1d 1f  04 36 30 34  30 32 a0 30  a0 2e 86 2c
|   68 74 74 70  3a 2f 2f 6e  69 63 2e 74  65 73 74 69
|   6e 67 2e 6c  69 62 72 65  73 77 61 6e  2e 6f 72 67
|   2f 72 65 76  6f 6b 65 64  2e 63 72 6c  30 0d 06 09
|   2a 86 48 86  f7 0d 01 01  05 05 00 03  81 81 00 4a
|   b7 04 c4 c8  21 9d c3 e2  12 4e ee 16  0b 4d f3 5d
|   6e 05 44 ba  ad b6 21 58  9d 04 6c 9e  49 ca 9f 70
|   15 f7 f3 1a  b1 c1 cf d3  16 92 11 d9  48 ab 97 3b
|   ec f0 b7 18  e0 16 1a ca  68 00 48 27  85 f8 6b 38
|   02 77 24 6a  51 49 26 f1  a6 b7 83 c7  ce ba 36 35
|   44 3b 77 47  8e 79 c5 4d  02 48 ae a5  e6 9e 77 66
|   72 d6 c5 1c  71 97 d8 44  50 89 0c 5d  d3 7f 0c b9
|   83 63 33 6a  98 e0 39 d0  b2 f6 20 07  55 77 f9 21
|   00 00 88 01  00 00 00 38  68 90 0f 03  91 6a 3d 37
|   76 8b 07 49  ba c8 35 b9  58 9c 8e e1  2f f8 ea 35
|   2c dd 93 7d  6d e4 bd 66  cb 12 5f fc  29 b9 43 01
|   62 13 23 05  3d c7 52 e7  3d 00 81 f9  1f 89 a7 29
|   0f 2c 00 df  fa 5c 89 91  f9 ec 2d 12  33 a6 a9 1e
|   58 f5 6f af  0f e7 51 8f  f3 fc 36 c9  bd be d4 60
|   f0 e7 33 56  9f 81 d3 f4  dd 48 e5 d5  9e 94 f3 35
|   da 88 47 bf  f3 cf 57 30  b8 d9 28 0c  63 35 b4 e7
|   8b b7 29 43  7e b5 cb 2c  00 00 dc 02  00 00 28 01
|   03 04 03 46  bc 45 43 03  00 00 0c 01  00 00 14 80
|   0e 01 00 03  00 00 08 03  00 00 00 00  00 00 08 05
|   00 00 00 02  00 00 28 02  03 04 03 46  bc 45 43 03
|   00 00 0c 01  00 00 14 80  0e 00 80 03  00 00 08 03
|   00 00 00 00  00 00 08 05  00 00 00 02  00 00 30 03
|   03 04 04 46  bc 45 43 03  00 00 0c 01  00 00 0c 80
|   0e 01 00 03  00 00 08 03  00 00 0e 03  00 00 08 03
|   00 00 0c 00  00 00 08 05  00 00 00 02  00 00 00 27
|   c2 bc 70 e6  c6 b7 e2 5f  05 57 d6 5d  fc e4 d0
| stripping 1 octets as pad
| Salt before authenticated decryption:
|   7c af bc 01
| IV before authenticated decryption:
|   92 0d 50 03  24 0f d0 cf
| AAD before authenticated decryption:
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   35 20 23 08  00 00 00 01  00 00 00 c2  00 00 00 a6
|   00 04 00 04
| data before authenticated decryption:
|   70 ca 40 6c  9a 4f 24 f4  4c ce 32 c6  92 c2 53 74
|   cb cd 5a 77  ef 60 f2 2e  eb 05 1a 00  fa a1 6f a8
|   8f f9 30 e6  e8 07 42 de  0e 55 7b 09  15 31 b8 16
|   d0 3a a5 5a  29 3e 0a ad  c1 1f 9a 97  a7 86 a1 dc
|   c5 89 f0 0d  49 88 fe a8  cc 3c c2 15  b8 f1 e2 c8
|   dd ce 05 71  5c 86 56 5b  b7 2c de c2  98 d0 49 44
|   67 b5 fd 24  24 e3 da f9  e6 23 b2 ce  4f 56 0d d9
|   7a b7 be 48  6c 35 55 99  78 dc d4 0e  2b 70 83 48
|   16 de d0 7e  c6 b5
| integ before authenticated decryption:
|   23 14 d7 11  0e 26 32 90  52 32 09 4e  39 75 1b b4
| data after authenticated decryption:
|   30 04 03 04  04 46 bc 45  43 03 00 00  0c 01 00 00
|   0c 80 0e 00  80 03 00 00  08 03 00 00  0e 03 00 00
|   08 03 00 00  0c 00 00 00  08 05 00 00  00 00 00 00
|   28 05 03 04  03 46 bc 45  43 03 00 00  0c 01 00 00
|   0c 80 0e 00  80 03 00 00  08 03 00 00  02 00 00 00
|   08 05 00 00  00 2d 00 00  18 01 00 00  00 07 00 00
|   10 00 00 ff  ff c0 01 02  2d c0 01 02  2d 00 00 00
|   18 01 00 00  00 07 00 00  10 00 00 ff  ff c0 01 02
|   17 c0 01 02  17 00 23 14  d7 11 0e 26  32 90 52 32
|   09 4e 39 75  1b b4
| stripping 1 octets as pad
| #1 ikev2 ISAKMP_v2_AUTH decrypt sucess
| Now let's proceed with payload (ISAKMP_NEXT_v2IDi)
| **parse IKEv2 Identification Payload:
|    next payload type: ISAKMP_NEXT_v2CERT (0x25)
|    flags: none (0x0)
|    length: 191 (0xbf)
|    id_type: ID_DER_ASN1_DN (0x9)
| processing payload: ISAKMP_NEXT_v2IDi (len=191)
| Now let's proceed with payload (ISAKMP_NEXT_v2CERT)
| **parse IKEv2 Certificate Payload:
|    next payload type: ISAKMP_NEXT_v2AUTH (0x27)
|    flags: none (0x0)
|    length: 972 (0x3cc)
|    ikev2 cert encoding: CERT_X509_SIGNATURE (0x4)
| processing payload: ISAKMP_NEXT_v2CERT (len=972)
| Now let's proceed with payload (ISAKMP_NEXT_v2AUTH)
| **parse IKEv2 Authentication Payload:
|    next payload type: ISAKMP_NEXT_v2SA (0x21)
|    flags: none (0x0)
|    length: 136 (0x88)
|    auth method: IKEv2_AUTH_RSA (0x1)
| processing payload: ISAKMP_NEXT_v2AUTH (len=136)
| Now let's proceed with payload (ISAKMP_NEXT_v2SA)
| **parse IKEv2 Security Association Payload:
|    next payload type: ISAKMP_NEXT_v2TSi (0x2c)
|    flags: none (0x0)
|    length: 220 (0xdc)
| processing payload: ISAKMP_NEXT_v2SA (len=220)
| Now let's proceed with payload (ISAKMP_NEXT_v2TSi)
| **parse IKEv2 Traffic Selector Payload:
|    next payload type: ISAKMP_NEXT_v2TSr (0x2d)
|    flags: none (0x0)
|    length: 24 (0x18)
|    number of TS: 1 (0x1)
| processing payload: ISAKMP_NEXT_v2TSi (len=24)
| Now let's proceed with payload (ISAKMP_NEXT_v2TSr)
| **parse IKEv2 Traffic Selector Payload:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    length: 24 (0x18)
|    number of TS: 1 (0x1)
| processing payload: ISAKMP_NEXT_v2TSr (len=24)
| #1 match encrypted payloads to svm respond to IKE_AUTH
| DER ASN1 DN:  30 81 b4 31  0b 30 09 06  03 55 04 06  13 02 43 41
| DER ASN1 DN:  31 10 30 0e  06 03 55 04  08 0c 07 4f  6e 74 61 72
| DER ASN1 DN:  69 6f 31 10  30 0e 06 03  55 04 07 0c  07 54 6f 72
| DER ASN1 DN:  6f 6e 74 6f  31 12 30 10  06 03 55 04  0a 0c 09 4c
| DER ASN1 DN:  69 62 72 65  73 77 61 6e  31 18 30 16  06 03 55 04
| DER ASN1 DN:  0b 0c 0f 54  65 73 74 20  44 65 70 61  72 74 6d 65
| DER ASN1 DN:  6e 74 31 23  30 21 06 03  55 04 03 0c  1a 77 65 73
| DER ASN1 DN:  74 2e 74 65  73 74 69 6e  67 2e 6c 69  62 72 65 73
| DER ASN1 DN:  77 61 6e 2e  6f 72 67 31  2e 30 2c 06  09 2a 86 48
| DER ASN1 DN:  86 f7 0d 01  09 01 16 1f  75 73 65 72  2d 77 65 73
| DER ASN1 DN:  74 40 74 65  73 74 69 6e  67 2e 6c 69  62 72 65 73
| DER ASN1 DN:  77 61 6e 2e  6f 72 67
| decoded E=user-west@testing.libreswan.org,CN=west.testing.libreswan.org,OU=Test Department,O=Libreswan,L=Toronto,ST=Ontario,C=CA
| get_issuer_crl : looking for a CRL issued by E=testing@libreswan.org,CN=Libreswan test CA for mainca,OU=Test Department,O=Libreswan,L=Toronto,ST=Ontario,C=CA
| missing or expired CRL
| crl_strict: 0, ocsp: 0, ocsp_strict: 0
| certificate is valid
"san" #1: certificate verified OK: E=user-west@testing.libreswan.org,CN=west.testing.libreswan.org,OU=Test Department,O=Libreswan,L=Toronto,ST=Ontario,C=CA
| Verifying configured ID matches certificate
| subjectAltname (len=26) west.testing.libreswan.org not match west@testing.libreswan.org
| subjectAltname west@testing.libreswan.org found in certificate
"san" #1: PAUL: ID_USER_FQDN matched with CERT_* code but continuing test using CERT_GetFirstEmailAddress()
"san" #1: PAUL: Email 'west@testing.libreswan.org' matched with CERT_GetNextEmailAddress() code
"san" #1: No email SAN's on the certificate match required peer id 'west@testing.libreswan.org'
"san" #1: Peer public key is not available for this exchange
"san" #1: ikev2_decode_cert(md) failed in ikev2_decode_peer_id_and_certs()
| ikev2_parent_inI2outR2_tail returned STF_FAIL with v2N_AUTHENTICATION_FAILED
| #1 complete v2 state transition from STATE_PARENT_R1 with v2N_AUTHENTICATION_FAILED
| sending a notification reply
"san" #1: sending unencrypted notification v2N_AUTHENTICATION_FAILED to 192.1.2.45:500
| **emit ISAKMP Message:
|    initiator cookie:
|   30 b1 73 cf  41 fb bd 01
|    responder cookie:
|   2c 8f 04 1f  b8 a9 98 af
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_SA_INIT (0x22)
|    flags: ISAKMP_FLAG_v2_MSG_RESPONSE (0x20)
|    message ID:  00 00 00 00
| Adding a v2N Payload
| ***emit IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_AUTHENTICATION_FAILED (0x18)
| emitting length of IKEv2 Notify Payload: 8
| no IKE message padding required for IKEv2
| emitting length of ISAKMP Message: 36
| sending 36 bytes for v2 notify through eth1:500 to 192.1.2.45:500 (using #1)
|   30 b1 73 cf  41 fb bd 01  2c 8f 04 1f  b8 a9 98 af
|   29 20 22 20  00 00 00 00  00 00 00 24  00 00 00 08
|   00 00 00 18
| state #1 requesting EVENT_CRYPTO_FAILED to be deleted
| delete_pluto_event: release EVENT_CRYPTO_FAILED-pe@0x7fb107e1f518
| event_schedule called for 200 seconds
| event_schedule_tv: new EVENT_v2_RESPONDER_TIMEOUT-pe@0x7fb107e1f518
| event_schedule_tv called for about 200 seconds and change
| inserting event EVENT_v2_RESPONDER_TIMEOUT, timeout in 200.000000 seconds for #1
| state transition function for STATE_PARENT_R1 failed: v2N_AUTHENTICATION_FAILED
| #1 fmt_state:1971 st->st_calculating == FALSE;
| timer_event_cb: processing event@0x7fb107e0fe48
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e2f828
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e0fe48
| timer_event_cb: processing event@0x7fb107e2f828
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e0fe48
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e2f828
| timer_event_cb: processing event@0x7fb107e0b218
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_PENDING_DDNS-pe@0x7fb107e2f828
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 0.000000
| delete_pluto_event: release EVENT_PENDING_DDNS-pe@0x7fb107e0b218
| timer_event_cb: processing event@0x7fb107e0fe48
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e0b218
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e0fe48
| timer_event_cb: processing event@0x7fb107e0b218
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e0fe48
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e0b218
| timer_event_cb: processing event@0x7fb107e1bc58
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action: watchdog(3), status 0
| event_schedule called for 100 seconds
| event_schedule_tv: new EVENT_SD_WATCHDOG-pe@0x7fb107e0b218
| event_schedule_tv called for about 100 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 100.000000 seconds
| delete_pluto_event: release EVENT_SD_WATCHDOG-pe@0x7fb107e1bc58
| timer_event_cb: processing event@0x7fb107e0fe48
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e1bc58
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e0fe48
| timer_event_cb: processing event@0x7fb107e0b2f8
| handling event EVENT_PENDING_PHASE2
| event_schedule called for 120 seconds
| event_schedule_tv: new EVENT_PENDING_PHASE2-pe@0x7fb107e0fe48
| event_schedule_tv called for about 120 seconds and change
| inserting event EVENT_PENDING_PHASE2, timeout in 120.000000 seconds
| pending review: connection "san" was not up, skipped
| delete_pluto_event: release EVENT_PENDING_PHASE2-pe@0x7fb107e0b2f8
| timer_event_cb: processing event@0x7fb107e2f828
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_PENDING_DDNS-pe@0x7fb107e0b2f8
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 0.000000
| delete_pluto_event: release EVENT_PENDING_DDNS-pe@0x7fb107e2f828
| timer_event_cb: processing event@0x7fb107e1bc58
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e2f828
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e1bc58
| timer_event_cb: processing event@0x7fb107e2f828
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e1bc58
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e2f828
| timer_event_cb: processing event@0x7fb107e1bc58
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e2f828
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e1bc58
| timer_event_cb: processing event@0x7fb107e0b2f8
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_PENDING_DDNS-pe@0x7fb107e1bc58
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 18446744073709551615.1000000
| delete_pluto_event: release EVENT_PENDING_DDNS-pe@0x7fb107e0b2f8
| timer_event_cb: processing event@0x7fb107e2f828
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e0b2f8
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e2f828
| timer_event_cb: processing event@0x7fb107e0b218
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action: watchdog(3), status 0
| event_schedule called for 100 seconds
| event_schedule_tv: new EVENT_SD_WATCHDOG-pe@0x7fb107e2f828
| event_schedule_tv called for about 100 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 100.000000 seconds
| delete_pluto_event: release EVENT_SD_WATCHDOG-pe@0x7fb107e0b218
| timer_event_cb: processing event@0x7fb107e0b2f8
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e0b218
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e0b2f8
| timer_event_cb: processing event@0x7fb107e1f518
| handling event EVENT_v2_RESPONDER_TIMEOUT for parent state #1
| processing connection "san"
| EVENT_SA_EXPIRE picked newest_isakmp_sa
| un-established partial ISAKMP SA timeout (Responder timeout)
| finding hash chain in state hash table
|   ICOOKIE:  30 b1 73 cf  41 fb bd 01
|   RCOOKIE:  2c 8f 04 1f  b8 a9 98 af
| found hash chain 9
"san" #1: deleting state (STATE_PARENT_R1)
| parent state #1: STATE_PARENT_R1(half-open-ike) => delete
| state #1 requesting N/A-pe@(nil) be deleted
| delete_pluto_event cannot delete NULL event
| state #1 requesting N/A-pe@(nil) be deleted
| delete_pluto_event cannot delete NULL event
| state #1 requesting N/A-pe@(nil) be deleted
| delete_pluto_event cannot delete NULL event
| state #1 requesting to delete non existing event
| finding hash chain in state hash table
|   ICOOKIE:  30 b1 73 cf  41 fb bd 01
|   RCOOKIE:  2c 8f 04 1f  b8 a9 98 af
| found hash chain 9
| unhashing state object #1
| removing state 0x7fb107e28dd8 entry 0x7fb107e29458 next (nil) prev-next 0x7fb106b8b6b0 from list
| updated next entry is (nil)
| removing state 0x7fb107e28dd8 entry 0x7fb107e29470 next (nil) prev-next 0x7fb106b8b560 from list
| updated next entry is (nil)
| in connection_discard for connection san
| parent state #1: STATE_PARENT_R1(half-open-ike) => STATE_UNDEFINED(ignore)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 0 count states: 0
| delete_state: release st->st_shared_nss-key@0x7fb107e0ccf0
| delete_state: release st->st_skeyid_nss-key@NULL
| delete_state: release st->st_skey_d_nss-key@0x7fb107e0e570
| delete_state: release st->st_skey_ai_nss-key@NULL
| delete_state: release st->st_skey_ar_nss-key@NULL
| delete_state: release st->st_skey_ei_nss-key@0x7fb0f80066d0
| delete_state: release st->st_skey_er_nss-key@0x7fb0f8004e50
| delete_state: release st->st_skey_pi_nss-key@0x7fb0f8006ca0
| delete_state: release st->st_skey_pr_nss-key@0x7fb0f80068c0
| delete_state: release st->st_enc_key_nss-key@NULL
| delete_pluto_event: release EVENT_v2_RESPONDER_TIMEOUT-pe@0x7fb107e1f518
| timer_event_cb: processing event@0x7fb107e0b218
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e1f518
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e0b218
| timer_event_cb: processing event@0x7fb107e0fe48
| handling event EVENT_PENDING_PHASE2
| event_schedule called for 120 seconds
| event_schedule_tv: new EVENT_PENDING_PHASE2-pe@0x7fb107e0b218
| event_schedule_tv called for about 120 seconds and change
| inserting event EVENT_PENDING_PHASE2, timeout in 120.000000 seconds
| pending review: connection "san" was not up, skipped
| delete_pluto_event: release EVENT_PENDING_PHASE2-pe@0x7fb107e0fe48
| timer_event_cb: processing event@0x7fb107e1bc58
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_PENDING_DDNS-pe@0x7fb107e0fe48
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 0.000000
| delete_pluto_event: release EVENT_PENDING_DDNS-pe@0x7fb107e1bc58
| timer_event_cb: processing event@0x7fb107e1f518
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7fb107e1bc58
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| delete_pluto_event: release EVENT_SHUNT_SCAN-pe@0x7fb107e1f518
shutting down
| pluto_sd: executing action action: stopping(6), status 0
| certs and keys locked by 'free_preshared_secrets'
forgetting secrets
| certs and keys unlocked by 'free_preshard_secrets'
| unreference key: 0x7fb107e1eb78 C=CA, ST=Ontario, L=Toronto, O=Libreswan, OU=Test Department, CN=east.testing.libreswan.org, E=user-east@testing.libreswan.org cnt 1--
| unreference key: 0x7fb107e1edf8 user-east@testing.libreswan.org cnt 1--
| unreference key: 0x7fb107e23418 @east.testing.libreswan.org cnt 1--
| unreference key: 0x7fb107e23268 east@testing.libreswan.org cnt 1--
| unreference key: 0x7fb107e1f6c8 192.1.2.23 cnt 1--
| processing connection "san"
"san": deleting non-instance connection
| Deleting states for connection - including all other IPsec SA's of this IKE SA
| pass 0
| pass 1
| crl fetch request list locked by 'free_crl_fetch'
| crl fetch request list unlocked by 'free_crl_fetch'
shutting down interface lo/lo 127.0.0.1:4500
shutting down interface lo/lo 127.0.0.1:500
shutting down interface eth0/eth0 192.0.2.254:4500
shutting down interface eth0/eth0 192.0.2.254:500
shutting down interface eth1/eth1 192.1.2.23:4500
shutting down interface eth1/eth1 192.1.2.23:500
shutting down interface eth2/eth2 192.9.2.23:4500
shutting down interface eth2/eth2 192.9.2.23:500
leak: EVENT_SHUNT_SCAN, item size: 32
leak: EVENT_PENDING_DDNS, item size: 32
leak: EVENT_PENDING_PHASE2, item size: 32
leak: EVENT_SD_WATCHDOG, item size: 32
leak: EVENT_LOG_DAILY, item size: 32
leak: kernel integ, item size: 32
leak: EVENT_REINIT_SECRET, item size: 32
leak detective found 7 leaks, total size 224
