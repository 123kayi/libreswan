From: "D. Hugh Redelmeier" <hugh@mimosa.com>
Date: Fri, 3 Feb 2017 18:10:58 -0500
Subject: Try to address some of the build failures in
 https://bugs.debian.org/853507

The warning is correct.  It doesn't really matter.  Here's a proposed
fix.  Can someone test this?

There's another instance of the same problem.  Here's the original fix
+ the missing bit.  Still untested.

This is from Message-Id:
alpine.LFD.2.20.1702031741210.917@redeye.mimosa.com
---
 include/constants.h     | 10 ++++++++--
 lib/libswan/constants.c |  7 +++----
 2 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/include/constants.h b/include/constants.h
index c9db34847..fb5782876 100644
--- a/include/constants.h
+++ b/include/constants.h
@@ -216,8 +216,14 @@ extern const char *enum_short_name(enum_names *ed, unsigned long val);
 
 /* caller-allocated buffer for enum_showb */
 struct esb_buf {
-	/* enough space for any unsigned 32-bit + "??" */
-	char buf[14];
+	/* enough space for decimal rep of any unsigned long + "??"
+	 * sizeof yields log-base-256 of maximum value.
+	 * Multiplying by 241/100 converts this to the number of decimal digits
+	 * (the common log), rounded up a little (instead of 2.40654...).
+	 * The addition of 99 ensures that the division rounds up to an integer
+	 * rather than truncates.
+	 */
+	char buf[(sizeof(unsigned long) * 241 + 99) / 100 + sizeof("??")];
 };
 extern const char *enum_showb(enum_names *ed, unsigned long val, struct esb_buf *);
 extern const char *enum_show_shortb(enum_names *ed, unsigned long val, struct esb_buf *);
diff --git a/lib/libswan/constants.c b/lib/libswan/constants.c
index e273bd3e2..baf55d9aa 100644
--- a/lib/libswan/constants.c
+++ b/lib/libswan/constants.c
@@ -2395,11 +2395,10 @@ const char *sparse_val_show(sparse_names sd, unsigned long val)
 	const char *p = sparse_name(sd, val);
 
 	if (p == NULL) {
-		/* only one!  I hope that it is big enough */
-		static char buf[12];
+		static struct esb_buf b;	/* STATIC!! */
 
-		snprintf(buf, sizeof(buf), "%lu??", val);
-		p = buf;
+		snprintf(b.buf, sizeof(b.buf), "%lu??", val);
+		p = b.buf;
 	}
 	return p;
 }
