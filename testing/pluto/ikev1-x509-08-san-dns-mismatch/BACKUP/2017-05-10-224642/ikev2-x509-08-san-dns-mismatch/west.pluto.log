FIPS Product: NO
FIPS Kernel: NO
FIPS Mode: NO
NSS DB directory: sql:/etc/ipsec.d
Initializing NSS
Opening NSS database "sql:/etc/ipsec.d" read-only
NSS initialized
NSS crypto library initialized
FIPS HMAC integrity support [enabled]
FIPS mode disabled for pluto daemon
FIPS HMAC integrity verification self-test FAILED
libcap-ng support [enabled]
Linux audit support [enabled]
Linux audit activated
Starting Pluto (Libreswan Version v3.20-350-g2310c96-dirty-master XFRM(netkey) KLIPS USE_FORK USE_PTHREAD_SETSCHEDPRIO NSS DNSSEC USE_SYSTEMD_WATCHDOG FIPS_CHECK LABELED_IPSEC SECCOMP LIBCAP_NG LINUX_AUDIT XAUTH_PAM NETWORKMANAGER CURL(non-NSS)) pid:2270
core dump dir: /var/tmp
secrets file: /etc/ipsec.secrets
leak-detective enabled
NSS crypto [enabled]
XAUTH PAM support [enabled]
| init_nat_traversal() initialized with keep_alive=0
NAT-Traversal support  [enabled]
| Initialize libevent base
| event_schedule called for 3600 seconds
| event_schedule_tv: new EVENT_REINIT_SECRET-pe@0x7f8c95c33138
| event_schedule_tv called for about 3600 seconds and change
| inserting event EVENT_REINIT_SECRET, timeout in 3600.000000 seconds
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_PENDING_DDNS-pe@0x7f8c95c33268
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| event_schedule called for 120 seconds
| event_schedule_tv: new EVENT_PENDING_PHASE2-pe@0x7f8c95c33348
| event_schedule_tv called for about 120 seconds and change
| inserting event EVENT_PENDING_PHASE2, timeout in 120.000000 seconds
| encryption algorithm assertion checks
| encryption algorithm aes_ccm_16; official name: aes_ccm_16, IKEv1 OAKLEY id: 16, IKEv1 ESP_INFO id: 16, IKEv2 id: 16
| IKEv1 OAKLEY ID id: 16 enum name: AES_CCM_16
| IKEv1 ESP ID id: 16 enum name: AES_CCM_C
| IKEv2 ID id: 16 enum name: AES_CCM_C
| encryption algorithm aes_ccm_12; official name: aes_ccm_12, IKEv1 OAKLEY id: 15, IKEv1 ESP_INFO id: 15, IKEv2 id: 15
| IKEv1 OAKLEY ID id: 15 enum name: AES_CCM_B
| IKEv1 ESP ID id: 15 enum name: AES_CCM_B
| IKEv2 ID id: 15 enum name: AES_CCM_B
| encryption algorithm aes_ccm_8; official name: aes_ccm_8, IKEv1 OAKLEY id: 14, IKEv1 ESP_INFO id: 14, IKEv2 id: 14
| IKEv1 OAKLEY ID id: 14 enum name: AES_CCM_A
| IKEv1 ESP ID id: 14 enum name: AES_CCM_A
| IKEv2 ID id: 14 enum name: AES_CCM_A
| encryption algorithm 3des_cbc; official name: 3des, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 3, IKEv2 id: 3
| IKEv1 OAKLEY ID id: 5 enum name: 3DES_CBC
| IKEv1 ESP ID id: 3 enum name: 3DES
| IKEv2 ID id: 3 enum name: 3DES
| encryption algorithm camellia_ctr; official name: camellia_ctr, IKEv1 OAKLEY id: 24, IKEv1 ESP_INFO id: 24, IKEv2 id: 24
| IKEv1 OAKLEY ID id: 24 enum name: CAMELLIA_CTR
| IKEv1 ESP ID id: 24 enum name: CAMELLIA_CTR
| IKEv2 ID id: 24 enum name: CAMELLIA_CTR
| encryption algorithm camellia; official name: camellia, IKEv1 OAKLEY id: 8, IKEv1 ESP_INFO id: 22, IKEv2 id: 23
| IKEv1 OAKLEY ID id: 8 enum name: CAMELLIA_CBC
| IKEv1 ESP ID id: 22 enum name: CAMELLIA
| IKEv2 ID id: 23 enum name: CAMELLIA_CBC
| encryption algorithm aes_gcm_16; official name: aes_gcm_16, IKEv1 OAKLEY id: 20, IKEv1 ESP_INFO id: 20, IKEv2 id: 20
| IKEv1 OAKLEY ID id: 20 enum name: AES_GCM_C
| IKEv1 ESP ID id: 20 enum name: AES_GCM_C
| IKEv2 ID id: 20 enum name: AES_GCM_C
| encryption algorithm aes_gcm_12; official name: aes_gcm_12, IKEv1 OAKLEY id: 19, IKEv1 ESP_INFO id: 19, IKEv2 id: 19
| IKEv1 OAKLEY ID id: 19 enum name: AES_GCM_B
| IKEv1 ESP ID id: 19 enum name: AES_GCM_B
| IKEv2 ID id: 19 enum name: AES_GCM_B
| encryption algorithm aes_gcm_8; official name: aes_gcm, IKEv1 OAKLEY id: 18, IKEv1 ESP_INFO id: 18, IKEv2 id: 18
| IKEv1 OAKLEY ID id: 18 enum name: AES_GCM_A
| IKEv1 ESP ID id: 18 enum name: AES_GCM_A
| IKEv2 ID id: 18 enum name: AES_GCM_A
| encryption algorithm aes_ctr; official name: aes_ctr, IKEv1 OAKLEY id: 13, IKEv1 ESP_INFO id: 13, IKEv2 id: 13
| IKEv1 OAKLEY ID id: 13 enum name: AES_CTR
| IKEv1 ESP ID id: 13 enum name: AES_CTR
| IKEv2 ID id: 13 enum name: AES_CTR
| encryption algorithm aes; official name: aes, IKEv1 OAKLEY id: 7, IKEv1 ESP_INFO id: 12, IKEv2 id: 12
| IKEv1 OAKLEY ID id: 7 enum name: AES_CBC
| IKEv1 ESP ID id: 12 enum name: AES
| IKEv2 ID id: 12 enum name: AES_CBC
| encryption algorithm serpent; official name: serpent, IKEv1 OAKLEY id: 65004, IKEv1 ESP_INFO id: 252, IKEv2 id: 65004
| IKEv1 OAKLEY ID id: 65004 enum name: SERPENT_CBC
| IKEv1 ESP ID id: 252 enum name: SERPENT
| IKEv2 ID id: 65004 enum name: SERPENT_CBC
| encryption algorithm twofish; official name: twofish, IKEv1 OAKLEY id: 65005, IKEv1 ESP_INFO id: 253, IKEv2 id: 65005
| IKEv1 OAKLEY ID id: 65005 enum name: TWOFISH_CBC
| IKEv1 ESP ID id: 253 enum name: TWOFISH
| IKEv2 ID id: 65005 enum name: TWOFISH_CBC
| encryption algorithm twofish_ssh; official name: twofish_ssh, IKEv1 OAKLEY id: 65289, IKEv1 ESP_INFO id: 0, IKEv2 id: 65289
| IKEv1 OAKLEY ID id: 65289 enum name: TWOFISH_CBC_SSH
| IKEv2 ID id: 65289 enum name: TWOFISH_CBC_SSH
| encryption algorithm cast; official name: cast, IKEv1 OAKLEY id: 6, IKEv1 ESP_INFO id: 6, IKEv2 id: 6
| IKEv1 OAKLEY ID id: 6 enum name: CAST_CBC
| IKEv1 ESP ID id: 6 enum name: CAST
| IKEv2 ID id: 6 enum name: CAST
| encryption algorithm null; official name: null, IKEv1 OAKLEY id: 0, IKEv1 ESP_INFO id: 11, IKEv2 id: 11
| IKEv1 ESP ID id: 11 enum name: NULL
| IKEv2 ID id: 11 enum name: NULL
Encryption algorithms:
  aes_ccm_16    IKEv1:     ESP     IKEv2:     ESP     FIPS  {256,192,*128}  (aes_ccm aes_ccm_c)
  aes_ccm_12    IKEv1:     ESP     IKEv2:     ESP     FIPS  {256,192,*128}  (aes_ccm_b)
  aes_ccm_8     IKEv1:     ESP     IKEv2:     ESP     FIPS  {256,192,*128}  (aes_ccm_a)
  3des_cbc      IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  [*192]  (3des)
  camellia_ctr  IKEv1:     ESP     IKEv2:     ESP           {256,192,*128}
  camellia      IKEv1: IKE ESP     IKEv2: IKE ESP           {256,192,*128}  (camellia_cbc)
  aes_gcm_16    IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aes_gcm aes_gcm_c)
  aes_gcm_12    IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aes_gcm_b)
  aes_gcm_8     IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aes_gcm_a)
  aes_ctr       IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aesctr)
  aes           IKEv1: IKE ESP     IKEv2: IKE ESP     FIPS  {256,192,*128}  (aes_cbc)
  serpent       IKEv1: IKE ESP     IKEv2: IKE ESP           {256,192,*128}  (serpent_cbc)
  twofish       IKEv1: IKE ESP     IKEv2: IKE ESP           {256,192,*128}  (twofish_cbc)
  twofish_ssh   IKEv1: IKE         IKEv2: IKE ESP           {256,192,*128}  (twofish_cbc_ssh)
  cast          IKEv1:     ESP     IKEv2:     ESP           {*128}  (cast_cbc)
  null          IKEv1:     ESP     IKEv2:     ESP           []
| hash algorithm assertion checks
| hash algorithm md5; official name: md5, IKEv1 OAKLEY id: 1, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 1 enum name: MD5
| NSS: hash mechanism 210 derivation 390
| hash algorithm sha; official name: sha1, IKEv1 OAKLEY id: 2, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 2 enum name: SHA1
| NSS: hash mechanism 220 derivation 392
| hash algorithm sha2_256; official name: sha256, IKEv1 OAKLEY id: 4, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 4 enum name: SHA2_256
| NSS: hash mechanism 250 derivation 393
| hash algorithm sha2_384; official name: sha384, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 5 enum name: SHA2_384
| NSS: hash mechanism 260 derivation 394
| hash algorithm sha2_512; official name: sha512, IKEv1 OAKLEY id: 6, IKEv1 ESP_INFO id: 0, IKEv2 id: 0
| IKEv1 OAKLEY ID id: 6 enum name: SHA2_512
| NSS: hash mechanism 270 derivation 395
Hash algorithms:
  md5           IKEv1: IKE         IKEv2:                 
  sha           IKEv1: IKE         IKEv2:             FIPS  (sha1)
  sha2_256      IKEv1: IKE         IKEv2:             FIPS  (sha2 sha256)
  sha2_384      IKEv1: IKE         IKEv2:             FIPS  (sha384)
  sha2_512      IKEv1: IKE         IKEv2:             FIPS  (sha512)
| PRF algorithm assertion checks
| PRF algorithm md5; official name: md5, IKEv1 OAKLEY id: 1, IKEv1 ESP_INFO id: 0, IKEv2 id: 1
| IKEv1 OAKLEY ID id: 1 enum name: MD5
| IKEv2 ID id: 1 enum name: HMAC_MD5
| PRF algorithm sha; official name: sha1, IKEv1 OAKLEY id: 2, IKEv1 ESP_INFO id: 0, IKEv2 id: 2
| IKEv1 OAKLEY ID id: 2 enum name: SHA1
| IKEv2 ID id: 2 enum name: HMAC_SHA1
| PRF algorithm sha2_256; official name: sha256, IKEv1 OAKLEY id: 4, IKEv1 ESP_INFO id: 0, IKEv2 id: 5
| IKEv1 OAKLEY ID id: 4 enum name: SHA2_256
| IKEv2 ID id: 5 enum name: HMAC_SHA2_256
| PRF algorithm sha2_384; official name: sha384, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 0, IKEv2 id: 6
| IKEv1 OAKLEY ID id: 5 enum name: SHA2_384
| IKEv2 ID id: 6 enum name: HMAC_SHA2_384
| PRF algorithm sha2_512; official name: sha512, IKEv1 OAKLEY id: 6, IKEv1 ESP_INFO id: 0, IKEv2 id: 7
| IKEv1 OAKLEY ID id: 6 enum name: SHA2_512
| IKEv2 ID id: 7 enum name: HMAC_SHA2_512
PRF algorithms:
  md5           IKEv1: IKE         IKEv2: IKE               (hmac_md5)
  sha           IKEv1: IKE         IKEv2: IKE         FIPS  (sha1 hmac_sha1)
  sha2_256      IKEv1: IKE         IKEv2: IKE         FIPS  (sha2 sha256 hmac_sha2_256)
  sha2_384      IKEv1: IKE         IKEv2: IKE         FIPS  (sha384 hmac_sha2_384)
  sha2_512      IKEv1: IKE         IKEv2: IKE         FIPS  (sha512 hmac_sha2_512)
| integrity algorithm assertion checks
| integrity algorithm md5; official name: md5, IKEv1 OAKLEY id: 1, IKEv1 ESP_INFO id: 1, IKEv2 id: 1
| IKEv1 OAKLEY ID id: 1 enum name: MD5
| IKEv1 ESP ID id: 1 enum name: HMAC_MD5
| IKEv2 ID id: 1 enum name: HMAC_MD5_96
| integrity algorithm sha; official name: sha1, IKEv1 OAKLEY id: 2, IKEv1 ESP_INFO id: 2, IKEv2 id: 2
| IKEv1 OAKLEY ID id: 2 enum name: SHA1
| IKEv1 ESP ID id: 2 enum name: HMAC_SHA1
| IKEv2 ID id: 2 enum name: HMAC_SHA1_96
| integrity algorithm sha2_512; official name: sha512, IKEv1 OAKLEY id: 6, IKEv1 ESP_INFO id: 7, IKEv2 id: 14
| IKEv1 OAKLEY ID id: 6 enum name: SHA2_512
| IKEv1 ESP ID id: 7 enum name: HMAC_SHA2_512
| IKEv2 ID id: 14 enum name: HMAC_SHA2_512_256
| integrity algorithm sha2_384; official name: sha384, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 6, IKEv2 id: 13
| IKEv1 OAKLEY ID id: 5 enum name: SHA2_384
| IKEv1 ESP ID id: 6 enum name: HMAC_SHA2_384
| IKEv2 ID id: 13 enum name: HMAC_SHA2_384_192
| integrity algorithm sha2_256; official name: sha256, IKEv1 OAKLEY id: 4, IKEv1 ESP_INFO id: 5, IKEv2 id: 12
| IKEv1 OAKLEY ID id: 4 enum name: SHA2_256
| IKEv1 ESP ID id: 5 enum name: HMAC_SHA2_256
| IKEv2 ID id: 12 enum name: HMAC_SHA2_256_128
| integrity algorithm aes_xcbc; official name: aes_xcbc, IKEv1 OAKLEY id: 0, IKEv1 ESP_INFO id: 9, IKEv2 id: 5
| IKEv1 ESP ID id: 9 enum name: AES_XCBC
| IKEv2 ID id: 5 enum name: AES_XCBC_96
| integrity algorithm aes_cmac; official name: aes_cmac, IKEv1 OAKLEY id: 0, IKEv1 ESP_INFO id: 250, IKEv2 id: 8
| IKEv1 ESP ID id: 250 enum name: AES_CMAC_96
| IKEv2 ID id: 8 enum name: AES_CMAC_96
Integrity algorithms:
  md5           IKEv1: IKE ESP AH  IKEv2: IKE ESP AH        (hmac_md5 hmac_md5_96)
  sha           IKEv1: IKE ESP AH  IKEv2: IKE ESP AH  FIPS  (sha1 sha1_96 hmac_sha1 hmac_sha1_96)
  sha2_512      IKEv1: IKE ESP AH  IKEv2: IKE ESP AH  FIPS  (sha512 hmac_sha2_512 hmac_sha2_512_256)
  sha2_384      IKEv1: IKE ESP AH  IKEv2: IKE ESP AH  FIPS  (sha384 hmac_sha2_384 hmac_sha2_384_192)
  sha2_256      IKEv1: IKE ESP AH  IKEv2: IKE ESP AH  FIPS  (sha2 sha256 hmac_sha2_256 hmac_sha2_256_128)
  aes_xcbc      IKEv1:     ESP AH  IKEv2:     ESP AH  FIPS  (aes_xcbc_96)
  aes_cmac      IKEv1:     ESP AH  IKEv2:     ESP AH  FIPS  (aes_cmac_96)
| DH algorithm assertion checks
| DH algorithm MODP1024; official name: modp1024, IKEv1 OAKLEY id: 2, IKEv1 ESP_INFO id: 0, IKEv2 id: 2
| IKEv1 OAKLEY ID id: 2 enum name: MODP1024
| IKEv2 ID id: 2 enum name: MODP1024
| DH algorithm MODP1536; official name: modp1536, IKEv1 OAKLEY id: 5, IKEv1 ESP_INFO id: 0, IKEv2 id: 5
| IKEv1 OAKLEY ID id: 5 enum name: MODP1536
| IKEv2 ID id: 5 enum name: MODP1536
| DH algorithm MODP2048; official name: modp2048, IKEv1 OAKLEY id: 14, IKEv1 ESP_INFO id: 0, IKEv2 id: 14
| IKEv1 OAKLEY ID id: 14 enum name: MODP2048
| IKEv2 ID id: 14 enum name: MODP2048
| DH algorithm MODP3072; official name: modp3072, IKEv1 OAKLEY id: 15, IKEv1 ESP_INFO id: 0, IKEv2 id: 15
| IKEv1 OAKLEY ID id: 15 enum name: MODP3072
| IKEv2 ID id: 15 enum name: MODP3072
| DH algorithm MODP4096; official name: modp4096, IKEv1 OAKLEY id: 16, IKEv1 ESP_INFO id: 0, IKEv2 id: 16
| IKEv1 OAKLEY ID id: 16 enum name: MODP4096
| IKEv2 ID id: 16 enum name: MODP4096
| DH algorithm MODP6144; official name: modp6144, IKEv1 OAKLEY id: 17, IKEv1 ESP_INFO id: 0, IKEv2 id: 17
| IKEv1 OAKLEY ID id: 17 enum name: MODP6144
| IKEv2 ID id: 17 enum name: MODP6144
| DH algorithm MODP8192; official name: modp8192, IKEv1 OAKLEY id: 18, IKEv1 ESP_INFO id: 0, IKEv2 id: 18
| IKEv1 OAKLEY ID id: 18 enum name: MODP8192
| IKEv2 ID id: 18 enum name: MODP8192
| DH algorithm DH19; official name: dh19, IKEv1 OAKLEY id: 19, IKEv1 ESP_INFO id: 0, IKEv2 id: 19
| IKEv1 OAKLEY ID id: 19 enum name: ECP_256
| IKEv2 ID id: 19 enum name: ECP_256
| DH algorithm DH20; official name: dh20, IKEv1 OAKLEY id: 20, IKEv1 ESP_INFO id: 0, IKEv2 id: 20
| IKEv1 OAKLEY ID id: 20 enum name: ECP_384
| IKEv2 ID id: 20 enum name: ECP_384
| DH algorithm DH21; official name: dh21, IKEv1 OAKLEY id: 21, IKEv1 ESP_INFO id: 0, IKEv2 id: 21
| IKEv1 OAKLEY ID id: 21 enum name: ECP_521
| IKEv2 ID id: 21 enum name: ECP_521
| DH algorithm DH23; official name: dh23, IKEv1 OAKLEY id: 23, IKEv1 ESP_INFO id: 0, IKEv2 id: 23
| IKEv1 OAKLEY ID id: 23 enum name: DH23
| IKEv2 ID id: 23 enum name: DH23
| DH algorithm DH24; official name: dh24, IKEv1 OAKLEY id: 24, IKEv1 ESP_INFO id: 0, IKEv2 id: 24
| IKEv1 OAKLEY ID id: 24 enum name: DH24
| IKEv2 ID id: 24 enum name: DH24
DH algorithms:
  MODP1024      IKEv1: IKE         IKEv2: IKE               (dh2)
  MODP1536      IKEv1: IKE         IKEv2: IKE               (dh5)
  MODP2048      IKEv1: IKE         IKEv2: IKE         FIPS  (dh14)
  MODP3072      IKEv1: IKE         IKEv2: IKE         FIPS  (dh15)
  MODP4096      IKEv1: IKE         IKEv2: IKE         FIPS  (dh16)
  MODP6144      IKEv1: IKE         IKEv2: IKE         FIPS  (dh17)
  MODP8192      IKEv1: IKE         IKEv2: IKE         FIPS  (dh18)
  DH19          IKEv1: IKE         IKEv2: IKE         FIPS  (ecp_256)
  DH20          IKEv1: IKE         IKEv2: IKE         FIPS  (ecp_384)
  DH21          IKEv1: IKE         IKEv2: IKE         FIPS  (ecp_521)
  DH23          IKEv1: IKE         IKEv2: IKE         FIPS
  DH24          IKEv1: IKE         IKEv2: IKE         FIPS
| test_cbc_vector: Camellia: 16 bytes with 128-bit key
| decode_to_chunk: raw_key: input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c33428 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: camellia, mechanism: CAMELLIA_CBC(1362), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: CAMELLIA_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: CAMELLIA_CBC (0x00000552)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: ciphertext: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| decode_to_chunk: cipertext: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Camellia: 16 bytes with 128-bit key passed
| test_cbc_vector: Camellia: 16 bytes with 128-bit key
| decode_to_chunk: raw_key: input "0x00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF"
| decode_to_chunk: output: 
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c33428 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: camellia, mechanism: CAMELLIA_CBC(1362), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: CAMELLIA_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: CAMELLIA_CBC (0x00000552)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 "
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: ciphertext: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| decode_to_chunk: cipertext: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 "
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Camellia: 16 bytes with 128-bit key passed
| test_cbc_vector: Camellia: 16 bytes with 256-bit key
| decode_to_chunk: raw_key: input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f88 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: camellia, mechanism: CAMELLIA_CBC(1362), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 32, flags: 0x300 -> target: CAMELLIA_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 32 bytes, type/mechanism: CAMELLIA_CBC (0x00000552)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: ciphertext: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| decode_to_chunk: cipertext: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Camellia: 16 bytes with 256-bit key passed
| test_cbc_vector: Camellia: 16 bytes with 256-bit key
| decode_to_chunk: raw_key: input "0x00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF FF EE DD CC BB AA 99 88 77 66 55 44 33 22 11 00"
| decode_to_chunk: output: 
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
|   ff ee dd cc  bb aa 99 88  77 66 55 44  33 22 11 00
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f88 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
|   ff ee dd cc  bb aa 99 88  77 66 55 44  33 22 11 00
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: camellia, mechanism: CAMELLIA_CBC(1362), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 32, flags: 0x300 -> target: CAMELLIA_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 32 bytes, type/mechanism: CAMELLIA_CBC (0x00000552)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: ciphertext: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| decode_to_chunk: cipertext: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Camellia: 16 bytes with 256-bit key passed
| test_gcm_vector: enter
| decode_to_chunk: raw_key: input "0xcf063a34d4a9a76c2c86787d3f96db71"
| decode_to_chunk: output: 
|   cf 06 3a 34  d4 a9 a7 6c  2c 86 78 7d  3f 96 db 71
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c32b38 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   cf 06 3a 34  d4 a9 a7 6c  2c 86 78 7d  3f 96 db 71
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_GCM (0x00001087)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: salted IV: input "0x113b9785971864c83b01c787"
| decode_to_chunk: output: 
|   11 3b 97 85  97 18 64 c8  3b 01 c7 87
| decode_to_chunk: AAD: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: plaintext: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: ciphertext: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: tag: input "0x72ac8493e3a5228b5d130a69d2510e42"
| decode_to_chunk: output: 
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| test_gcm_vector: decrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=0 tag-size=16
| test_gcm_vector: text+tag on call
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| test_gcm_vector: encrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=0 tag-size=16
| test_gcm_vector: text+tag on call
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| test_gcm_vector: release sym_key-key@0x7f8c95c34d40
| test_gcm_vector: passed
| test_gcm_vector: enter
| decode_to_chunk: raw_key: input "0xe98b72a9881a84ca6b76e0f43e68647a"
| decode_to_chunk: output: 
|   e9 8b 72 a9  88 1a 84 ca  6b 76 e0 f4  3e 68 64 7a
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c38158 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   e9 8b 72 a9  88 1a 84 ca  6b 76 e0 f4  3e 68 64 7a
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_GCM (0x00001087)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: salted IV: input "0x8b23299fde174053f3d652ba"
| decode_to_chunk: output: 
|   8b 23 29 9f  de 17 40 53  f3 d6 52 ba
| decode_to_chunk: AAD: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: plaintext: input "0x28286a321293253c3e0aa2704a278032"
| decode_to_chunk: output: 
|   28 28 6a 32  12 93 25 3c  3e 0a a2 70  4a 27 80 32
| decode_to_chunk: ciphertext: input "0x5a3c1cf1985dbb8bed818036fdd5ab42"
| decode_to_chunk: output: 
|   5a 3c 1c f1  98 5d bb 8b  ed 81 80 36  fd d5 ab 42
| decode_to_chunk: tag: input "0x23c7ab0f952b7091cd324835043b5eb5"
| decode_to_chunk: output: 
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| test_gcm_vector: decrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=16 tag-size=16
| test_gcm_vector: text+tag on call
|   5a 3c 1c f1  98 5d bb 8b  ed 81 80 36  fd d5 ab 42
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   28 28 6a 32  12 93 25 3c  3e 0a a2 70  4a 27 80 32
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| test_gcm_vector: encrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=16 tag-size=16
| test_gcm_vector: text+tag on call
|   28 28 6a 32  12 93 25 3c  3e 0a a2 70  4a 27 80 32
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   5a 3c 1c f1  98 5d bb 8b  ed 81 80 36  fd d5 ab 42
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| test_gcm_vector: release sym_key-key@0x7f8c95c34d40
| test_gcm_vector: passed
| test_gcm_vector: enter
| decode_to_chunk: raw_key: input "0xbfd414a6212958a607a0f5d3ab48471d"
| decode_to_chunk: output: 
|   bf d4 14 a6  21 29 58 a6  07 a0 f5 d3  ab 48 47 1d
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37fe8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   bf d4 14 a6  21 29 58 a6  07 a0 f5 d3  ab 48 47 1d
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_GCM (0x00001087)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: salted IV: input "0x86d8ea0ab8e40dcc481cd0e2"
| decode_to_chunk: output: 
|   86 d8 ea 0a  b8 e4 0d cc  48 1c d0 e2
| decode_to_chunk: AAD: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: plaintext: input "0xa6b76a066e63392c9443e60272ceaeb9d25c991b0f2e55e2804e168c05ea591a"
| decode_to_chunk: output: 
|   a6 b7 6a 06  6e 63 39 2c  94 43 e6 02  72 ce ae b9
|   d2 5c 99 1b  0f 2e 55 e2  80 4e 16 8c  05 ea 59 1a
| decode_to_chunk: ciphertext: input "0x62171db33193292d930bf6647347652c1ef33316d7feca99d54f1db4fcf513f8"
| decode_to_chunk: output: 
|   62 17 1d b3  31 93 29 2d  93 0b f6 64  73 47 65 2c
|   1e f3 33 16  d7 fe ca 99  d5 4f 1d b4  fc f5 13 f8
| decode_to_chunk: tag: input "0xc28280aa5c6c7a8bd366f28c1cfd1f6e"
| decode_to_chunk: output: 
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| test_gcm_vector: decrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=32 tag-size=16
| test_gcm_vector: text+tag on call
|   62 17 1d b3  31 93 29 2d  93 0b f6 64  73 47 65 2c
|   1e f3 33 16  d7 fe ca 99  d5 4f 1d b4  fc f5 13 f8
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   a6 b7 6a 06  6e 63 39 2c  94 43 e6 02  72 ce ae b9
|   d2 5c 99 1b  0f 2e 55 e2  80 4e 16 8c  05 ea 59 1a
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| test_gcm_vector: encrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=32 tag-size=16
| test_gcm_vector: text+tag on call
|   a6 b7 6a 06  6e 63 39 2c  94 43 e6 02  72 ce ae b9
|   d2 5c 99 1b  0f 2e 55 e2  80 4e 16 8c  05 ea 59 1a
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   62 17 1d b3  31 93 29 2d  93 0b f6 64  73 47 65 2c
|   1e f3 33 16  d7 fe ca 99  d5 4f 1d b4  fc f5 13 f8
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| test_gcm_vector: release sym_key-key@0x7f8c95c34d40
| test_gcm_vector: passed
| test_gcm_vector: enter
| decode_to_chunk: raw_key: input "0x006c458100fc5f4d62949d2c833b82d1"
| decode_to_chunk: output: 
|   00 6c 45 81  00 fc 5f 4d  62 94 9d 2c  83 3b 82 d1
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c38068 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   00 6c 45 81  00 fc 5f 4d  62 94 9d 2c  83 3b 82 d1
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_GCM (0x00001087)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: salted IV: input "0xa4e9c4bc5725a21ff42c82b2"
| decode_to_chunk: output: 
|   a4 e9 c4 bc  57 25 a2 1f  f4 2c 82 b2
| decode_to_chunk: AAD: input "0x2efb14fb3657cdd6b9a8ff1a5f5a39b9"
| decode_to_chunk: output: 
|   2e fb 14 fb  36 57 cd d6  b9 a8 ff 1a  5f 5a 39 b9
| decode_to_chunk: plaintext: input "0xf381d3bfbee0a879f7a4e17b623278cedd6978053dd313530a18f1a836100950"
| decode_to_chunk: output: 
|   f3 81 d3 bf  be e0 a8 79  f7 a4 e1 7b  62 32 78 ce
|   dd 69 78 05  3d d3 13 53  0a 18 f1 a8  36 10 09 50
| decode_to_chunk: ciphertext: input "0xf39b4db3542d8542fb73fd2d66be568f26d7f814b3f87d1eceac3dd09a8d697e"
| decode_to_chunk: output: 
|   f3 9b 4d b3  54 2d 85 42  fb 73 fd 2d  66 be 56 8f
|   26 d7 f8 14  b3 f8 7d 1e  ce ac 3d d0  9a 8d 69 7e
| decode_to_chunk: tag: input "0x39f045cb23b698c925db134d56c5"
| decode_to_chunk: output: 
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| test_gcm_vector: decrypt: aad-size=16 salt-size=4 wire-IV-size=8 text-size=32 tag-size=14
| test_gcm_vector: text+tag on call
|   f3 9b 4d b3  54 2d 85 42  fb 73 fd 2d  66 be 56 8f
|   26 d7 f8 14  b3 f8 7d 1e  ce ac 3d d0  9a 8d 69 7e
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   f3 81 d3 bf  be e0 a8 79  f7 a4 e1 7b  62 32 78 ce
|   dd 69 78 05  3d d3 13 53  0a 18 f1 a8  36 10 09 50
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| test_gcm_vector: encrypt: aad-size=16 salt-size=4 wire-IV-size=8 text-size=32 tag-size=14
| test_gcm_vector: text+tag on call
|   f3 81 d3 bf  be e0 a8 79  f7 a4 e1 7b  62 32 78 ce
|   dd 69 78 05  3d d3 13 53  0a 18 f1 a8  36 10 09 50
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00
| verify_chunk_data: output ciphertext: ok
| verify_chunk_data: TAG: ok
| test_gcm_vector: text+tag on return
|   f3 9b 4d b3  54 2d 85 42  fb 73 fd 2d  66 be 56 8f
|   26 d7 f8 14  b3 f8 7d 1e  ce ac 3d d0  9a 8d 69 7e
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| test_gcm_vector: release sym_key-key@0x7f8c95c34d40
| test_gcm_vector: passed
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 128-bit key
| decode_to_chunk: raw_key: input "0x AE 68 52 F8 12 10 67 CC 4B F7 A5 76 55 77 F3 9E"
| decode_to_chunk: output: 
|   ae 68 52 f8  12 10 67 cc  4b f7 a5 76  55 77 f3 9e
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c33428 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   ae 68 52 f8  12 10 67 cc  4b f7 a5 76  55 77 f3 9e
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: input counter-block: : input "0x 00 00 00 30  00 00 00 00 00 00 00 00  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: Ciphertext: input "0x E4 09 5D 4F B7 A7 B3 79 2D 61 75 A3 26 13 11 B8"
| decode_to_chunk: output: 
|   e4 09 5d 4f  b7 a7 b3 79  2d 61 75 a3  26 13 11 b8
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 00 00 30  00 00 00 00 00 00 00 00  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x E4 09 5D 4F B7 A7 B3 79 2D 61 75 A3 26 13 11 B8"
| decode_to_chunk: output: 
|   e4 09 5d 4f  b7 a7 b3 79  2d 61 75 a3  26 13 11 b8
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 128-bit key passed
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 128-bit key
| decode_to_chunk: raw_key: input "0x 7E 24 06 78 17 FA E0 D7 43 D6 CE 1F 32 53 91 63"
| decode_to_chunk: output: 
|   7e 24 06 78  17 fa e0 d7  43 d6 ce 1f  32 53 91 63
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f38 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   7e 24 06 78  17 fa e0 d7  43 d6 ce 1f  32 53 91 63
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: input counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 01"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: Ciphertext: input "0x51 04 A1 06 16 8A 72 D9 79 0D 41 EE 8E DA D3 88EB 2E 1E FC 46 DA 57 C8 FC E6 30 DF 91 41 BE 28"
| decode_to_chunk: output: 
|   51 04 a1 06  16 8a 72 d9  79 0d 41 ee  8e da d3 88
|   eb 2e 1e fc  46 da 57 c8  fc e6 30 df  91 41 be 28
| decode_to_chunk: expected counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 03"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 01"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x51 04 A1 06 16 8A 72 D9 79 0D 41 EE 8E DA D3 88EB 2E 1E FC 46 DA 57 C8 FC E6 30 DF 91 41 BE 28"
| decode_to_chunk: output: 
|   51 04 a1 06  16 8a 72 d9  79 0d 41 ee  8e da d3 88
|   eb 2e 1e fc  46 da 57 c8  fc e6 30 df  91 41 be 28
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: expected counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 03"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 128-bit key passed
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 128-bit key
| decode_to_chunk: raw_key: input "0x 76 91 BE 03 5E 50 20 A8 AC 6E 61 85 29 F9 A0 DC"
| decode_to_chunk: output: 
|   76 91 be 03  5e 50 20 a8  ac 6e 61 85  29 f9 a0 dc
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f38 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   76 91 be 03  5e 50 20 a8  ac 6e 61 85  29 f9 a0 dc
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: input counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 01"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: Ciphertext: input "0xC1 CF 48 A8 9F 2F FD D9 CF 46 52 E9 EF DB 72 D745 40 A4 2B DE 6D 78 36 D5 9A 5C EA AE F3 10 5325 B2 07 2F"
| decode_to_chunk: output: 
|   c1 cf 48 a8  9f 2f fd d9  cf 46 52 e9  ef db 72 d7
|   45 40 a4 2b  de 6d 78 36  d5 9a 5c ea  ae f3 10 53
|   25 b2 07 2f
| decode_to_chunk: expected counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 04"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 01"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 01
| decode_to_chunk: Ciphertext: input "0xC1 CF 48 A8 9F 2F FD D9 CF 46 52 E9 EF DB 72 D745 40 A4 2B DE 6D 78 36 D5 9A 5C EA AE F3 10 5325 B2 07 2F"
| decode_to_chunk: output: 
|   c1 cf 48 a8  9f 2f fd d9  cf 46 52 e9  ef db 72 d7
|   45 40 a4 2b  de 6d 78 36  d5 9a 5c ea  ae f3 10 53
|   25 b2 07 2f
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: expected counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 04"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 128-bit key passed
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 192-bit key
| decode_to_chunk: raw_key: input "0x16 AF 5B 14 5F C9 F5 79 C1 75 F9 3E 3B FB 0E ED86 3D 06 CC FD B7 85 15"
| decode_to_chunk: output: 
|   16 af 5b 14  5f c9 f5 79  c1 75 f9 3e  3b fb 0e ed
|   86 3d 06 cc  fd b7 85 15
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f88 (24 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   16 af 5b 14  5f c9 f5 79  c1 75 f9 3e  3b fb 0e ed
|   86 3d 06 cc  fd b7 85 15
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 24, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 24 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: input counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 01
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: Ciphertext: input "0x 4B 55 38 4F E2 59 C9 C8 4E 79 35 A0 03 CB E9 28"
| decode_to_chunk: output: 
|   4b 55 38 4f  e2 59 c9 c8  4e 79 35 a0  03 cb e9 28
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x 4B 55 38 4F E2 59 C9 C8 4E 79 35 A0 03 CB E9 28"
| decode_to_chunk: output: 
|   4b 55 38 4f  e2 59 c9 c8  4e 79 35 a0  03 cb e9 28
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 192-bit key passed
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 192-bit key
| decode_to_chunk: raw_key: input "0x7C 5C B2 40 1B 3D C3 3C 19 E7 34 08 19 E0 F6 9C67 8C 3D B8 E6 F6 A9 1A"
| decode_to_chunk: output: 
|   7c 5c b2 40  1b 3d c3 3c  19 e7 34 08  19 e0 f6 9c
|   67 8c 3d b8  e6 f6 a9 1a
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f88 (24 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   7c 5c b2 40  1b 3d c3 3c  19 e7 34 08  19 e0 f6 9c
|   67 8c 3d b8  e6 f6 a9 1a
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 24, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 24 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: input counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 01"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: Ciphertext: input "0x45 32 43 FC 60 9B 23 32 7E DF AA FA 71 31 CD 9F84 90 70 1C 5A D4 A7 9C FC 1F E0 FF 42 F4 FB 00"
| decode_to_chunk: output: 
|   45 32 43 fc  60 9b 23 32  7e df aa fa  71 31 cd 9f
|   84 90 70 1c  5a d4 a7 9c  fc 1f e0 ff  42 f4 fb 00
| decode_to_chunk: expected counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 03"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 01"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x45 32 43 FC 60 9B 23 32 7E DF AA FA 71 31 CD 9F84 90 70 1C 5A D4 A7 9C FC 1F E0 FF 42 F4 FB 00"
| decode_to_chunk: output: 
|   45 32 43 fc  60 9b 23 32  7e df aa fa  71 31 cd 9f
|   84 90 70 1c  5a d4 a7 9c  fc 1f e0 ff  42 f4 fb 00
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: expected counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 03"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 192-bit key passed
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 192-bit key
| decode_to_chunk: raw_key: input "0x02 BF 39 1E E8 EC B1 59 B9 59 61 7B 09 65 27 9BF5 9B 60 A7 86 D3 E0 FE"
| decode_to_chunk: output: 
|   02 bf 39 1e  e8 ec b1 59  b9 59 61 7b  09 65 27 9b
|   f5 9b 60 a7  86 d3 e0 fe
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f88 (24 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   02 bf 39 1e  e8 ec b1 59  b9 59 61 7b  09 65 27 9b
|   f5 9b 60 a7  86 d3 e0 fe
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 24, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 40 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 24 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: input counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 01"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: Ciphertext: input "0x96 89 3F C5 5E 5C 72 2F 54 0B 7D D1 DD F7 E7 58D2 88 BC 95 C6 91 65 88 45 36 C8 11 66 2F 21 88AB EE 09 35"
| decode_to_chunk: output: 
|   96 89 3f c5  5e 5c 72 2f  54 0b 7d d1  dd f7 e7 58
|   d2 88 bc 95  c6 91 65 88  45 36 c8 11  66 2f 21 88
|   ab ee 09 35
| decode_to_chunk: expected counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 04"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 01"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x96 89 3F C5 5E 5C 72 2F 54 0B 7D D1 DD F7 E7 58D2 88 BC 95 C6 91 65 88 45 36 C8 11 66 2F 21 88AB EE 09 35"
| decode_to_chunk: output: 
|   96 89 3f c5  5e 5c 72 2f  54 0b 7d d1  dd f7 e7 58
|   d2 88 bc 95  c6 91 65 88  45 36 c8 11  66 2f 21 88
|   ab ee 09 35
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: expected counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 04"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 192-bit key passed
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 256-bit key
| decode_to_chunk: raw_key: input "0x77 6B EF F2 85 1D B0 6F 4C 8A 05 42 C8 69 6F 6C6A 81 AF 1E EC 96 B4 D3 7F C1 D6 89 E6 C1 C1 04"
| decode_to_chunk: output: 
|   77 6b ef f2  85 1d b0 6f  4c 8a 05 42  c8 69 6f 6c
|   6a 81 af 1e  ec 96 b4 d3  7f c1 d6 89  e6 c1 c1 04
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f88 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   77 6b ef f2  85 1d b0 6f  4c 8a 05 42  c8 69 6f 6c
|   6a 81 af 1e  ec 96 b4 d3  7f c1 d6 89  e6 c1 c1 04
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 32, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 32 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: input counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 01
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: Ciphertext: input "0x 14 5A D0 1D BF 82 4E C7 56 08 63 DC 71 E3 E0 C0"
| decode_to_chunk: output: 
|   14 5a d0 1d  bf 82 4e c7  56 08 63 dc  71 e3 e0 c0
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x 14 5A D0 1D BF 82 4E C7 56 08 63 DC 71 E3 E0 C0"
| decode_to_chunk: output: 
|   14 5a d0 1d  bf 82 4e c7  56 08 63 dc  71 e3 e0 c0
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 256-bit key passed
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 256-bit key
| decode_to_chunk: raw_key: input "0xF6 D6 6D 6B D5 2D 59 BB 07 96 36 58 79 EF F8 86C6 6D D5 1A 5B 6A 99 74 4B 50 59 0C 87 A2 38 84"
| decode_to_chunk: output: 
|   f6 d6 6d 6b  d5 2d 59 bb  07 96 36 58  79 ef f8 86
|   c6 6d d5 1a  5b 6a 99 74  4b 50 59 0c  87 a2 38 84
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f88 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   f6 d6 6d 6b  d5 2d 59 bb  07 96 36 58  79 ef f8 86
|   c6 6d d5 1a  5b 6a 99 74  4b 50 59 0c  87 a2 38 84
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 32, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 32 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: input counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 01"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: Ciphertext: input "0xF0 5E 23 1B 38 94 61 2C 49 EE 00 0B 80 4E B2 A9B8 30 6B 50 8F 83 9D 6A 55 30 83 1D 93 44 AF 1C"
| decode_to_chunk: output: 
|   f0 5e 23 1b  38 94 61 2c  49 ee 00 0b  80 4e b2 a9
|   b8 30 6b 50  8f 83 9d 6a  55 30 83 1d  93 44 af 1c
| decode_to_chunk: expected counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 03"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 01"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 01
| decode_to_chunk: Ciphertext: input "0xF0 5E 23 1B 38 94 61 2C 49 EE 00 0B 80 4E B2 A9B8 30 6B 50 8F 83 9D 6A 55 30 83 1D 93 44 AF 1C"
| decode_to_chunk: output: 
|   f0 5e 23 1b  38 94 61 2c  49 ee 00 0b  80 4e b2 a9
|   b8 30 6b 50  8f 83 9d 6a  55 30 83 1d  93 44 af 1c
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: expected counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 03"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 256-bit key passed
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 256-bit key
| decode_to_chunk: raw_key: input "0xFF 7A 61 7C E6 91 48 E4 F1 72 6E 2F 43 58 1D E2AA 62 D9 F8 05 53 2E DF F1 EE D6 87 FB 54 15 3D"
| decode_to_chunk: output: 
|   ff 7a 61 7c  e6 91 48 e4  f1 72 6e 2f  43 58 1d e2
|   aa 62 d9 f8  05 53 2e df  f1 ee d6 87  fb 54 15 3d
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37f88 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   ff 7a 61 7c  e6 91 48 e4  f1 72 6e 2f  43 58 1d e2
|   aa 62 d9 f8  05 53 2e df  f1 ee d6 87  fb 54 15 3d
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes_ctr, mechanism: AES_CTR(4230), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 32, flags: 0x300 -> target: AES_CTR
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 32 bytes, type/mechanism: AES_CTR (0x00001086)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: input counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 01"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: Ciphertext: input "0xEB 6C 52 82 1D 0B BB F7 CE 75 94 46 2A CA 4F AAB4 07 DF 86 65 69 FD 07 F4 8C C0 B5 83 D6 07 1F1E C0 E6 B8"
| decode_to_chunk: output: 
|   eb 6c 52 82  1d 0b bb f7  ce 75 94 46  2a ca 4f aa
|   b4 07 df 86  65 69 fd 07  f4 8c c0 b5  83 d6 07 1f
|   1e c0 e6 b8
| decode_to_chunk: expected counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 04"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 01"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 01
| decode_to_chunk: Ciphertext: input "0xEB 6C 52 82 1D 0B BB F7 CE 75 94 46 2A CA 4F AAB4 07 DF 86 65 69 FD 07 F4 8C C0 B5 83 D6 07 1F1E C0 E6 B8"
| decode_to_chunk: output: 
|   eb 6c 52 82  1d 0b bb f7  ce 75 94 46  2a ca 4f aa
|   b4 07 df 86  65 69 fd 07  f4 8c c0 b5  83 d6 07 1f
|   1e c0 e6 b8
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: expected counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 04"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: counter-block: ok
| test_ctr_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 256-bit key passed
| test_cbc_vector: Encrypting 16 bytes (1 block) using AES-CBC with 128-bit key
| decode_to_chunk: raw_key: input "0x06a9214036b8a15b512e03d534120006"
| decode_to_chunk: output: 
|   06 a9 21 40  36 b8 a1 5b  51 2e 03 d5  34 12 00 06
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37fe8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   06 a9 21 40  36 b8 a1 5b  51 2e 03 d5  34 12 00 06
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes, mechanism: AES_CBC(4226), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_CBC (0x00001082)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: IV: : input "0x3dafba429d9eb430b422da802c9fac41"
| decode_to_chunk: output: 
|   3d af ba 42  9d 9e b4 30  b4 22 da 80  2c 9f ac 41
| decode_to_chunk: new IV: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| decode_to_chunk: plaintext: : input "Single block msg"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: ciphertext: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x3dafba429d9eb430b422da802c9fac41"
| decode_to_chunk: output: 
|   3d af ba 42  9d 9e b4 30  b4 22 da 80  2c 9f ac 41
| decode_to_chunk: new IV: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| decode_to_chunk: cipertext: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| decode_to_chunk: plaintext: : input "Single block msg"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 16 bytes (1 block) using AES-CBC with 128-bit key passed
| test_cbc_vector: Encrypting 32 bytes (2 blocks) using AES-CBC with 128-bit key
| decode_to_chunk: raw_key: input "0xc286696d887c9aa0611bbb3e2025a45a"
| decode_to_chunk: output: 
|   c2 86 69 6d  88 7c 9a a0  61 1b bb 3e  20 25 a4 5a
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37fe8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   c2 86 69 6d  88 7c 9a a0  61 1b bb 3e  20 25 a4 5a
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes, mechanism: AES_CBC(4226), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_CBC (0x00001082)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: IV: : input "0x562e17996d093d28ddb3ba695a2e6f58"
| decode_to_chunk: output: 
|   56 2e 17 99  6d 09 3d 28  dd b3 ba 69  5a 2e 6f 58
| decode_to_chunk: new IV: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| decode_to_chunk: plaintext: : input "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: ciphertext: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x562e17996d093d28ddb3ba695a2e6f58"
| decode_to_chunk: output: 
|   56 2e 17 99  6d 09 3d 28  dd b3 ba 69  5a 2e 6f 58
| decode_to_chunk: new IV: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| decode_to_chunk: cipertext: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| decode_to_chunk: plaintext: : input "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 32 bytes (2 blocks) using AES-CBC with 128-bit key passed
| test_cbc_vector: Encrypting 48 bytes (3 blocks) using AES-CBC with 128-bit key
| decode_to_chunk: raw_key: input "0x6c3ea0477630ce21a2ce334aa746c2cd"
| decode_to_chunk: output: 
|   6c 3e a0 47  76 30 ce 21  a2 ce 33 4a  a7 46 c2 cd
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37fe8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   6c 3e a0 47  76 30 ce 21  a2 ce 33 4a  a7 46 c2 cd
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes, mechanism: AES_CBC(4226), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_CBC (0x00001082)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: IV: : input "0xc782dc4c098c66cbd9cd27d825682c81"
| decode_to_chunk: output: 
|   c7 82 dc 4c  09 8c 66 cb  d9 cd 27 d8  25 68 2c 81
| decode_to_chunk: new IV: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| decode_to_chunk: plaintext: : input "This is a 48-byte message (exactly 3 AES blocks)"
| decode_to_chunk: output: 
|   54 68 69 73  20 69 73 20  61 20 34 38  2d 62 79 74
|   65 20 6d 65  73 73 61 67  65 20 28 65  78 61 63 74
|   6c 79 20 33  20 41 45 53  20 62 6c 6f  63 6b 73 29
| decode_to_chunk: ciphertext: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0xc782dc4c098c66cbd9cd27d825682c81"
| decode_to_chunk: output: 
|   c7 82 dc 4c  09 8c 66 cb  d9 cd 27 d8  25 68 2c 81
| decode_to_chunk: new IV: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| decode_to_chunk: cipertext: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| decode_to_chunk: plaintext: : input "This is a 48-byte message (exactly 3 AES blocks)"
| decode_to_chunk: output: 
|   54 68 69 73  20 69 73 20  61 20 34 38  2d 62 79 74
|   65 20 6d 65  73 73 61 67  65 20 28 65  78 61 63 74
|   6c 79 20 33  20 41 45 53  20 62 6c 6f  63 6b 73 29
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 48 bytes (3 blocks) using AES-CBC with 128-bit key passed
| test_cbc_vector: Encrypting 64 bytes (4 blocks) using AES-CBC with 128-bit key
| decode_to_chunk: raw_key: input "0x56e47a38c5598974bc46903dba290349"
| decode_to_chunk: output: 
|   56 e4 7a 38  c5 59 89 74  bc 46 90 3d  ba 29 03 49
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c95c37fe8 (16 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   56 e4 7a 38  c5 59 89 74  bc 46 90 3d  ba 29 03 49
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey symkey for NSS algorithm: aes, mechanism: AES_CBC(4226), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 16, flags: 0x300 -> target: AES_CBC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c34d40, size: 16 bytes, type/mechanism: AES_CBC (0x00001082)
| symkey: release tmp-key@0x7f8c95c365c0
| decode_to_chunk: IV: : input "0x8ce82eefbea0da3c44699ed7db51b7d9"
| decode_to_chunk: output: 
|   8c e8 2e ef  be a0 da 3c  44 69 9e d7  db 51 b7 d9
| decode_to_chunk: new IV: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| decode_to_chunk: plaintext: : input "0xa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf"
| decode_to_chunk: output: 
|   a0 a1 a2 a3  a4 a5 a6 a7  a8 a9 aa ab  ac ad ae af
|   b0 b1 b2 b3  b4 b5 b6 b7  b8 b9 ba bb  bc bd be bf
|   c0 c1 c2 c3  c4 c5 c6 c7  c8 c9 ca cb  cc cd ce cf
|   d0 d1 d2 d3  d4 d5 d6 d7  d8 d9 da db  dc dd de df
| decode_to_chunk: ciphertext: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: encrypt: ok
| verify_chunk_data: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x8ce82eefbea0da3c44699ed7db51b7d9"
| decode_to_chunk: output: 
|   8c e8 2e ef  be a0 da 3c  44 69 9e d7  db 51 b7 d9
| decode_to_chunk: new IV: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| decode_to_chunk: cipertext: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| decode_to_chunk: plaintext: : input "0xa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf"
| decode_to_chunk: output: 
|   a0 a1 a2 a3  a4 a5 a6 a7  a8 a9 aa ab  ac ad ae af
|   b0 b1 b2 b3  b4 b5 b6 b7  b8 b9 ba bb  bc bd be bf
|   c0 c1 c2 c3  c4 c5 c6 c7  c8 c9 ca cb  cc cd ce cf
|   d0 d1 d2 d3  d4 d5 d6 d7  d8 d9 da db  dc dd de df
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| verify_chunk_data: decrypt: ok
| verify_chunk_data: updated CBC IV: ok
| test_cbc_vector: release sym_key-key@0x7f8c95c34d40
| test_ctr_vector: Encrypting 64 bytes (4 blocks) using AES-CBC with 128-bit key passed
starting up 1 crypto helpers
started thread for crypto helper 0 (master fd 11)
| setup helper callback for master fd 11
Using Linux XFRM/NETKEY IPsec interface code on 4.0.4-301.fc22.x86_64
| process 2270 listening for PF_KEY_V2 on file descriptor 15
| kernel_alg_init()
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=18(ESP_AES_GCM_A), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=19(ESP_AES_GCM_B), alg_ivlen=12, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=20(ESP_AES_GCM_C), alg_ivlen=16, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=14(ESP_AES_CCM_A), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=15(ESP_AES_CCM_B), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=16(ESP_AES_CCM_C), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| Registered AEAD AES CCM/GCM algorithms
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=250(AH_AES_CMAC_96), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| Registered new AUTH algorithms
| finish_pfkey_msg: K_SADB_REGISTER message 1 for AH 
|   02 07 00 02  02 00 00 00  01 00 00 00  de 08 00 00
| status value returned by setting the priority of this thread (crypto helper 0) 22
| crypto helper 0 waiting on fd 12
| pfkey_get: K_SADB_REGISTER message 1
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: sadb_msg_len=22 sadb_supported_len=72
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=251(AH_NULL), alg_ivlen=0, alg_minbits=0, alg_maxbits=0
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=2(AH_MD5), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=3(AH_SHA), alg_ivlen=0, alg_minbits=160, alg_maxbits=160
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=5(AH_SHA2_256), alg_ivlen=0, alg_minbits=256, alg_maxbits=256
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=6(AH_SHA2_384), alg_ivlen=0, alg_minbits=384, alg_maxbits=384
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=7(AH_SHA2_512), alg_ivlen=0, alg_minbits=512, alg_maxbits=512
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=8(AH_RIPEMD), alg_ivlen=0, alg_minbits=160, alg_maxbits=160
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=9(AH_AES_XCBC_MAC), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: sadb_msg_len=22 sadb_supported_len=88
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=11(ESP_NULL), alg_ivlen=0, alg_minbits=0, alg_maxbits=0
| kernel_alg_add(2,15,11) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=2(ESP_DES(UNUSED)), alg_ivlen=8, alg_minbits=64, alg_maxbits=64
| kernel_alg_add(2,15,2) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=3(ESP_3DES), alg_ivlen=8, alg_minbits=192, alg_maxbits=192
| kernel_alg_add(2,15,3) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=6(ESP_CAST), alg_ivlen=8, alg_minbits=40, alg_maxbits=128
| kernel_alg_add(2,15,6) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=7(ESP_BLOWFISH(UNUSED)), alg_ivlen=8, alg_minbits=40, alg_maxbits=448
| kernel_alg_add(2,15,7) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=12(ESP_AES), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(2,15,12) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=252(ESP_SERPENT), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(2,15,252) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=22(ESP_CAMELLIA), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(2,15,22) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=253(ESP_TWOFISH), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(2,15,253) fails because alg combo is invalid
| kernel_alg_add(): satype=2(SADB_SATYPE_AH), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=13(ESP_AES_CTR), alg_ivlen=8, alg_minbits=160, alg_maxbits=288
| kernel_alg_add(2,15,13) fails because alg combo is invalid
| AH registered with kernel.
| finish_pfkey_msg: K_SADB_REGISTER message 2 for ESP 
|   02 07 00 03  02 00 00 00  02 00 00 00  de 08 00 00
| pfkey_get: K_SADB_REGISTER message 2
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: sadb_msg_len=22 sadb_supported_len=72
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=251(AH_NULL), alg_ivlen=0, alg_minbits=0, alg_maxbits=0
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=251
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=2(AH_MD5), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=2
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=3(AH_SHA), alg_ivlen=0, alg_minbits=160, alg_maxbits=160
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=3
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=5(AH_SHA2_256), alg_ivlen=0, alg_minbits=256, alg_maxbits=256
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=5
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=6(AH_SHA2_384), alg_ivlen=0, alg_minbits=384, alg_maxbits=384
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=6
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=7(AH_SHA2_512), alg_ivlen=0, alg_minbits=512, alg_maxbits=512
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=7
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=8(AH_RIPEMD), alg_ivlen=0, alg_minbits=160, alg_maxbits=160
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=8
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=14(SADB_EXT_SUPPORTED_AUTH), alg_id=9(AH_AES_XCBC_MAC), alg_ivlen=0, alg_minbits=128, alg_maxbits=128
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=9
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: sadb_msg_len=22 sadb_supported_len=88
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=11(ESP_NULL), alg_ivlen=0, alg_minbits=0, alg_maxbits=0
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=2(ESP_DES(UNUSED)), alg_ivlen=8, alg_minbits=64, alg_maxbits=64
| kernel_alg_add(): Ignoring alg_id=2(ESP_DES(UNUSED)) - too weak
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=3(ESP_3DES), alg_ivlen=8, alg_minbits=192, alg_maxbits=192
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=6(ESP_CAST), alg_ivlen=8, alg_minbits=40, alg_maxbits=128
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=7(ESP_BLOWFISH(UNUSED)), alg_ivlen=8, alg_minbits=40, alg_maxbits=448
| kernel_alg_add(): Ignoring alg_id=7(ESP_BLOWFISH(UNUSED)) - too weak
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=12(ESP_AES), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=252(ESP_SERPENT), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=22(ESP_CAMELLIA), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=253(ESP_TWOFISH), alg_ivlen=8, alg_minbits=128, alg_maxbits=256
| kernel_alg_add(): satype=3(SADB_SATYPE_ESP), exttype=15(SADB_EXT_SUPPORTED_ENCRYPT), alg_id=13(ESP_AES_CTR), alg_ivlen=8, alg_minbits=160, alg_maxbits=288
| ESP registered with kernel.
| finish_pfkey_msg: K_SADB_REGISTER message 3 for IPCOMP 
|   02 07 00 09  02 00 00 00  03 00 00 00  de 08 00 00
| pfkey_get: K_SADB_REGISTER message 3
| IPCOMP registered with kernel.
| Registered AH, ESP and IPCOMP
| event_schedule called for 20 seconds
| event_schedule_tv: new EVENT_SHUNT_SCAN-pe@0x7f8c95c37e98
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| setup kernel fd callback
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8435 (length 11)
| vendor id hash md5 final bytes@0x7f8c95c38118 (length 16)
| vendor id  70 03 cb c1  09 7d be 9c  26 00 ba 69  83 bc 8b 35
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8441 (length 19)
| vendor id hash md5 final bytes@0x7f8c95c38158 (length 16)
| vendor id  1e 2b 51 69  05 99 1c 7d  7c 96 fc bf  b5 87 e4 61
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8458 (length 39)
| vendor id hash md5 final bytes@0x7f8c95c32b38 (length 16)
| vendor id  ad 2c 0d d0  b9 c3 20 83  cc ba 25 b8  86 1e c4 55
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8480 (length 6)
| vendor id hash md5 final bytes@0x7f8c95c38198 (length 16)
| vendor id  62 1b 04 bb  09 88 2a c1  e1 59 35 fe  fa 24 ae ee
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8487 (length 12)
| vendor id hash md5 final bytes@0x7f8c95c38378 (length 16)
| vendor id  05 41 82 a0  7c 7a e2 06  f9 d2 cf 9d  24 32 c4 82
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8494 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c384c8 (length 16)
| vendor id  b9 16 23 e6  93 ca 18 a5  4c 6a 27 78  55 23 05 e8
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e84a5 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c38508 (length 16)
| vendor id  54 30 88 8d  e0 1a 31 a6  fa 8f 60 22  4e 44 99 58
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e84b6 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c38548 (length 16)
| vendor id  7e e5 cb 85  f7 1c e2 59  c9 4a 5c 73  1e e4 e7 52
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e84c7 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c38588 (length 16)
| vendor id  63 d9 a1 a7  00 94 91 b5  a0 a6 fd eb  2a 82 84 f0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e84d8 (length 18)
| vendor id hash md5 final bytes@0x7f8c95c385c8 (length 16)
| vendor id  eb 4b 0d 96  27 6b 4e 22  0a d1 62 21  a7 b2 a5 e6
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e84f0 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38608 (length 16)
| vendor id  fb f4 76 14  98 40 31 fa  8e 3b b6 19  80 89 b2 23
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8528 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38648 (length 16)
| vendor id  19 52 dc 91  ac 20 f6 46  fb 01 cf 42  a3 3a ee 30
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8560 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38b58 (length 16)
| vendor id  e8 bf fa 64  3e 5c 8f 2c  d1 0f da 73  70 b6 eb e5
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8598 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38b98 (length 16)
| vendor id  c1 11 1b 2d  ee 8c bc 3d  62 05 73 ec  57 aa b9 cb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e85d0 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38bd8 (length 16)
| vendor id  09 ec 27 bf  bc 09 c7 58  23 cf ec bf  fe 56 5a 2e
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8608 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38c18 (length 16)
| vendor id  7f 21 a5 96  e4 e3 18 f0  b2 f4 94 4c  23 84 cb 84
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8640 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38c58 (length 16)
| vendor id  28 36 d1 fd  28 07 bc 9e  5a e3 07 86  32 04 51 ec
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8678 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38c98 (length 16)
| vendor id  a6 8d e7 56  a9 c5 22 9b  ae 66 49 80  40 95 1a d5
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e86b0 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38cd8 (length 16)
| vendor id  3f 23 72 86  7e 23 7c 1c  d8 25 0a 75  55 9c ae 20
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e86e8 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38d18 (length 16)
| vendor id  0e 58 d5 77  4d f6 02 00  7d 0b 02 44  36 60 f7 eb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8720 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38d58 (length 16)
| vendor id  f5 ce 31 eb  c2 10 f4 43  50 cf 71 26  5b 57 38 0f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8758 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38d98 (length 16)
| vendor id  f6 42 60 af  2e 27 42 da  dd d5 69 87  06 8a 99 a0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8790 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38dd8 (length 16)
| vendor id  7a 54 d3 bd  b3 b1 e6 d9  23 89 20 64  be 2d 98 1c
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e87c8 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38e18 (length 16)
| vendor id  9a a1 f3 b4  34 72 a4 5d  5f 50 6a eb  26 0c f2 14
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8800 (length 55)
| vendor id hash md5 final bytes@0x7f8c95c38e58 (length 16)
| vendor id  68 80 c7 d0  26 09 91 14  e4 86 c5 54  30 e7 ab ee
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e88e0 (length 41)
| vendor id hash md5 final bytes@0x7fff25258d20 (length 16)
| vendor id  44 76 1b d7  6b 80 85 41  74 87 ee 8a  51 cf fc f3
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8920 (length 53)
| vendor id hash md5 final bytes@0x7fff25258d20 (length 16)
| vendor id  b7 0e 8a c3  92 b1 6e 05  48 2f c4 dc  36 10 91 68
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8978 (length 58)
| vendor id hash md5 final bytes@0x7fff25258d20 (length 16)
| vendor id  97 1d ea 93  c3 c2 06 74  f9 ae 35 40  83 de 3e 2f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e89dc (length 14)
| vendor id hash md5 final bytes@0x7fff25258d20 (length 16)
| vendor id  08 72 0b ee  9e 28 95 3c  e0 8f 0a 18  b6 e2 9d da
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8a08 (length 37)
| vendor id hash md5 final bytes@0x7f8c95c39f08 (length 16)
| vendor id  27 ba b5 dc  01 ea 07 60  ea 4e 31 90  ac 27 c0 d0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8a30 (length 37)
| vendor id hash md5 final bytes@0x7f8c95c39f48 (length 16)
| vendor id  61 05 c4 22  e7 68 47 e4  3f 96 84 80  12 92 ae cd
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8a56 (length 10)
| vendor id hash md5 final bytes@0x7f8c95c39f88 (length 16)
| vendor id  50 76 0f 62  4c 63 e5 c5  3e ea 38 6c  68 5c a0 83
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8a68 (length 38)
| vendor id hash md5 final bytes@0x7f8c95c39fc8 (length 16)
| vendor id  6a 74 34 c1  9d 7e 36 34  80 90 a0 23  34 c9 c8 05
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8a8f (length 29)
| vendor id hash md5 final bytes@0x7f8c95c3a008 (length 16)
| vendor id  44 85 15 2d  18 b6 bb cd  0b e8 a8 46  95 79 dd cc
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8aad (length 29)
| vendor id hash md5 final bytes@0x7f8c95c3a048 (length 16)
| vendor id  16 f6 ca 16  e4 a4 06 6d  83 82 1a 0f  0a ea a8 62
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8acb (length 29)
| vendor id hash md5 final bytes@0x7f8c95c3a088 (length 16)
| vendor id  cd 60 46 43  35 df 21 f8  7c fd b2 fc  68 b6 a4 48
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8af0 (length 30)
| vendor id hash md5 final bytes@0x7f8c95c3a148 (length 16)
| vendor id  90 cb 80 91  3e bb 69 6e  08 63 81 b5  ec 42 7b 1f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8b30 (length 29)
| vendor id hash md5 final bytes@0x7f8c95c3a188 (length 16)
| vendor id  7d 94 19 a6  53 10 ca 6f  2c 17 9d 92  15 52 9d 56
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8b4e (length 29)
| vendor id hash md5 final bytes@0x7f8c95c3a1c8 (length 16)
| vendor id  99 09 b6 4e  ed 93 7c 65  73 de 52 ac  e9 52 fa 6b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8b6c (length 29)
| vendor id hash md5 final bytes@0x7f8c95c3a208 (length 16)
| vendor id  80 d0 bb 3d  ef 54 56 5e  e8 46 45 d4  c8 5c e3 ee
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8b8a (length 29)
| vendor id hash md5 final bytes@0x7f8c95c3a248 (length 16)
| vendor id  4d 1e 0e 13  6d ea fa 34  c4 f3 ea 9f  02 ec 72 85
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8ba8 (length 29)
| vendor id hash md5 final bytes@0x7f8c95c3a288 (length 16)
| vendor id  43 9b 59 f8  ba 67 6c 4c  77 37 ae 22  ea b8 f5 82
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8bc6 (length 29)
| vendor id hash md5 final bytes@0x7f8c95c3a2c8 (length 16)
| vendor id  8f 8d 83 82  6d 24 6b 6f  c7 a8 a6 a4  28 c1 1d e8
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8be4 (length 26)
| vendor id hash md5 final bytes@0x7f8c95c3a308 (length 16)
| vendor id  4d f3 79 28  e9 fc 4f d1  b3 26 21 70  d5 15 c6 62
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8bff (length 8)
| vendor id hash md5 final bytes@0x7f8c95c3a348 (length 16)
| vendor id  4a 13 1c 81  07 03 58 45  5c 57 28 f2  0e 95 45 2f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d07 (length 13)
| vendor id hash md5 final bytes@0x7f8c95c3a408 (length 16)
| vendor id  40 48 b7 d5  6e bc e8 85  25 e7 de 7f  00 d6 c2 d3
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d15 (length 19)
| vendor id hash md5 final bytes@0x7f8c95c3a498 (length 16)
| vendor id  26 24 4d 38  ed db 61 b3  17 2a 36 e3  d0 cf b8 19
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d30 (length 32)
| vendor id hash md5 final bytes@0x7f8c95c3a4d8 (length 16)
| vendor id  fb 1d e3 cd  f3 41 b7 ea  16 b7 e5 be  08 55 f1 20
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d51 (length 17)
| vendor id hash md5 final bytes@0x7f8c95c3a518 (length 16)
| vendor id  e3 a5 96 6a  76 37 9f e7  07 22 82 31  e5 ce 86 52
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d63 (length 14)
| vendor id hash md5 final bytes@0x7f8c95c3a558 (length 16)
| vendor id  21 4c a4 fa  ff a7 f3 2d  67 48 e5 30  33 95 ae 83
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d72 (length 10)
| vendor id hash md5 final bytes@0x7f8c95c3a598 (length 16)
| vendor id  88 2f e5 6d  6f d2 0d bc  22 51 61 3b  2e be 5b eb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d7d (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a5d8 (length 16)
| vendor id  2c e9 c9 46  a4 c8 79 bf  11 b5 0b 76  cc 56 92 cb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d8e (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a618 (length 16)
| vendor id  9d bb af cf  1d b0 dd 59  5a e0 65 29  40 03 ad 3e
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d9f (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a658 (length 16)
| vendor id  77 e8 ee a6  f5 56 a4 99  de 3f fe 7f  7f 95 66 1c
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8db0 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a698 (length 16)
| vendor id  b1 81 b1 8e  11 4f c2 09  b3 c6 e2 6c  3a 80 71 8e
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8dc1 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a6d8 (length 16)
| vendor id  1e f2 83 f8  35 49 b5 ff  96 08 b6 d6  34 f8 4d 75
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8dd2 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a798 (length 16)
| vendor id  dd 18 0d 21  e5 ce 65 5a  76 8b a3 22  11 dd 8a d9
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8de3 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a7d8 (length 16)
| vendor id  4c 90 13 69  46 57 7b 51  91 9d 8d 9a  6b 8e 4a 9f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8df4 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a818 (length 16)
| vendor id  ab 07 46 22  1c c8 fd 0d  52 38 f7 3a  9b 3d a5 57
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e05 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a858 (length 16)
| vendor id  47 94 ce f6  84 34 22 98  0d 1a 3d 06  af 41 c5 cd
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e16 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a898 (length 16)
| vendor id  d3 f1 c4 88  c3 68 17 5d  5f 40 a8 f5  ca 5f 5e 12
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e27 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a8d8 (length 16)
| vendor id  15 a1 ac e7  ee 52 fd df  ef 04 f9 28  db 2d d1 34
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e38 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a918 (length 16)
| vendor id  58 49 ab 6d  8b ea bd 6e  4d 09 e5 a3  b8 8c 08 9a
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e49 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a958 (length 16)
| vendor id  31 2f 9c b1  a6 b9 0e 19  de 75 28 c9  04 ac 30 87
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e5a (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a998 (length 16)
| vendor id  bf 0f bf 73  06 eb b7 82  70 42 d8 93  53 98 86 e2
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e6b (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3a9d8 (length 16)
| vendor id  d1 96 83 36  8a f4 b0 ed  c2 1c cd e9  82 b1 d1 b0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e7c (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3aa18 (length 16)
| vendor id  ea 84 0a a4  df c9 71 2d  6c 32 b5 a1  6e b3 29 a3
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e8d (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3aa58 (length 16)
| vendor id  66 a2 04 55  07 c1 19 da  78 a4 66 62  59 cd ea 48
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8e9e (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3aa98 (length 16)
| vendor id  78 fd d2 87  de f0 1a 3f  07 4b 53 69  ea b4 fd 1c
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8eaf (length 17)
| vendor id hash md5 final bytes@0x7f8c95c3aad8 (length 16)
| vendor id  bf 3a 89 ae  5b ef 8e 72  d4 4d ac 8b  b8 8d 7d 5f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8ec1 (length 17)
| vendor id hash md5 final bytes@0x7f8c95c3ab18 (length 16)
| vendor id  b7 bd 9f 2f  97 8e 32 59  a7 aa 9f 7a  13 96 ad 6c
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8ed3 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ab58 (length 16)
| vendor id  9f 68 90 13  25 a9 72 89  43 35 30 2a  95 31 ab 9f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8ee4 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ab98 (length 16)
| vendor id  ba b2 53 f4  cb 10 a8 10  8a 7c 92 7c  56 c8 78 86
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8ef5 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3abd8 (length 16)
| vendor id  2a 51 7d 0d  23 c3 7d 08  bc e7 c2 92  a0 21 7b 39
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f06 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ac18 (length 16)
| vendor id  2d 1f 40 61  18 fb d5 d2  84 74 79 1f  fa 00 48 8a
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f17 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ac58 (length 16)
| vendor id  8c 4a 3b cb  72 9b 11 f7  03 d2 2a 5b  39 64 0c a8
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f28 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ac98 (length 16)
| vendor id  3a 0d 4e 7c  a4 e4 92 ed  4d fe 47 6d  1a c6 01 8b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f39 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3acd8 (length 16)
| vendor id  fe 3f 49 70  6e 26 a9 fb  36 a8 7b fc  e9 ea 36 ce
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f4a (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ad18 (length 16)
| vendor id  4c 7e fa 31  b3 9e 51 04  32 a3 17 57  0d 97 bb b9
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f5b (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ad58 (length 16)
| vendor id  76 c7 2b fd  39 84 24 dd  00 1b 86 d0  01 2f e0 61
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f6c (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ad98 (length 16)
| vendor id  fb 46 41 ad  0e eb 2a 34  49 1d 15 f4  ef f5 10 63
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f7d (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3add8 (length 16)
| vendor id  29 99 32 27  7b 7d fe 38  2c e2 34 65  33 3a 7d 23
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f8e (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ae18 (length 16)
| vendor id  e3 7f 2d 5b  a8 9a 62 cd  20 2e e2 7d  ac 06 c8 a8
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8f9f (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ae58 (length 16)
| vendor id  32 f0 e9 b9  c0 6d fe 8c  9a d5 59 9a  63 69 71 a1
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8fb0 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3ae98 (length 16)
| vendor id  7f 50 cc 4e  bf 04 c2 d9  da 73 ab fd  69 b7 7a a2
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8fc1 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3aed8 (length 16)
| vendor id  a1 94 e2 aa  dd d0 ba fb  95 25 3d d9  6d c7 33 eb
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8fd2 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3af18 (length 16)
| vendor id  81 34 87 85  82 12 17 85  ba 65 ea 34  5d 6b a7 24
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8fe3 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3af58 (length 16)
| vendor id  07 fa 12 8e  47 54 f9 44  7b 1d d4 63  74 ee f3 60
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8ff4 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3af98 (length 16)
| vendor id  b9 27 f9 52  19 a0 fe 36  00 db a3 c1  18 2a e5 5f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9005 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3afd8 (length 16)
| vendor id  b2 86 0e 78  37 f7 11 be  f3 d0 ee b1  06 87 2d ed
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9016 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b018 (length 16)
| vendor id  5b 1c d6 fe  7d 05 0e da  6c 93 87 1c  10 7d b3 d2
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9027 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b058 (length 16)
| vendor id  66 af bc 12  bb fe 6c e1  08 b1 f6 9f  4b c9 17 b7
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9038 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b098 (length 16)
| vendor id  3f 32 66 49  9f fd bd 85  95 0e 70 22  98 06 28 44
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9049 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b0d8 (length 16)
| vendor id  1f 44 42 29  6b 83 d7 e3  3a 8b 45 20  9b a0 e5 90
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e905a (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b118 (length 16)
| vendor id  3c 5e ba 3d  85 64 92 8e  32 ae 43 c3  d9 92 4d ee
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e906b (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b158 (length 16)
| vendor id  3f 26 7e d6  21 ad a7 ee  6c 7d 88 93  cc b0 b1 4b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e907c (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b198 (length 16)
| vendor id  7a 6b f5 b7  df 89 64 2a  75 a7 8e f7  d6 57 c1 c0
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e908d (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b1d8 (length 16)
| vendor id  df 5b 1f 0f  1d 56 79 d9  f8 51 2b 16  c5 5a 60 65
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e909e (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b218 (length 16)
| vendor id  86 1c e5 eb  72 16 4b 19  0e 9e 62 9a  31 cf 49 01
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e90af (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b258 (length 16)
| vendor id  9a 4a 46 48  f6 0f 8e da  7c fc bf e2  71 ee 5b 7d
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e90c0 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b298 (length 16)
| vendor id  9e b3 d9 07  ed 7a da 4e  3c bc ac b9  17 ab c8 e4
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e90d1 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b2d8 (length 16)
| vendor id  48 5a 70 36  1b 44 33 b3  1d ea 1c 6b  e0 df 24 3e
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e90e2 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b318 (length 16)
| vendor id  98 2b 7a 06  3a 33 c1 43  a8 ea dc 88  24 9f 6b cc
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e90f3 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b358 (length 16)
| vendor id  e7 a3 fd 0c  6d 77 1a 8f  1b 8a 86 a4  16 9c 9e a4
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9104 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b398 (length 16)
| vendor id  75 b0 65 3c  b2 81 eb 26  d3 1e de 38  c8 e1 e2 28
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9115 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b3d8 (length 16)
| vendor id  e8 29 c8 81  49 ba b3 c0  ce e8 5d a6  0e 18 ae 9b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9126 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b418 (length 16)
| vendor id  42 a4 83 4c  92 ab 9a 77  77 06 3a fa  25 4b cb 69
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9137 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b458 (length 16)
| vendor id  f6 97 c1 af  cc 2e c8 dd  cd f9 9d c7  af 03 a6 7f
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9148 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b498 (length 16)
| vendor id  b8 f9 2b 2f  a2 d3 fe 5f  e1 58 34 4b  da 1c c6 ae
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e9159 (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b4d8 (length 16)
| vendor id  99 dc 7c c8  23 37 6b 3b  33 d0 43 57  89 6a e0 7b
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e916a (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b518 (length 16)
| vendor id  d9 11 8b 1e  9d e5 ef ce  d9 cc 9d 88  3f 21 68 ff
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e917b (length 16)
| vendor id hash md5 final bytes@0x7f8c95c3b558 (length 16)
| vendor id  85 b6 cb ec  48 0d 5c 8c  d9 88 2c 82  5a c2 c2 44
| vendor id hash md5 init
| vendor id md5 hasher: context 0x7f8c95c30cd0
| vendor id hash md5 digest data-bytes@0x7f8c950e8d07 (length 13)
| vendor id hash md5 final bytes@0x7f8c95c3b598 (length 16)
| vendor id  40 48 b7 d5  6e bc e8 85  25 e7 de 7f  00 d6 c2 d3
| selinux support is enabled.
| event_schedule called for 45562 seconds
| event_schedule_tv: new EVENT_LOG_DAILY-pe@0x7f8c95c43aa8
| event_schedule_tv called for about 45562 seconds and change
| inserting event EVENT_LOG_DAILY, timeout in 45562.000000 seconds
systemd watchdog for ipsec service configured with timeout of 200000000 usecs
watchdog: sending probes every 100 secs
| pluto_sd: executing action action: start(2), status 0
| event_schedule called for 100 seconds
| event_schedule_tv: new EVENT_SD_WATCHDOG-pe@0x7f8c95c43c38
| event_schedule_tv called for about 100 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 100.000000 seconds
| created addconn helper (pid:2402) using fork+execve
| Setting up events, loop start
| pluto_sd: executing action action: reloading(4), status 0
listening for IKE messages
| Inspecting interface lo 
| found lo with address 127.0.0.1
| Inspecting interface eth0 
| found eth0 with address 192.0.1.254
| Inspecting interface eth1 
| found eth1 with address 192.1.2.45
| Inspecting interface eth2 
| found eth2 with address 192.9.4.45
adding interface eth2/eth2 192.9.4.45:500
| NAT-Traversal: Trying sockopt style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for sockopt style NAT-T family IPv4
adding interface eth2/eth2 192.9.4.45:4500
adding interface eth1/eth1 192.1.2.45:500
| NAT-Traversal: Trying sockopt style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for sockopt style NAT-T family IPv4
adding interface eth1/eth1 192.1.2.45:4500
adding interface eth0/eth0 192.0.1.254:500
| NAT-Traversal: Trying sockopt style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for sockopt style NAT-T family IPv4
adding interface eth0/eth0 192.0.1.254:4500
adding interface lo/lo 127.0.0.1:500
| NAT-Traversal: Trying sockopt style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for sockopt style NAT-T family IPv4
adding interface lo/lo 127.0.0.1:4500
| setup callback for interface lo:4500 fd 24
| setup callback for interface lo:500 fd 23
| setup callback for interface eth0:4500 fd 22
| setup callback for interface eth0:500 fd 21
| setup callback for interface eth1:4500 fd 20
| setup callback for interface eth1:500 fd 19
| setup callback for interface eth2:4500 fd 18
| setup callback for interface eth2:500 fd 17
| certs and keys locked by 'free_preshared_secrets'
| certs and keys unlocked by 'free_preshard_secrets'
loading secrets from "/etc/ipsec.secrets"
| saving Modulus
| saving PublicExponent
| ignoring PrivateExponent
| ignoring Prime1
| ignoring Prime2
| ignoring Exponent1
| ignoring Exponent2
| ignoring Coefficient
| ignoring CKAIDNSS
| computed rsa CKAID  b4 9f 1a ac  9e 45 6e 79  29 c8 81 97  3a 0c 6a d3
| computed rsa CKAID  7f 0f 03 50
loaded private key for keyid: PPK_RSA:AQOm9dY/4
| certs and keys locked by 'process_secret'
| certs and keys unlocked by 'process_secret'
| pluto_sd: executing action action: ready(5), status 0
| k did NOT match
| n did NOT match
| e did NOT match
| extracting the RSA private key for west
| certs and keys locked by 'lsw_add_rsa_secret'
| certs and keys unlocked by 'lsw_add_rsa_secret'
| Added new connection san with policy RSASIG+ENCRYPT+TUNNEL+PFS+IKEV2_ALLOW+IKEV2_PROPOSE+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO
| loaded left certificate 'west'
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7f8c95c458d8
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7f8c95c5cae8
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7f8c95c4dd58
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7f8c95c4dda8
| get_pluto_gn_from_nss_cert: allocated pluto_gn 0x7f8c95c476b8
| unreference key: 0x7f8c95c2c658 C=CA, ST=Ontario, L=Toronto, O=Libreswan, OU=Test Department, CN=west.testing.libreswan.org, E=user-west@testing.libreswan.org cnt 1--
| unreference key: 0x7f8c95c4b5b8 @west.testing.libreswan.org cnt 1--
| counting wild cards for @west.testing.libreswan.org is 0
| counting wild cards for @NOTeast.testing.libreswan.org is 0
| connect_to_host_pair: 192.1.2.45:500 192.1.2.23:500 -> hp:none
added connection description "san"
| 192.1.2.45<192.1.2.45>[@west.testing.libreswan.org]...192.1.2.23<192.1.2.23>[@NOTeast.testing.libreswan.org]
| ike_life: 3600s; ipsec_life: 28800s; rekey_margin: 540s; rekey_fuzz: 100%; keyingtries: 0; replay_window: 32; policy: RSASIG+ENCRYPT+TUNNEL+PFS+IKEV2_ALLOW+IKEV2_PROPOSE+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO
| base debugging = raw+crypt+parsing+emitting+control+lifecycle+kernel+dns+oppo+controlmore+pfkey+nattraversal+x509+dpd+oppoinfo+impair-retransmits
| processing connection "san"
| empty esp_info, returning defaults
| creating state object #1 at 0x7f8c95c4fa48
| parent state #1: new => STATE_UNDEFINED(ignore)
| processing connection "san"
| inserting state object #1
| finding hash chain in state hash table
|   ICOOKIE:  bd 3e 5b 40  c7 67 f4 6e
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 24
| list 0x7f8c95320728 first entry (nil)
| inserted state 0x7f8c95c4fa48 entry 0x7f8c95c500c8 next (nil) prev-next 0x7f8c95320728 into list
| updated next entry is (nil)
| finding hash chain in icookie hash table
|   ICOOKIE:  bd 3e 5b 40  c7 67 f4 6e
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 24
| list 0x7f8c95320608 first entry (nil)
| inserted state 0x7f8c95c4fa48 entry 0x7f8c95c500e0 next (nil) prev-next 0x7f8c95320608 into list
| updated next entry is (nil)
| event_schedule called for 0 seconds
| event_schedule_tv: new EVENT_SO_DISCARD-pe@0x7f8c95c4f908
| event_schedule_tv called for about 0 seconds and change
| inserting event EVENT_SO_DISCARD, timeout in 0.000000 seconds for #1
| processing connection "san"
| parent state #1: STATE_UNDEFINED(ignore) => STATE_PARENT_I1(half-open-ike)
| ignore states: 0
| half-open-ike states: 1
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| Queuing pending IPsec SA negotiating with 192.1.2.23 "san" IKE SA #1 "san"
"san" #1: initiating v2 parent SA
| selecting default IKE proposals for initial initiator (selecting KE)
"san" #1: san IKE proposals for initial initiator (selecting KE): 1:IKE:ENCR=AES_GCM_C_256;PRF=HMAC_SHA2_512,HMAC_SHA2_256,HMAC_SHA1;INTEG=NONE;DH=MODP2048,MODP3072,MODP4096,MODP8192 2:IKE:ENCR=AES_GCM_C_128;PRF=HMAC_SHA2_512,HMAC_SHA2_256,HMAC_SHA1;INTEG=NONE;DH=MODP2048,MODP3072,MODP4096,MODP8192 3:IKE:ENCR=AES_CBC_256;PRF=HMAC_SHA2_512,HMAC_SHA2_256,HMAC_SHA1;INTEG=HMAC_SHA2_512_256,HMAC_SHA2_256_128,HMAC_SHA1_96;DH=MODP2048,MODP3072,MODP1536 4:IKE:ENCR=AES_CBC_128;PRF=HMAC_SHA2_512,HMAC_SHA2_256,HMAC_SHA1;INTEG=HMAC_SHA2_512_256,HMAC_SHA2_256_128,HMAC_SHA1_96;DH=MODP2048,MODP3072,MODP1536 (default)
| crypto helper 0: pcw_work: 0
| asking crypto helper 0 to do build KE and nonce; request ID 1 (len=2816, pcw_work=0)
| crypto helper 0 read fd: 12
| crypto helper 0 doing build KE and nonce; request ID 1
| NSS: Value of Prime:
|   ff ff ff ff  ff ff ff ff  c9 0f da a2  21 68 c2 34
|   c4 c6 62 8b  80 dc 1c d1  29 02 4e 08  8a 67 cc 74
|   02 0b be a6  3b 13 9b 22  51 4a 08 79  8e 34 04 dd
|   ef 95 19 b3  cd 3a 43 1b  30 2b 0a 6d  f2 5f 14 37
|   4f e1 35 6d  6d 51 c2 45  e4 85 b5 76  62 5e 7e c6
|   f4 4c 42 e9  a6 37 ed 6b  0b ff 5c b6  f4 06 b7 ed
|   ee 38 6b fb  5a 89 9f a5  ae 9f 24 11  7c 4b 1f e6
|   49 28 66 51  ec e4 5b 3d  c2 00 7c b8  a1 63 bf 05
|   98 da 48 36  1c 55 d3 9a  69 16 3f a8  fd 24 cf 5f
|   83 65 5d 23  dc a3 ad 96  1c 62 f3 56  20 85 52 bb
|   9e d5 29 07  70 96 96 6d  67 0c 35 4e  4a bc 98 04
|   f1 74 6c 08  ca 18 21 7c  32 90 5e 46  2e 36 ce 3b
|   e3 9e 77 2c  18 0e 86 03  9b 27 83 a2  ec 07 a2 8f
|   b5 c5 5d f0  6f 4c 52 c9  de 2b cb f6  95 58 17 18
|   39 95 49 7c  ea 95 6a e5  15 d2 26 18  98 fa 05 10
|   15 72 8e 5a  8a ac aa 68  ff ff ff ff  ff ff ff ff
| NSS: Value of base:  02
| NSS: Local DH MODP2048 public value (pointer): 0x7f8c95c4a250
| NSS: Local DH MODP2048 secret (pointer): 0x7f8c88001850
| NSS: Public DH wire value:
|   e8 a5 62 db  0a 22 31 df  5e a0 ed 39  c5 3e 0f d0
|   c7 11 7b 53  45 54 f3 98  06 14 88 c3  fd b9 1c 72
|   55 8f a4 81  b7 4a f6 53  53 57 a7 c7  1c 4e 50 74
|   9c 5f a4 84  f2 38 1e b0  c0 76 a2 ed  27 6e d9 31
|   41 10 4c ba  b0 df b1 40  44 47 79 8c  d4 ec c3 e0
|   c2 19 22 46  82 83 0d 7d  f2 9d a2 08  c4 2f 1b 11
|   18 0b 45 db  f8 7a 5e 61  7c 1e ae a5  15 c9 42 83
|   7e 34 95 0f  49 33 7b 1d  3c 68 bb c9  2d 06 b1 a2
|   00 e0 eb 83  1d 05 b8 78  a5 d5 17 36  86 f1 b8 85
|   c2 9e fb c5  0a fe 3d f2  a7 be 8d fa  7d e8 04 bc
|   1a b3 96 b4  ee 2d 86 70  af 5a 4a 02  d1 a6 df 6b
|   fe 8d d2 3b  67 2d b4 d4  ac bb d0 1e  d0 cd 71 e9
|   7e 35 49 cd  c1 22 a9 95  44 3a 63 13  38 1b de 10
|   dc 37 75 7f  b1 5c 3b 90  d6 8b 68 b3  10 1f a3 33
|   a7 7f 28 a6  7c 01 ce f4  a3 2e c2 61  4f 48 e5 1f
|   de 92 5b 0c  69 af a4 6a  20 8b 33 6b  19 92 fa e2
| Generated nonce:  c7 14 ec e0  84 14 95 1c  0c 61 de d3  23 15 fa c8
| Generated nonce:  ff d6 0f 15  ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69
| crypto helper 0 finished build KE and nonce; request ID 1 time elapsed 2646 usec
| #1 send_crypto_helper_request:642 st->st_calculating = TRUE;
| state #1 requesting EVENT_SO_DISCARD to be deleted
| delete_pluto_event: release EVENT_SO_DISCARD-pe@0x7f8c95c4f908
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_CRYPTO_FAILED-pe@0x7f8c95c4f908
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_CRYPTO_FAILED, timeout in 60.000000 seconds for #1
| crypto helper 0 has finished work (pcw_work now 1)
| crypto helper 0 replies to request ID 1
| calling continuation function 0x7f8c95038125
| ikev2_crypto_continue for #1: ikev2_outI1 KE
| processing connection "san"
| #1 ikev2_crypto_continue:261 st->st_calculating = FALSE;
| ikev2_parent_outI1_tail for #1
| wire (crypto helper) group MODP2048 and state group MODP2048 match
| saving DH priv (local secret) and pub key into state struct
| **emit ISAKMP Message:
|    initiator cookie:
|   bd 3e 5b 40  c7 67 f4 6e
|    responder cookie:
|   00 00 00 00  00 00 00 00
|    next payload type: ISAKMP_NEXT_v2SA (0x21)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_SA_INIT (0x22)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 00
| already determined IKE proposals for initial initiator
| Emitting ikev2_proposals ...
| ***emit IKEv2 Security Association Payload:
|    next payload type: ISAKMP_NEXT_v2KE (0x22)
|    flags: none (0x0)
| ****emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    prop #: 1 (0x1)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 9 (0x9)
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_GCM_C (0x14)
| ******emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_256 (0x5)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA1 (0x2)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_NONE (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP3072 (0xf)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP4096 (0x10)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP8192 (0x12)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 84
| ****emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    prop #: 2 (0x2)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 9 (0x9)
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_GCM_C (0x14)
| ******emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_256 (0x5)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA1 (0x2)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_NONE (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP3072 (0xf)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP4096 (0x10)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP8192 (0x12)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 84
| ****emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    prop #: 3 (0x3)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 10 (0xa)
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_CBC (0xc)
| ******emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_256 (0x5)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA1 (0x2)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_512_256 (0xe)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_256_128 (0xc)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA1_96 (0x2)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP3072 (0xf)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP1536 (0x5)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 92
| ****emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_LAST (0x0)
|    prop #: 4 (0x4)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 10 (0xa)
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_CBC (0xc)
| ******emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_256 (0x5)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA1 (0x2)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_512_256 (0xe)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_256_128 (0xc)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA1_96 (0x2)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP3072 (0xf)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *****emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP1536 (0x5)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 92
| emitting length of IKEv2 Security Association Payload: 356
| ***emit IKEv2 Key Exchange Payload:
|    IKEv2 next payload type: ISAKMP_NEXT_v2Ni (0x28)
|    flags: none (0x0)
|    DH group: OAKLEY_GROUP_MODP2048 (0xe)
| emitting 256 raw bytes of ikev2 g^x into IKEv2 Key Exchange Payload
| ikev2 g^x  e8 a5 62 db  0a 22 31 df  5e a0 ed 39  c5 3e 0f d0
| ikev2 g^x  c7 11 7b 53  45 54 f3 98  06 14 88 c3  fd b9 1c 72
| ikev2 g^x  55 8f a4 81  b7 4a f6 53  53 57 a7 c7  1c 4e 50 74
| ikev2 g^x  9c 5f a4 84  f2 38 1e b0  c0 76 a2 ed  27 6e d9 31
| ikev2 g^x  41 10 4c ba  b0 df b1 40  44 47 79 8c  d4 ec c3 e0
| ikev2 g^x  c2 19 22 46  82 83 0d 7d  f2 9d a2 08  c4 2f 1b 11
| ikev2 g^x  18 0b 45 db  f8 7a 5e 61  7c 1e ae a5  15 c9 42 83
| ikev2 g^x  7e 34 95 0f  49 33 7b 1d  3c 68 bb c9  2d 06 b1 a2
| ikev2 g^x  00 e0 eb 83  1d 05 b8 78  a5 d5 17 36  86 f1 b8 85
| ikev2 g^x  c2 9e fb c5  0a fe 3d f2  a7 be 8d fa  7d e8 04 bc
| ikev2 g^x  1a b3 96 b4  ee 2d 86 70  af 5a 4a 02  d1 a6 df 6b
| ikev2 g^x  fe 8d d2 3b  67 2d b4 d4  ac bb d0 1e  d0 cd 71 e9
| ikev2 g^x  7e 35 49 cd  c1 22 a9 95  44 3a 63 13  38 1b de 10
| ikev2 g^x  dc 37 75 7f  b1 5c 3b 90  d6 8b 68 b3  10 1f a3 33
| ikev2 g^x  a7 7f 28 a6  7c 01 ce f4  a3 2e c2 61  4f 48 e5 1f
| ikev2 g^x  de 92 5b 0c  69 af a4 6a  20 8b 33 6b  19 92 fa e2
| emitting length of IKEv2 Key Exchange Payload: 264
| ***emit IKEv2 Nonce Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
| emitting 32 raw bytes of IKEv2 nonce into IKEv2 Nonce Payload
| IKEv2 nonce  c7 14 ec e0  84 14 95 1c  0c 61 de d3  23 15 fa c8
| IKEv2 nonce  ff d6 0f 15  ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69
| emitting length of IKEv2 Nonce Payload: 36
| Adding a v2N Payload
| ***emit IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_IKEV2_FRAGMENTATION_SUPPORTED (0x402e)
| emitting 0 raw bytes of Notify data into IKEv2 Notify Payload
| Notify data
| emitting length of IKEv2 Notify Payload: 8
|  NAT-Traversal support  [enabled] add v2N payloads.
| natd_hash: Warning, rcookie is zero !!
| NATD hash sha init
| NATD sha hasher: context 0x7f8c95c47960
| NATD hash sha digest ICOOKIE-bytes@0x7f8c95c4fed0 (length 8)
| NATD hash sha digest RCOOKIE-bytes@0x7f8c95c50390 (length 8)
| NATD hash sha digest SIN_ADDR-bytes@0x7f8c95c4fd64 (length 4)
| NATD hash sha digest PORT-bytes@0x7fff25256d9e (length 2)
| NATD hash sha final bytes@0x7fff25256e00 (length 20)
| NATD  fa 57 50 49  bd 2c 92 c3  b9 3a f8 cb  e7 eb 15 85
| NATD  47 bd 3e a9
| natd_hash: hasher=0x7f8c9531a3c0(20)
| natd_hash: icookie=  bd 3e 5b 40  c7 67 f4 6e
| natd_hash: rcookie=  00 00 00 00  00 00 00 00
| natd_hash: ip=  c0 01 02 2d
| natd_hash: port=500
| natd_hash: hash=  fa 57 50 49  bd 2c 92 c3  b9 3a f8 cb  e7 eb 15 85
| natd_hash: hash=  47 bd 3e a9
| Adding a v2N Payload
| ***emit IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_NAT_DETECTION_SOURCE_IP (0x4004)
| emitting 20 raw bytes of Notify data into IKEv2 Notify Payload
| Notify data  fa 57 50 49  bd 2c 92 c3  b9 3a f8 cb  e7 eb 15 85
| Notify data  47 bd 3e a9
| emitting length of IKEv2 Notify Payload: 28
| natd_hash: Warning, rcookie is zero !!
| NATD hash sha init
| NATD sha hasher: context 0x7f8c95c47960
| NATD hash sha digest ICOOKIE-bytes@0x7f8c95c4fed0 (length 8)
| NATD hash sha digest RCOOKIE-bytes@0x7f8c95c50390 (length 8)
| NATD hash sha digest SIN_ADDR-bytes@0x7f8c95c4fd3c (length 4)
| NATD hash sha digest PORT-bytes@0x7fff25256d9e (length 2)
| NATD hash sha final bytes@0x7fff25256e00 (length 20)
| NATD  6d f5 d5 b9  ef 76 19 7d  4b 95 ad a9  25 d4 b9 8e
| NATD  87 90 f7 dc
| natd_hash: hasher=0x7f8c9531a3c0(20)
| natd_hash: icookie=  bd 3e 5b 40  c7 67 f4 6e
| natd_hash: rcookie=  00 00 00 00  00 00 00 00
| natd_hash: ip=  c0 01 02 17
| natd_hash: port=500
| natd_hash: hash=  6d f5 d5 b9  ef 76 19 7d  4b 95 ad a9  25 d4 b9 8e
| natd_hash: hash=  87 90 f7 dc
| Adding a v2N Payload
| ***emit IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_NAT_DETECTION_DESTINATION_IP (0x4005)
| emitting 20 raw bytes of Notify data into IKEv2 Notify Payload
| Notify data  6d f5 d5 b9  ef 76 19 7d  4b 95 ad a9  25 d4 b9 8e
| Notify data  87 90 f7 dc
| emitting length of IKEv2 Notify Payload: 28
| no IKE message padding required for IKEv2
| emitting length of ISAKMP Message: 748
| #1 complete v2 state transition from STATE_PARENT_I1 with STF_OK
| transition from state STATE_IKEv2_BASE to state STATE_PARENT_I1
| parent state #1: STATE_PARENT_I1(half-open-ike) => STATE_PARENT_I1(half-open-ike)
| ignore states: 0
| half-open-ike states: 1
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| message ID #1 STATE_PARENT_I1 san pst #1 st_msgid_nextuse(before=0) 1 st_msgid_lastack 4294967295 st_msgid_lastrecv 4294967295
"san" #1: STATE_PARENT_I1: sent v2I1, expected v2R1
| sending V2 new request packet to 192.1.2.23:500 (from port 500)
| sending 748 bytes for STATE_IKEv2_BASE through eth1:500 to 192.1.2.23:500 (using #1)
|   bd 3e 5b 40  c7 67 f4 6e  00 00 00 00  00 00 00 00
|   21 20 22 08  00 00 00 00  00 00 02 ec  22 00 01 64
|   02 00 00 54  01 01 00 09  03 00 00 0c  01 00 00 14
|   80 0e 01 00  03 00 00 08  02 00 00 07  03 00 00 08
|   02 00 00 05  03 00 00 08  02 00 00 02  03 00 00 08
|   03 00 00 00  03 00 00 08  04 00 00 0e  03 00 00 08
|   04 00 00 0f  03 00 00 08  04 00 00 10  00 00 00 08
|   04 00 00 12  02 00 00 54  02 01 00 09  03 00 00 0c
|   01 00 00 14  80 0e 00 80  03 00 00 08  02 00 00 07
|   03 00 00 08  02 00 00 05  03 00 00 08  02 00 00 02
|   03 00 00 08  03 00 00 00  03 00 00 08  04 00 00 0e
|   03 00 00 08  04 00 00 0f  03 00 00 08  04 00 00 10
|   00 00 00 08  04 00 00 12  02 00 00 5c  03 01 00 0a
|   03 00 00 0c  01 00 00 0c  80 0e 01 00  03 00 00 08
|   02 00 00 07  03 00 00 08  02 00 00 05  03 00 00 08
|   02 00 00 02  03 00 00 08  03 00 00 0e  03 00 00 08
|   03 00 00 0c  03 00 00 08  03 00 00 02  03 00 00 08
|   04 00 00 0e  03 00 00 08  04 00 00 0f  00 00 00 08
|   04 00 00 05  00 00 00 5c  04 01 00 0a  03 00 00 0c
|   01 00 00 0c  80 0e 00 80  03 00 00 08  02 00 00 07
|   03 00 00 08  02 00 00 05  03 00 00 08  02 00 00 02
|   03 00 00 08  03 00 00 0e  03 00 00 08  03 00 00 0c
|   03 00 00 08  03 00 00 02  03 00 00 08  04 00 00 0e
|   03 00 00 08  04 00 00 0f  00 00 00 08  04 00 00 05
|   28 00 01 08  00 0e 00 00  e8 a5 62 db  0a 22 31 df
|   5e a0 ed 39  c5 3e 0f d0  c7 11 7b 53  45 54 f3 98
|   06 14 88 c3  fd b9 1c 72  55 8f a4 81  b7 4a f6 53
|   53 57 a7 c7  1c 4e 50 74  9c 5f a4 84  f2 38 1e b0
|   c0 76 a2 ed  27 6e d9 31  41 10 4c ba  b0 df b1 40
|   44 47 79 8c  d4 ec c3 e0  c2 19 22 46  82 83 0d 7d
|   f2 9d a2 08  c4 2f 1b 11  18 0b 45 db  f8 7a 5e 61
|   7c 1e ae a5  15 c9 42 83  7e 34 95 0f  49 33 7b 1d
|   3c 68 bb c9  2d 06 b1 a2  00 e0 eb 83  1d 05 b8 78
|   a5 d5 17 36  86 f1 b8 85  c2 9e fb c5  0a fe 3d f2
|   a7 be 8d fa  7d e8 04 bc  1a b3 96 b4  ee 2d 86 70
|   af 5a 4a 02  d1 a6 df 6b  fe 8d d2 3b  67 2d b4 d4
|   ac bb d0 1e  d0 cd 71 e9  7e 35 49 cd  c1 22 a9 95
|   44 3a 63 13  38 1b de 10  dc 37 75 7f  b1 5c 3b 90
|   d6 8b 68 b3  10 1f a3 33  a7 7f 28 a6  7c 01 ce f4
|   a3 2e c2 61  4f 48 e5 1f  de 92 5b 0c  69 af a4 6a
|   20 8b 33 6b  19 92 fa e2  29 00 00 24  c7 14 ec e0
|   84 14 95 1c  0c 61 de d3  23 15 fa c8  ff d6 0f 15
|   ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69  29 00 00 08
|   00 00 40 2e  29 00 00 1c  00 00 40 04  fa 57 50 49
|   bd 2c 92 c3  b9 3a f8 cb  e7 eb 15 85  47 bd 3e a9
|   00 00 00 1c  00 00 40 05  6d f5 d5 b9  ef 76 19 7d
|   4b 95 ad a9  25 d4 b9 8e  87 90 f7 dc
| state #1 requesting EVENT_CRYPTO_FAILED to be deleted
| delete_pluto_event: release EVENT_CRYPTO_FAILED-pe@0x7f8c95c4f908
"san" #1: suppressing retransmit because IMPAIR_RETRANSMITS is set.
| event_schedule called for 10 seconds
| event_schedule_tv: new EVENT_v2_RELEASE_WHACK-pe@0x7f8c95c4f908
| event_schedule_tv called for about 10 seconds and change
| inserting event EVENT_v2_RELEASE_WHACK, timeout in 10.000000 seconds for #1
| ikev2_replace_delay() picked up half-open SA ike_life:60
| ikev2 case EVENT_v2_RETRANSMIT: for 60 seconds
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_SA_EXPIRE-pe@0x7f8c95c4f508
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_SA_EXPIRE, timeout in 60.000000 seconds for #1
| *received 445 bytes from 192.1.2.23:500 on eth1 (port=500)
|   bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
|   21 20 22 20  00 00 00 00  00 00 01 bd  22 00 00 30
|   00 00 00 2c  01 01 00 04  03 00 00 0c  01 00 00 14
|   80 0e 01 00  03 00 00 08  02 00 00 07  03 00 00 08
|   03 00 00 00  00 00 00 08  04 00 00 0e  28 00 01 08
|   00 0e 00 00  9c 16 37 f1  95 3b 83 be  3e b3 57 61
|   ac 40 8f a9  4e 16 b6 1a  c4 0f 2f b9  26 da e6 9c
|   b1 29 69 a5  25 0e 21 37  9b 93 cc 9f  ac 2c 55 dc
|   41 5b f3 f3  25 98 55 45  56 ff 7b f6  13 0c 29 11
|   4f 5f 76 74  db d1 72 63  9e fc 63 4f  1e 7c b1 03
|   94 ab 54 83  24 5b 75 10  b4 75 40 11  01 43 94 05
|   b8 e4 a6 af  92 4f c4 b2  d1 8d 9e a9  3d 54 4f d2
|   ae 31 34 76  49 8f 9e ba  28 83 ba c9  8c f7 6f 48
|   6f fb f3 dd  96 8b 1f 46  ec 81 93 3d  3c 61 c2 1a
|   b5 0a e4 03  c3 86 ab 6d  9b 5d d4 4d  19 2a da df
|   82 7a d2 d2  dc 2d 07 43  73 28 8b f7  b6 92 db c6
|   44 20 ef 8a  4f d6 f1 57  91 b3 6a 56  1b 75 1e f5
|   14 3c 6c b2  c2 95 14 5d  d9 da bc 5d  62 3f d5 52
|   ff be 54 e9  d1 c8 04 2b  96 f6 df 8e  75 a2 8f cd
|   c9 dc 42 31  3c 7d 8b ac  7d bb 5e 96  7f 5e 44 10
|   89 33 52 ad  d5 d0 21 82  77 0e af 3b  cf 56 9e 0d
|   22 0b 89 11  29 00 00 24  46 0c 96 48  11 aa 61 01
|   93 4d da a4  bb 43 bb c1  91 2c 12 5a  13 1f 31 57
|   b5 f0 ae 5e  44 9c 6f 3b  29 00 00 08  00 00 40 2e
|   29 00 00 1c  00 00 40 04  19 05 f8 f1  54 09 49 0e
|   05 10 f2 e4  b3 65 79 b0  d8 f7 bb a3  26 00 00 1c
|   00 00 40 05  fd 56 30 9d  a9 ab 5f 8c  87 9b 34 4a
|   bd a3 76 09  f2 ea 7e 50  00 00 00 05  04
| **parse ISAKMP Message:
|    initiator cookie:
|   bd 3e 5b 40  c7 67 f4 6e
|    responder cookie:
|   4f dd 82 29  9e 3b 6b 24
|    next payload type: ISAKMP_NEXT_v2SA (0x21)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_SA_INIT (0x22)
|    flags: ISAKMP_FLAG_v2_MSG_RESPONSE (0x20)
|    message ID:  00 00 00 00
|    length: 445 (0x1bd)
|  processing version=2.0 packet with exchange type=ISAKMP_v2_SA_INIT (34)
| I am receiving an IKEv2 Response ISAKMP_v2_SA_INIT
| I am the IKE SA Original Initiator
| finding hash chain in icookie hash table
|   ICOOKIE:  bd 3e 5b 40  c7 67 f4 6e
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 24
| parent_init v2 peer and cookies match on #1
| v2 state object #1 found, in STATE_PARENT_I1
| rehashing state object #1
| removing state 0x7f8c95c4fa48 entry 0x7f8c95c500c8 next (nil) prev-next 0x7f8c95320728 from list
| updated next entry is (nil)
| finding hash chain in state hash table
|   ICOOKIE:  bd 3e 5b 40  c7 67 f4 6e
|   RCOOKIE:  4f dd 82 29  9e 3b 6b 24
| found hash chain 3
| list 0x7f8c95320680 first entry (nil)
| inserted state 0x7f8c95c4fa48 entry 0x7f8c95c500c8 next (nil) prev-next 0x7f8c95320680 into list
| updated next entry is (nil)
| found state #1
| from_state is STATE_PARENT_I1
| Unpacking clear payload for svm: Initiator: process anti-spoofing cookie
| Now let's proceed with payload (ISAKMP_NEXT_v2SA)
| ***parse IKEv2 Security Association Payload:
|    next payload type: ISAKMP_NEXT_v2KE (0x22)
|    flags: none (0x0)
|    length: 48 (0x30)
| processing payload: ISAKMP_NEXT_v2SA (len=48)
| Now let's proceed with payload (ISAKMP_NEXT_v2KE)
| ***parse IKEv2 Key Exchange Payload:
|    IKEv2 next payload type: ISAKMP_NEXT_v2Ni (0x28)
|    flags: none (0x0)
|    length: 264 (0x108)
|    DH group: OAKLEY_GROUP_MODP2048 (0xe)
| processing payload: ISAKMP_NEXT_v2KE (len=264)
| Now let's proceed with payload (ISAKMP_NEXT_v2Ni)
| ***parse IKEv2 Nonce Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    length: 36 (0x24)
| processing payload: ISAKMP_NEXT_v2Ni (len=36)
| Now let's proceed with payload (ISAKMP_NEXT_v2N)
| ***parse IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    length: 8 (0x8)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_IKEV2_FRAGMENTATION_SUPPORTED (0x402e)
| processing payload: ISAKMP_NEXT_v2N (len=8)
| Now let's proceed with payload (ISAKMP_NEXT_v2N)
| ***parse IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    flags: none (0x0)
|    length: 28 (0x1c)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_NAT_DETECTION_SOURCE_IP (0x4004)
| processing payload: ISAKMP_NEXT_v2N (len=28)
| Now let's proceed with payload (ISAKMP_NEXT_v2N)
| ***parse IKEv2 Notify Payload:
|    next payload type: ISAKMP_NEXT_v2CERTREQ (0x26)
|    flags: none (0x0)
|    length: 28 (0x1c)
|    Protocol ID: PROTO_v2_RESERVED (0x0)
|    SPI size: 0 (0x0)
|    Notify Message Type: v2N_NAT_DETECTION_DESTINATION_IP (0x4005)
| processing payload: ISAKMP_NEXT_v2N (len=28)
| Now let's proceed with payload (ISAKMP_NEXT_v2CERTREQ)
| ***parse IKEv2 Certificate Request Payload:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    length: 5 (0x5)
|    ikev2 cert encoding: CERT_X509_SIGNATURE (0x4)
| processing payload: ISAKMP_NEXT_v2CERTREQ (len=5)
| selected state microcode Initiator: process IKE_SA_INIT reply, initiate IKE_AUTH
| processing connection "san"
| processing connection "san"
| #1 state_busy:2535 st != NULL && st->st_calculating == FALSE;
| Now lets proceed with state specific processing
| calling processor Initiator: process IKE_SA_INIT reply, initiate IKE_AUTH
| ikev2 parent inR1: calculating g^{xy} in order to send I2
| DH public value received:
|   9c 16 37 f1  95 3b 83 be  3e b3 57 61  ac 40 8f a9
|   4e 16 b6 1a  c4 0f 2f b9  26 da e6 9c  b1 29 69 a5
|   25 0e 21 37  9b 93 cc 9f  ac 2c 55 dc  41 5b f3 f3
|   25 98 55 45  56 ff 7b f6  13 0c 29 11  4f 5f 76 74
|   db d1 72 63  9e fc 63 4f  1e 7c b1 03  94 ab 54 83
|   24 5b 75 10  b4 75 40 11  01 43 94 05  b8 e4 a6 af
|   92 4f c4 b2  d1 8d 9e a9  3d 54 4f d2  ae 31 34 76
|   49 8f 9e ba  28 83 ba c9  8c f7 6f 48  6f fb f3 dd
|   96 8b 1f 46  ec 81 93 3d  3c 61 c2 1a  b5 0a e4 03
|   c3 86 ab 6d  9b 5d d4 4d  19 2a da df  82 7a d2 d2
|   dc 2d 07 43  73 28 8b f7  b6 92 db c6  44 20 ef 8a
|   4f d6 f1 57  91 b3 6a 56  1b 75 1e f5  14 3c 6c b2
|   c2 95 14 5d  d9 da bc 5d  62 3f d5 52  ff be 54 e9
|   d1 c8 04 2b  96 f6 df 8e  75 a2 8f cd  c9 dc 42 31
|   3c 7d 8b ac  7d bb 5e 96  7f 5e 44 10  89 33 52 ad
|   d5 d0 21 82  77 0e af 3b  cf 56 9e 0d  22 0b 89 11
| already determined IKE proposals for initial initiator (accepting)
| Comparing remote proposals against IKE initiator (accepting) 4 local proposals
| ****parse IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_LAST (0x0)
|    length: 44 (0x2c)
|    prop #: 1 (0x1)
|    proto ID: IKEv2_SEC_PROTO_IKE (0x1)
|    spi size: 0 (0x0)
|    # transforms: 4 (0x4)
| Comparing remote proposal 1 containing 4 transforms against local proposal [1..1] of 4 local proposals
| local proposal 1 type ENCR has 1 transforms
| local proposal 1 type PRF has 3 transforms
| local proposal 1 type INTEG has 1 transforms
| local proposal 1 type DH has 4 transforms
| local proposal 1 type ESN has 0 transforms
| local proposal 1 transforms: required: ENCR+PRF+DH; optional: INTEG
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 12 (0xc)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_GCM_C (0x14)
| ******parse IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| remote proposal 1 transform 0 (ENCR=AES_GCM_C_256) matches local proposal 1 type 1 (ENCR) transform 0
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_PRF (0x2)
|    IKEv2 transform ID: PRF_HMAC_SHA2_512 (0x7)
| remote proposal 1 transform 1 (PRF=HMAC_SHA2_512) matches local proposal 1 type 2 (PRF) transform 0
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_NONE (0x0)
| remote proposal 1 transform 2 (INTEG=NONE) matches local proposal 1 type 3 (INTEG) transform 0
| *****parse IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    length: 8 (0x8)
|    IKEv2 transform type: TRANS_TYPE_DH (0x4)
|    IKEv2 transform ID: OAKLEY_GROUP_MODP2048 (0xe)
| remote proposal 1 transform 3 (DH=MODP2048) matches local proposal 1 type 4 (DH) transform 0
| remote proposal 1 proposed transforms: ENCR+PRF+INTEG+DH; matched: ENCR+PRF+INTEG+DH; unmatched: none
| comparing remote proposal 1 and local proposal 1 transforms: required: ENCR+PRF+DH; optional: INTEG; proposed: ENCR+PRF+INTEG+DH; matched: ENCR+PRF+INTEG+DH
| remote proposal 1 matches local proposal 1
| proposal 1:IKE:ENCR=AES_GCM_C_256;PRF=HMAC_SHA2_512;INTEG=NONE;DH=MODP2048[first-match] was accepted
| converting proposal to internal trans attrs
| encryption ike_alg_lookup_by_id id: AES_GCM_C=20, found aes_gcm_16 
| PRF ike_alg_lookup_by_id id: HMAC_SHA2_512=7, found sha2_512 
| ignoring NULL integrity
| message ID #1 STATE_PARENT_I1 san pst #1 st_msgid_nextuse(before=1) 1 st_msgid_lastack 0 st_msgid_lastrecv 4294967295
| NATD hash sha init
| NATD sha hasher: context 0x7f8c95c47960
| NATD hash sha digest ICOOKIE-bytes@0x7f8c95c4fed0 (length 8)
| NATD hash sha digest RCOOKIE-bytes@0x7f8c95c4fef8 (length 8)
| NATD hash sha digest SIN_ADDR-bytes@0x7f8c95c44fe8 (length 4)
| NATD hash sha digest PORT-bytes@0x7fff2525778e (length 2)
| NATD hash sha final bytes@0x7fff25257830 (length 20)
| NATD  fd 56 30 9d  a9 ab 5f 8c  87 9b 34 4a  bd a3 76 09
| NATD  f2 ea 7e 50
| natd_hash: hasher=0x7f8c9531a3c0(20)
| natd_hash: icookie=  bd 3e 5b 40  c7 67 f4 6e
| natd_hash: rcookie=  4f dd 82 29  9e 3b 6b 24
| natd_hash: ip=  c0 01 02 2d
| natd_hash: port=500
| natd_hash: hash=  fd 56 30 9d  a9 ab 5f 8c  87 9b 34 4a  bd a3 76 09
| natd_hash: hash=  f2 ea 7e 50
| NATD hash sha init
| NATD sha hasher: context 0x7f8c95c47960
| NATD hash sha digest ICOOKIE-bytes@0x7f8c95c4fed0 (length 8)
| NATD hash sha digest RCOOKIE-bytes@0x7f8c95c4fef8 (length 8)
| NATD hash sha digest SIN_ADDR-bytes@0x7f8c95c502ac (length 4)
| NATD hash sha digest PORT-bytes@0x7fff2525778e (length 2)
| NATD hash sha final bytes@0x7fff25257850 (length 20)
| NATD  19 05 f8 f1  54 09 49 0e  05 10 f2 e4  b3 65 79 b0
| NATD  d8 f7 bb a3
| natd_hash: hasher=0x7f8c9531a3c0(20)
| natd_hash: icookie=  bd 3e 5b 40  c7 67 f4 6e
| natd_hash: rcookie=  4f dd 82 29  9e 3b 6b 24
| natd_hash: ip=  c0 01 02 17
| natd_hash: port=500
| natd_hash: hash=  19 05 f8 f1  54 09 49 0e  05 10 f2 e4  b3 65 79 b0
| natd_hash: hash=  d8 f7 bb a3
| NAT_TRAVERSAL encaps using auto-detect
| NAT_TRAVERSAL nat_keepalive enabled 192.1.2.23
| calculating skeyseed using prf=PRF_HMAC_SHA2_512 integ=AUTH_NONE cipherkey=AES_GCM_C
| start_dh_v2: reference skey_d_old-key@NULL
| Copying DH pub key pointer to be sent to a thread helper
| crypto helper 0: pcw_work: 0
| asking crypto helper 0 to do compute dh (V2); request ID 2 (len=2816, pcw_work=0)
| crypto helper 0 read fd: 12
| crypto helper 0 doing compute dh (V2); request ID 2
| peer's g:   9c 16 37 f1  95 3b 83 be  3e b3 57 61  ac 40 8f a9
| peer's g:   4e 16 b6 1a  c4 0f 2f b9  26 da e6 9c  b1 29 69 a5
| peer's g:   25 0e 21 37  9b 93 cc 9f  ac 2c 55 dc  41 5b f3 f3
| peer's g:   25 98 55 45  56 ff 7b f6  13 0c 29 11  4f 5f 76 74
| peer's g:   db d1 72 63  9e fc 63 4f  1e 7c b1 03  94 ab 54 83
| peer's g:   24 5b 75 10  b4 75 40 11  01 43 94 05  b8 e4 a6 af
| peer's g:   92 4f c4 b2  d1 8d 9e a9  3d 54 4f d2  ae 31 34 76
| peer's g:   49 8f 9e ba  28 83 ba c9  8c f7 6f 48  6f fb f3 dd
| peer's g:   96 8b 1f 46  ec 81 93 3d  3c 61 c2 1a  b5 0a e4 03
| peer's g:   c3 86 ab 6d  9b 5d d4 4d  19 2a da df  82 7a d2 d2
| peer's g:   dc 2d 07 43  73 28 8b f7  b6 92 db c6  44 20 ef 8a
| peer's g:   4f d6 f1 57  91 b3 6a 56  1b 75 1e f5  14 3c 6c b2
| peer's g:   c2 95 14 5d  d9 da bc 5d  62 3f d5 52  ff be 54 e9
| peer's g:   d1 c8 04 2b  96 f6 df 8e  75 a2 8f cd  c9 dc 42 31
| peer's g:   3c 7d 8b ac  7d bb 5e 96  7f 5e 44 10  89 33 52 ad
| peer's g:   d5 d0 21 82  77 0e af 3b  cf 56 9e 0d  22 0b 89 11
| Started DH shared-secret computation in NSS:
| nss_modp_calc_g_ir: new g_ir-key@0x7f8c95c34d40, size: 256 bytes, type/mechanism: CONCATENATE_DATA_AND_BASE (0x00000363)
| calc_dh_shared: g^ir-key@0x7f8c95c34d40, size: 256 bytes, type/mechanism: CONCATENATE_DATA_AND_BASE (0x00000363)
| NSS: Started key computation
| calculating skeyseed using prf=sha2_512 integ=n/a cipherkey-size=32 salt-size=4
| ike sa SKEYSEED PRF sha2_512 init Ni|Nr-chunk@0x7f8c88003768 (length 64)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c88003768 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   c7 14 ec e0  84 14 95 1c  0c 61 de d3  23 15 fa c8
|   ff d6 0f 15  ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69
|   46 0c 96 48  11 aa 61 01  93 4d da a4  bb 43 bb c1
|   91 2c 12 5a  13 1f 31 57  b5 f0 ae 5e  44 9c 6f 3b
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c88004e50, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey Ni|Nr for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7f8c88004e50, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c88004e50, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c365c0, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| Ni|Nr: release tmp-key@0x7f8c88004e50
| ike sa SKEYSEED prf: created sha2_512 context 0x7f8c880067e0 from Ni|Nr-key@0x7f8c95c365c0
| ike sa SKEYSEED prf: begin sha2_512 with context 0x7f8c880067e0 from Ni|Nr-key@0x7f8c95c365c0
| ike sa SKEYSEED: release clone-key@0x7f8c95c365c0
| ike sa SKEYSEED PRF sha2_512 crypt-prf@0x7f8c88006f18
| ike sa SKEYSEED PRF sha2_512 update g^ir-key@0x7f8c95c34d40 (size 256)
| nss hmac digest hack extracting all 256 bytes of key@0x7f8c95c34d40
| nss hmac digest hack: symkey-key@0x7f8c95c34d40, size: 256 bytes, type/mechanism: CONCATENATE_DATA_AND_BASE (0x00000363)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 256 bytes, type/mechanism: CONCATENATE_DATA_AND_BASE (0x00000363)
| sizeof bytes 256
| wrapper:  4a 97 7d d7  cf 02 81 b1  93 1f a6 b2  58 3f 0b 8d
| wrapper:  3f bf d0 c9  a0 b8 96 59  e4 06 12 cf  12 01 5b dd
| wrapper:  38 1e 02 5a  5b 00 6d 1c  2a 3a 45 c3  0c 4d cb 0a
| wrapper:  29 aa 5a 94  a0 45 a6 a8  96 b0 48 7c  26 cb 75 64
| wrapper:  55 6a 44 94  3f e6 b3 c3  cd 1e fb f5  74 a6 9b e8
| wrapper:  65 d6 91 e2  96 1d 87 fd  7f 00 48 95  5b 42 82 34
| wrapper:  31 7d 22 5f  3b 67 eb 5a  6c d4 37 94  7f 67 c4 52
| wrapper:  e2 83 eb 30  75 01 41 f5  47 78 9c c8  85 d1 c9 5c
| wrapper:  cf 90 85 ac  0b 9d 18 b4  31 20 13 dc  3d ec 17 d1
| wrapper:  9f 13 f1 f6  2d 24 77 2d  71 b1 9e 37  2c 28 f0 74
| wrapper:  c7 38 cc 25  ad d2 16 65  25 90 1b 57  10 74 e0 89
| wrapper:  1a 79 5d be  86 cf 9b 0a  44 e6 a0 8c  38 ed da 57
| wrapper:  7a ee e8 38  83 6e c9 a6  41 b8 cd 66  a3 99 09 9e
| wrapper:  69 00 1e d7  57 a7 61 18  8c 26 77 0d  fb 3b a2 92
| wrapper:  08 eb 36 62  9a 4e ae b7  fd 2a 38 6c  62 e5 97 9a
| wrapper:  5b 43 5c 43  15 9c 92 e2  94 14 ec 6b  56 f0 8e 58
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 256 bytes at 0x7f8c880075c8
| unwrapped:  a8 bb 61 a0  50 71 2f e2  f4 da 98 9f  f7 08 09 a4
| unwrapped:  9f 70 c4 4e  75 9f e2 70  90 17 ee ed  0c 8d 71 48
| unwrapped:  c8 cb 33 97  4a 50 3f 33  1d 16 ba b7  f7 46 c1 39
| unwrapped:  79 99 de 3d  42 4f db ed  90 36 a2 9d  50 ef 14 20
| unwrapped:  76 8e fc 8b  22 e6 30 d7  cd d5 2d 53  58 49 02 c9
| unwrapped:  eb b3 7d c4  63 cb 2f 45  92 25 a4 b5  8c df ab a7
| unwrapped:  12 92 1f 76  3a 40 2a c9  79 97 65 f3  08 7d a4 12
| unwrapped:  89 f8 2e 21  6d 7f 1c 00  2e c2 f9 dc  7e 18 2b b4
| unwrapped:  31 bd 44 5d  75 f1 96 ad  c8 e0 b4 69  e9 f5 0d f6
| unwrapped:  0c 08 96 e6  b8 fa 07 cc  8b 8f e5 99  e9 1e ac ca
| unwrapped:  d7 d6 e9 6c  c8 d8 28 d5  93 6a 02 0f  03 24 79 42
| unwrapped:  c6 70 94 7c  8b 09 ef e9  57 f3 b5 89  3e b5 67 51
| unwrapped:  16 ce 3e 50  a2 a1 6c ad  03 b8 bc 62  70 a9 37 eb
| unwrapped:  19 4f 68 53  52 1f fd 3d  6c ae 61 e8  f3 9f 01 c0
| unwrapped:  ed 0d 34 0d  bc 7d 64 e4  22 73 86 4b  54 aa 13 18
| unwrapped:  7a e2 7a c1  a4 7d 8d 7a  33 e2 69 e4  2a 58 80 cd
| ike sa SKEYSEED PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c88003768 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   88 0d 34 6c  c8 c8 43 c8  8b de b0 ee  fe 50 d8 6f
|   28 0d 7c c1  53 0a a6 fb  00 bd 12 26  fc be 21 97
|   03 f9 86 91  f6 1b 87 38  00 b8 0e 44  0e 0e 66 09
|   14 ae 9e 99  7b b8 f0 60  e0 45 f8 2d  4d ac 9f ef
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c88004e50, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7f8c88004e50, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c88004e50, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c365c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7f8c88004e50
| ike sa SKEYSEED PRF sha2_512 final-key@0x7f8c95c365c0 (size 64)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c8d0f9660 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   c7 14 ec e0  84 14 95 1c  0c 61 de d3  23 15 fa c8
|   ff d6 0f 15  ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c880066d0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey data for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880066d0, key-offset: 0, key-size: 32, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880066d0, size: 48 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88004e50, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| data: release tmp-key@0x7f8c880066d0
| CONCATENATE_BASE_AND_DATA: base-key@0x7f8c88004e50, data-bytes@0x7f8c8d0f9680 (32 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_DATA: base-key@0x7f8c88004e50, size: 32 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_DATA: data
|   46 0c 96 48  11 aa 61 01  93 4d da a4  bb 43 bb c1
|   91 2c 12 5a  13 1f 31 57  b5 f0 ae 5e  44 9c 6f 3b
| CONCATENATE_BASE_AND_DATA: new result-key@0x7f8c880066d0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_bytes: release lhs-key@0x7f8c88004e50
| CONCATENATE_BASE_AND_DATA: base-key@0x7f8c880066d0, data-bytes@0x7f8c8d0f98a0 (8 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_DATA: base-key@0x7f8c880066d0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_DATA: data
|   bd 3e 5b 40  c7 67 f4 6e
| CONCATENATE_BASE_AND_DATA: new result-key@0x7f8c88004e50, size: 72 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_bytes: release lhs-key@0x7f8c880066d0
| CONCATENATE_BASE_AND_DATA: base-key@0x7f8c88004e50, data-bytes@0x7f8c8d0f98a8 (8 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_DATA: base-key@0x7f8c88004e50, size: 72 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_DATA: data
|   4f dd 82 29  9e 3b 6b 24
| CONCATENATE_BASE_AND_DATA: new result-key@0x7f8c880066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_bytes: release lhs-key@0x7f8c88004e50
| prf+0 PRF sha2_512 init key-key@0x7f8c95c365c0 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+0 prf: created sha2_512 context 0x7f8c88006c30 from key-key@0x7f8c88004e50
| prf+0 prf: begin sha2_512 with context 0x7f8c88006c30 from key-key@0x7f8c88004e50
| prf+0: release clone-key@0x7f8c88004e50
| prf+0 PRF sha2_512 crypt-prf@0x7f8c88000e88
| prf+0 PRF sha2_512 update seed-key@0x7f8c880066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7f8c880066d0
| nss hmac digest hack: symkey-key@0x7f8c880066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  31 90 38 72  79 b3 d2 d2  21 ab 90 bd  ee 3e b9 b6
| wrapper:  79 9a b9 4f  43 dd d0 ae  af 7c d3 03  1d 48 f6 b7
| wrapper:  34 55 e3 5a  60 52 02 09  3e 31 6a c0  2b 09 bf 03
| wrapper:  c7 7c 0f 67  cb 6b f0 12  f8 fd 37 59  03 bc 83 0e
| wrapper:  44 2a bb 20  23 92 29 55  9d 89 fd b6  db e4 95 95
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 80 bytes at 0x7f8c8800a358
| unwrapped:  c7 14 ec e0  84 14 95 1c  0c 61 de d3  23 15 fa c8
| unwrapped:  ff d6 0f 15  ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69
| unwrapped:  46 0c 96 48  11 aa 61 01  93 4d da a4  bb 43 bb c1
| unwrapped:  91 2c 12 5a  13 1f 31 57  b5 f0 ae 5e  44 9c 6f 3b
| unwrapped:  bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
| prf+0 PRF sha2_512 update 1++-byte@0x1 (1)
| prf+0 PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c8800a3d8 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   2f a5 83 fb  3b b7 59 fd  b9 85 63 ed  c2 85 db 8e
|   ad cd 41 ba  0b c1 b5 55  ee 53 a3 f0  76 16 79 0d
|   c0 ed 17 5c  d4 d7 92 10  d1 73 5f 87  ff ec 30 0e
|   9d f4 e5 b2  ac a6 13 40  dc 1f 64 16  df a2 6c 0f
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c88006ca0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7f8c88006ca0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c88006ca0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7f8c88006ca0
| prf+0 PRF sha2_512 final-key@0x7f8c88004e50 (size 64)
| ikev2_prfplus: reference old_t[1]-key@0x7f8c88004e50
| prf+N PRF sha2_512 init key-key@0x7f8c95c365c0 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+N prf: created sha2_512 context 0x7f8c8800a3b0 from key-key@0x7f8c88006ca0
| prf+N prf: begin sha2_512 with context 0x7f8c8800a3b0 from key-key@0x7f8c88006ca0
| prf+N: release clone-key@0x7f8c88006ca0
| prf+N PRF sha2_512 crypt-prf@0x7f8c88003768
| prf+N PRF sha2_512 update old_t-key@0x7f8c88004e50 (size 64)
| nss hmac digest hack extracting all 64 bytes of key@0x7f8c88004e50
| nss hmac digest hack: symkey-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  05 a1 3b 68  a9 b0 25 da  37 dc 8a 86  4c 34 72 bc
| wrapper:  2c 54 98 89  e8 02 17 d5  3d e2 f9 01  3a 7d d0 c6
| wrapper:  14 5a 94 4d  20 5a 6f e8  39 88 a4 42  29 0c 14 97
| wrapper:  5b 94 21 3b  41 90 c7 ee  75 8e 50 65  ab ef 2c eb
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 64 bytes at 0x7f8c880068e8
| unwrapped:  2f a5 83 fb  3b b7 59 fd  b9 85 63 ed  c2 85 db 8e
| unwrapped:  ad cd 41 ba  0b c1 b5 55  ee 53 a3 f0  76 16 79 0d
| unwrapped:  c0 ed 17 5c  d4 d7 92 10  d1 73 5f 87  ff ec 30 0e
| unwrapped:  9d f4 e5 b2  ac a6 13 40  dc 1f 64 16  df a2 6c 0f
| prf+N PRF sha2_512 update seed-key@0x7f8c880066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7f8c880066d0
| nss hmac digest hack: symkey-key@0x7f8c880066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  31 90 38 72  79 b3 d2 d2  21 ab 90 bd  ee 3e b9 b6
| wrapper:  79 9a b9 4f  43 dd d0 ae  af 7c d3 03  1d 48 f6 b7
| wrapper:  34 55 e3 5a  60 52 02 09  3e 31 6a c0  2b 09 bf 03
| wrapper:  c7 7c 0f 67  cb 6b f0 12  f8 fd 37 59  03 bc 83 0e
| wrapper:  44 2a bb 20  23 92 29 55  9d 89 fd b6  db e4 95 95
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 80 bytes at 0x7f8c880068e8
| unwrapped:  c7 14 ec e0  84 14 95 1c  0c 61 de d3  23 15 fa c8
| unwrapped:  ff d6 0f 15  ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69
| unwrapped:  46 0c 96 48  11 aa 61 01  93 4d da a4  bb 43 bb c1
| unwrapped:  91 2c 12 5a  13 1f 31 57  b5 f0 ae 5e  44 9c 6f 3b
| unwrapped:  bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
| prf+N PRF sha2_512 update N++-byte@0x2 (2)
| prf+N PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c88006c58 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   89 5e b1 2c  b1 3b 29 12  ec 12 40 69  b2 8f 18 62
|   a0 5f 58 93  57 ad dd ad  4c 32 f7 08  77 0b 7b 3c
|   4f 66 26 9d  10 9d 93 d4  6b ae db ed  39 4e 92 d7
|   66 7a 52 44  34 f1 76 6d  4d 25 7f 4c  b0 ce 00 5a
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c880068c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880068c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880068c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7f8c880068c0
| prf+N PRF sha2_512 final-key@0x7f8c88006ca0 (size 64)
| CONCATENATE_BASE_AND_KEY: base-key@0x7f8c88004e50, key@0x7f8c88006ca0 -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_KEY: base-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: key-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: new result-key@0x7f8c880068c0, size: 128 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_symkey: release lhs-key@0x7f8c88004e50
| ikev2_prfplus: release old_t[N]-key@0x7f8c88004e50
| prf+N PRF sha2_512 init key-key@0x7f8c95c365c0 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+N prf: created sha2_512 context 0x7f8c88006c30 from key-key@0x7f8c88004e50
| prf+N prf: begin sha2_512 with context 0x7f8c88006c30 from key-key@0x7f8c88004e50
| prf+N: release clone-key@0x7f8c88004e50
| prf+N PRF sha2_512 crypt-prf@0x7f8c88003768
| prf+N PRF sha2_512 update old_t-key@0x7f8c88006ca0 (size 64)
| nss hmac digest hack extracting all 64 bytes of key@0x7f8c88006ca0
| nss hmac digest hack: symkey-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  74 c3 96 2d  07 74 85 74  c3 24 b1 2c  50 5f bd 27
| wrapper:  57 59 8b e1  1c cc 24 77  e9 f5 5a 5c  bd 6a 0b 47
| wrapper:  6c 79 9c a7  49 b4 1a 70  de 36 74 1e  c3 08 24 2b
| wrapper:  c1 35 2c b6  3b f6 34 7e  84 de e5 b2  c1 8e c2 45
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 64 bytes at 0x7f8c880089e8
| unwrapped:  89 5e b1 2c  b1 3b 29 12  ec 12 40 69  b2 8f 18 62
| unwrapped:  a0 5f 58 93  57 ad dd ad  4c 32 f7 08  77 0b 7b 3c
| unwrapped:  4f 66 26 9d  10 9d 93 d4  6b ae db ed  39 4e 92 d7
| unwrapped:  66 7a 52 44  34 f1 76 6d  4d 25 7f 4c  b0 ce 00 5a
| prf+N PRF sha2_512 update seed-key@0x7f8c880066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7f8c880066d0
| nss hmac digest hack: symkey-key@0x7f8c880066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  31 90 38 72  79 b3 d2 d2  21 ab 90 bd  ee 3e b9 b6
| wrapper:  79 9a b9 4f  43 dd d0 ae  af 7c d3 03  1d 48 f6 b7
| wrapper:  34 55 e3 5a  60 52 02 09  3e 31 6a c0  2b 09 bf 03
| wrapper:  c7 7c 0f 67  cb 6b f0 12  f8 fd 37 59  03 bc 83 0e
| wrapper:  44 2a bb 20  23 92 29 55  9d 89 fd b6  db e4 95 95
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 80 bytes at 0x7f8c880089e8
| unwrapped:  c7 14 ec e0  84 14 95 1c  0c 61 de d3  23 15 fa c8
| unwrapped:  ff d6 0f 15  ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69
| unwrapped:  46 0c 96 48  11 aa 61 01  93 4d da a4  bb 43 bb c1
| unwrapped:  91 2c 12 5a  13 1f 31 57  b5 f0 ae 5e  44 9c 6f 3b
| unwrapped:  bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
| prf+N PRF sha2_512 update N++-byte@0x3 (3)
| prf+N PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c8800a3d8 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   cb 6f 67 53  b5 eb f4 8e  35 10 e8 9c  30 51 fb a5
|   0d 34 87 6c  4c 29 60 5b  de c4 b1 93  fb 56 98 33
|   b3 dc d1 b1  7d a8 40 cd  31 b5 f7 51  cc 46 c6 2e
|   36 dc ed 1a  f9 0d 44 6b  0a db e7 72  bd 58 60 2a
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c880089c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7f8c880089c0
| prf+N PRF sha2_512 final-key@0x7f8c88004e50 (size 64)
| CONCATENATE_BASE_AND_KEY: base-key@0x7f8c880068c0, key@0x7f8c88004e50 -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_KEY: base-key@0x7f8c880068c0, size: 128 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: key-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: new result-key@0x7f8c880089c0, size: 192 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_symkey: release lhs-key@0x7f8c880068c0
| ikev2_prfplus: release old_t[N]-key@0x7f8c88006ca0
| prf+N PRF sha2_512 init key-key@0x7f8c95c365c0 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+N prf: created sha2_512 context 0x7f8c8800a3b0 from key-key@0x7f8c88006ca0
| prf+N prf: begin sha2_512 with context 0x7f8c8800a3b0 from key-key@0x7f8c88006ca0
| prf+N: release clone-key@0x7f8c88006ca0
| prf+N PRF sha2_512 crypt-prf@0x7f8c88003768
| prf+N PRF sha2_512 update old_t-key@0x7f8c88004e50 (size 64)
| nss hmac digest hack extracting all 64 bytes of key@0x7f8c88004e50
| nss hmac digest hack: symkey-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  04 61 a2 74  68 d2 fa b7  1f b0 6c 32  52 c4 ee 49
| wrapper:  ec 1a f0 2c  b8 6b e1 5d  18 e6 e4 3a  76 37 43 6a
| wrapper:  71 7c e7 2c  5a 4f 1b d6  9f f7 41 9c  b6 4b 1e 25
| wrapper:  69 2b 3c 28  85 e9 69 24  4a e3 44 2b  7c 06 28 5c
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 64 bytes at 0x7f8c8800a778
| unwrapped:  cb 6f 67 53  b5 eb f4 8e  35 10 e8 9c  30 51 fb a5
| unwrapped:  0d 34 87 6c  4c 29 60 5b  de c4 b1 93  fb 56 98 33
| unwrapped:  b3 dc d1 b1  7d a8 40 cd  31 b5 f7 51  cc 46 c6 2e
| unwrapped:  36 dc ed 1a  f9 0d 44 6b  0a db e7 72  bd 58 60 2a
| prf+N PRF sha2_512 update seed-key@0x7f8c880066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7f8c880066d0
| nss hmac digest hack: symkey-key@0x7f8c880066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  31 90 38 72  79 b3 d2 d2  21 ab 90 bd  ee 3e b9 b6
| wrapper:  79 9a b9 4f  43 dd d0 ae  af 7c d3 03  1d 48 f6 b7
| wrapper:  34 55 e3 5a  60 52 02 09  3e 31 6a c0  2b 09 bf 03
| wrapper:  c7 7c 0f 67  cb 6b f0 12  f8 fd 37 59  03 bc 83 0e
| wrapper:  44 2a bb 20  23 92 29 55  9d 89 fd b6  db e4 95 95
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 80 bytes at 0x7f8c88008b98
| unwrapped:  c7 14 ec e0  84 14 95 1c  0c 61 de d3  23 15 fa c8
| unwrapped:  ff d6 0f 15  ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69
| unwrapped:  46 0c 96 48  11 aa 61 01  93 4d da a4  bb 43 bb c1
| unwrapped:  91 2c 12 5a  13 1f 31 57  b5 f0 ae 5e  44 9c 6f 3b
| unwrapped:  bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
| #1 send_crypto_helper_request:642 st->st_calculating = TRUE;
| state #1 requesting EVENT_SA_EXPIRE to be deleted
| delete_pluto_event: release EVENT_SA_EXPIRE-pe@0x7f8c95c4f508
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_CRYPTO_FAILED-pe@0x7f8c95c4f508
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_CRYPTO_FAILED, timeout in 60.000000 seconds for #1
| complete v2 state transition with STF_SUSPEND
| prf+N PRF sha2_512 update N++-byte@0x4 (4)
| prf+N PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c88006c58 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   f5 a8 87 99  d0 95 79 94  57 87 79 1d  46 b0 93 59
|   83 de 4f d1  7a 4b 4b 9c  d0 4e 47 75  f5 ab 90 ea
|   1c c5 11 d9  cd 7c c7 ce  2c fb 45 bb  70 a3 9e f7
|   93 f4 ad d8  71 64 34 56  6b e7 89 85  be 2b 84 9e
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c880068c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880068c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880068c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7f8c880068c0
| prf+N PRF sha2_512 final-key@0x7f8c88006ca0 (size 64)
| CONCATENATE_BASE_AND_KEY: base-key@0x7f8c880089c0, key@0x7f8c88006ca0 -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_KEY: base-key@0x7f8c880089c0, size: 192 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: key-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: new result-key@0x7f8c880068c0, size: 256 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_symkey: release lhs-key@0x7f8c880089c0
| ikev2_prfplus: release old_t[N]-key@0x7f8c88004e50
| prf+N PRF sha2_512 init key-key@0x7f8c95c365c0 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7f8c95c365c0, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c95c365c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| prf+N prf: created sha2_512 context 0x7f8c88006c30 from key-key@0x7f8c88004e50
| prf+N prf: begin sha2_512 with context 0x7f8c88006c30 from key-key@0x7f8c88004e50
| prf+N: release clone-key@0x7f8c88004e50
| prf+N PRF sha2_512 crypt-prf@0x7f8c88003768
| prf+N PRF sha2_512 update old_t-key@0x7f8c88006ca0 (size 64)
| nss hmac digest hack extracting all 64 bytes of key@0x7f8c88006ca0
| nss hmac digest hack: symkey-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  01 6b 39 3d  9d 00 52 7e  13 65 8a 47  b6 d2 bf f5
| wrapper:  3e 1e 27 70  02 3b d8 5a  30 4d c1 4d  97 f3 1c 69
| wrapper:  cc 8d da cb  59 d5 cc 90  59 4f aa 4a  35 a3 b4 4a
| wrapper:  9a 4d c8 32  00 e5 60 7f  e9 37 d5 98  e5 c5 90 ab
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 64 bytes at 0x7f8c88008a78
| unwrapped:  f5 a8 87 99  d0 95 79 94  57 87 79 1d  46 b0 93 59
| unwrapped:  83 de 4f d1  7a 4b 4b 9c  d0 4e 47 75  f5 ab 90 ea
| unwrapped:  1c c5 11 d9  cd 7c c7 ce  2c fb 45 bb  70 a3 9e f7
| unwrapped:  93 f4 ad d8  71 64 34 56  6b e7 89 85  be 2b 84 9e
| prf+N PRF sha2_512 update seed-key@0x7f8c880066d0 (size 80)
| nss hmac digest hack extracting all 80 bytes of key@0x7f8c880066d0
| nss hmac digest hack: symkey-key@0x7f8c880066d0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| nss hmac digest hack: new slot-key@0x7f8c88007050, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 80
| wrapper:  31 90 38 72  79 b3 d2 d2  21 ab 90 bd  ee 3e b9 b6
| wrapper:  79 9a b9 4f  43 dd d0 ae  af 7c d3 03  1d 48 f6 b7
| wrapper:  34 55 e3 5a  60 52 02 09  3e 31 6a c0  2b 09 bf 03
| wrapper:  c7 7c 0f 67  cb 6b f0 12  f8 fd 37 59  03 bc 83 0e
| wrapper:  44 2a bb 20  23 92 29 55  9d 89 fd b6  db e4 95 95
| nss hmac digest hack: release slot-key-key@0x7f8c88007050
| nss hmac digest hack extracted len 80 bytes at 0x7f8c88008a78
| unwrapped:  c7 14 ec e0  84 14 95 1c  0c 61 de d3  23 15 fa c8
| unwrapped:  ff d6 0f 15  ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69
| unwrapped:  46 0c 96 48  11 aa 61 01  93 4d da a4  bb 43 bb c1
| unwrapped:  91 2c 12 5a  13 1f 31 57  b5 f0 ae 5e  44 9c 6f 3b
| unwrapped:  bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
| prf+N PRF sha2_512 update N++-byte@0x5 (5)
| prf+N PRF sha2_512 final-key ...
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, data-bytes@0x7f8c8800a388 (64 bytes) -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_DATA_AND_BASE: base-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| CONCATENATE_DATA_AND_BASE: data
|   6e b4 62 2e  a1 17 60 d8  e8 01 c0 9b  09 70 1a a5
|   3b 74 06 c7  72 62 eb 6f  b7 6b ca e4  87 34 e9 14
|   a4 16 f4 29  79 ac 75 91  15 98 cd 58  fb e6 8b 25
|   52 96 5e 94  2c e3 a1 7c  04 6f c9 02  8f c9 ea 88
| CONCATENATE_DATA_AND_BASE: new result-key@0x7f8c880089c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| extract symkey final for non-NSS algorithm: NULL (legacy hack), mechanism: EXTRACT_KEY_FROM_KEY(869), flags: 0
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 80 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| final: release tmp-key@0x7f8c880089c0
| prf+N PRF sha2_512 final-key@0x7f8c88004e50 (size 64)
| CONCATENATE_BASE_AND_KEY: base-key@0x7f8c880068c0, key@0x7f8c88004e50 -> target: EXTRACT_KEY_FROM_KEY
| CONCATENATE_BASE_AND_KEY: base-key@0x7f8c880068c0, size: 256 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: key-key@0x7f8c88004e50, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| CONCATENATE_BASE_AND_KEY: new result-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| append_symkey_symkey: release lhs-key@0x7f8c880068c0
| ikev2_prfplus: release old_t[N]-key@0x7f8c88006ca0
| ikev2_prfplus: release old_t[final]-key@0x7f8c88004e50
| ikev2_ike_sa_keymat: release data-key@0x7f8c880066d0
| calc_skeyseed_v2: release skeyseed_k-key@0x7f8c95c365c0
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 0, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c95c365c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 64, key-size: 0, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@NULL
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 64, key-size: 0, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@NULL
| extract symkey SK_ei_k for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 64, key-size: 32, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c880066d0, size: 32 bytes, type/mechanism: AES_GCM (0x00001087)
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 96, key-size: 4, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88004e50, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| initiator salt extracting all 4 bytes of key@0x7f8c88004e50
| initiator salt: symkey-key@0x7f8c88004e50, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| initiator salt: new slot-key@0x7f8c88007050, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 16
| wrapper:  4e 31 24 5d  d4 bd fa 7b  e6 f9 19 5a  cc 8d 2f 32
| initiator salt: release slot-key-key@0x7f8c88007050
| initiator salt extracted len 16 bytes at 0x7f8c8800a7b8
| unwrapped:  4f 66 26 9d  00 00 00 00  00 00 00 00  00 00 00 00
| calc_skeyseed_v2: release initiator-salt-key-key@0x7f8c88004e50
| extract symkey SK_er_k for NSS algorithm: aes_gcm_16, mechanism: AES_GCM(4231), flags: 300
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 100, key-size: 32, flags: 0x300 -> target: AES_GCM
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88004e50, size: 32 bytes, type/mechanism: AES_GCM (0x00001087)
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 132, key-size: 4, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88006ca0, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| responder salt extracting all 4 bytes of key@0x7f8c88006ca0
| responder salt: symkey-key@0x7f8c88006ca0, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| responder salt: new slot-key@0x7f8c88007050, size: 4 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 16
| wrapper:  ed 27 83 10  fc f7 fb e5  b2 32 d4 5d  a0 de c1 f1
| responder salt: release slot-key-key@0x7f8c88007050
| responder salt extracted len 16 bytes at 0x7f8c8800a7f8
| unwrapped:  b5 eb f4 8e  00 00 00 00  00 00 00 00  00 00 00 00
| calc_skeyseed_v2: release responder-salt-key-key@0x7f8c88006ca0
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 136, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| chunk_SK_pi extracting all 64 bytes of key@0x7f8c88006ca0
| chunk_SK_pi: symkey-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| chunk_SK_pi: new slot-key@0x7f8c88007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  8a 19 a5 5f  d6 fe 59 74  7a 86 64 af  08 4d f4 c7
| wrapper:  7f 8f 18 72  d8 cf 7f 66  b0 45 5e a9  cb 4a 4a b6
| wrapper:  b6 2c 47 ab  20 88 3d 46  7b 88 1e 13  82 d8 c3 5e
| wrapper:  d0 27 a0 58  c2 8d 8f 6e  cb 5b be a8  1a 44 8c 38
| chunk_SK_pi: release slot-key-key@0x7f8c88007050
| chunk_SK_pi extracted len 64 bytes at 0x7f8c88006c58
| unwrapped:  35 10 e8 9c  30 51 fb a5  0d 34 87 6c  4c 29 60 5b
| unwrapped:  de c4 b1 93  fb 56 98 33  b3 dc d1 b1  7d a8 40 cd
| unwrapped:  31 b5 f7 51  cc 46 c6 2e  36 dc ed 1a  f9 0d 44 6b
| unwrapped:  0a db e7 72  bd 58 60 2a  f5 a8 87 99  d0 95 79 94
| EXTRACT_KEY_FROM_KEY: key@0x7f8c880089c0, key-offset: 200, key-size: 64, flags: 0x0 -> target: EXTRACT_KEY_FROM_KEY
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c880089c0, size: 320 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c880068c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| chunk_SK_pr extracting all 64 bytes of key@0x7f8c880068c0
| chunk_SK_pr: symkey-key@0x7f8c880068c0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| internal: ephemeral-key@0x7f8c95c33610, size: 16 bytes, type/mechanism: AES_KEY_GEN (0x00001080)
| chunk_SK_pr: new slot-key@0x7f8c88007050, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| sizeof bytes 64
| wrapper:  68 a5 fa 5e  79 e0 ce be  30 5f 66 3b  e1 64 80 2e
| wrapper:  5c 20 04 3e  50 e8 f2 b8  22 39 48 76  38 f7 e0 ca
| wrapper:  0d b9 b5 19  f6 a3 4c a2  d7 fd be 2e  13 5f 58 63
| wrapper:  ca 81 bd 25  94 88 41 18  e4 41 f9 c3  55 de 3d e8
| chunk_SK_pr: release slot-key-key@0x7f8c88007050
| chunk_SK_pr extracted len 64 bytes at 0x7f8c88008b98
| unwrapped:  57 87 79 1d  46 b0 93 59  83 de 4f d1  7a 4b 4b 9c
| unwrapped:  d0 4e 47 75  f5 ab 90 ea  1c c5 11 d9  cd 7c c7 ce
| unwrapped:  2c fb 45 bb  70 a3 9e f7  93 f4 ad d8  71 64 34 56
| unwrapped:  6b e7 89 85  be 2b 84 9e  6e b4 62 2e  a1 17 60 d8
| NSS ikev2: finished computing individual keys for IKEv2 SA
| calc_skeyseed_v2: release finalkey-key@0x7f8c880089c0
| calc_skeyseed_v2 pointers: shared-key@0x7f8c95c34d40, SK_d-key@0x7f8c95c365c0, SK_ai-key@(nil), SK_ar-key@(nil), SK_ei-key@0x7f8c880066d0, SK_er-key@0x7f8c88004e50, SK_pi-key@0x7f8c88006ca0, SK_pr-key@0x7f8c880068c0
| calc_skeyseed_v2 initiator salt
|   4f 66 26 9d
| calc_skeyseed_v2 responder salt
|   b5 eb f4 8e
| calc_skeyseed_v2 SK_pi
|   35 10 e8 9c  30 51 fb a5  0d 34 87 6c  4c 29 60 5b
|   de c4 b1 93  fb 56 98 33  b3 dc d1 b1  7d a8 40 cd
|   31 b5 f7 51  cc 46 c6 2e  36 dc ed 1a  f9 0d 44 6b
|   0a db e7 72  bd 58 60 2a  f5 a8 87 99  d0 95 79 94
| calc_skeyseed_v2 SK_pr
|   57 87 79 1d  46 b0 93 59  83 de 4f d1  7a 4b 4b 9c
|   d0 4e 47 75  f5 ab 90 ea  1c c5 11 d9  cd 7c c7 ce
|   2c fb 45 bb  70 a3 9e f7  93 f4 ad d8  71 64 34 56
|   6b e7 89 85  be 2b 84 9e  6e b4 62 2e  a1 17 60 d8
| crypto helper 0 finished compute dh (V2); request ID 2 time elapsed 25575 usec
| crypto helper 0 has finished work (pcw_work now 1)
| crypto helper 0 replies to request ID 2
| calling continuation function 0x7f8c9503ca9b
| ikev2_parent_inR1outI2_continue for #1: calculating g^{xy}, sending I2
| processing connection "san"
| #1 ikev2_parent_inR1outI2_continue:1884 st->st_calculating = FALSE;
| creating state object #2 at 0x7f8c95c51c08
| parent state #2: new => STATE_UNDEFINED(ignore)
| duplicating state object #1 as #2 for IPSEC SA "san"
| duplicate_state: reference st_skeyid_nss-key@NULL
| duplicate_state: reference st_skey_d_nss-key@0x7f8c95c365c0
| duplicate_state: reference st_skey_ai_nss-key@NULL
| duplicate_state: reference st_skey_ar_nss-key@NULL
| duplicate_state: reference st_skey_ei_nss-key@0x7f8c880066d0
| duplicate_state: reference st_skey_er_nss-key@0x7f8c88004e50
| duplicate_state: reference st_skey_pi_nss-key@0x7f8c88006ca0
| duplicate_state: reference st_skey_pr_nss-key@0x7f8c880068c0
| duplicate_state: reference st_enc_key_nss-key@NULL
| inserting state object #2
| finding hash chain in state hash table
|   ICOOKIE:  bd 3e 5b 40  c7 67 f4 6e
|   RCOOKIE:  4f dd 82 29  9e 3b 6b 24
| found hash chain 3
| list 0x7f8c95320680 first entry 0x7f8c95c500c8
| inserted state 0x7f8c95c51c08 entry 0x7f8c95c52288 next 0x7f8c95c500c8 prev-next 0x7f8c95320680 into list
| updated next state 0x7f8c95c4fa48 entry 0x7f8c95c500c8 next (nil) prev-next 0x7f8c95c52288
| finding hash chain in icookie hash table
|   ICOOKIE:  bd 3e 5b 40  c7 67 f4 6e
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 24
| list 0x7f8c95320608 first entry 0x7f8c95c500e0
| inserted state 0x7f8c95c51c08 entry 0x7f8c95c522a0 next 0x7f8c95c500e0 prev-next 0x7f8c95320608 into list
| updated next state 0x7f8c95c4fa48 entry 0x7f8c95c500e0 next (nil) prev-next 0x7f8c95c522a0
| event_schedule called for 0 seconds
| event_schedule_tv: new EVENT_SO_DISCARD-pe@0x7f8c95c46b28
| event_schedule_tv called for about 0 seconds and change
| inserting event EVENT_SO_DISCARD, timeout in 0.000000 seconds for #2
| state #1 requesting EVENT_CRYPTO_FAILED to be deleted
| delete_pluto_event: release EVENT_CRYPTO_FAILED-pe@0x7f8c95c4f508
| ikev2_replace_delay() picked up half-open SA ike_life:60
| event_schedule called for 60 seconds
| event_schedule_tv: new EVENT_SA_EXPIRE-pe@0x7f8c95c4f508
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_SA_EXPIRE, timeout in 60.000000 seconds for #1
| parent state #1: STATE_PARENT_I1(half-open-ike) => STATE_PARENT_I2(open-ike)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 1
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| **emit ISAKMP Message:
|    initiator cookie:
|   bd 3e 5b 40  c7 67 f4 6e
|    responder cookie:
|   4f dd 82 29  9e 3b 6b 24
|    next payload type: ISAKMP_NEXT_v2SK (0x2e)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_AUTH (0x23)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 01
| ***emit IKEv2 Encryption Payload:
|    next payload type: ISAKMP_NEXT_v2IDi (0x23)
|    flags: none (0x0)
| emitting 8 raw bytes of IV into IKEv2 Encryption Payload
| IV  01 43 4a 3b  d0 97 59 5a
| IKEv2 CERT: send a certificate?
| IKEv2 CERT: OK to send a certificate
| hmac PRF sha2_512 init symkey-key@0x7f8c88006ca0 (size 64)
| extract symkey clone for NSS algorithm: sha2_512, mechanism: SHA512_HMAC(625), flags: 800
| EXTRACT_KEY_FROM_KEY: key@0x7f8c88006ca0, key-offset: 0, key-size: 64, flags: 0x800 -> target: SHA512_HMAC
| EXTRACT_KEY_FROM_KEY: key-key@0x7f8c88006ca0, size: 64 bytes, type/mechanism: EXTRACT_KEY_FROM_KEY (0x00000365)
| EXTRACT_KEY_FROM_KEY: new result-key@0x7f8c880089c0, size: 64 bytes, type/mechanism: SHA512_HMAC (0x00000271)
| hmac prf: created sha2_512 context 0x7f8c95c526f0 from symkey-key@0x7f8c880089c0
| hmac prf: begin sha2_512 with context 0x7f8c95c526f0 from symkey-key@0x7f8c880089c0
| hmac: release clone-key@0x7f8c880089c0
| hmac PRF sha2_512 crypt-prf@0x7f8c95c52e28
| *****emit IKEv2 Identification Payload:
|    next payload type: ISAKMP_NEXT_v2CERT (0x25)
|    flags: none (0x0)
|    id_type: ID_FQDN (0x2)
| emitting 26 raw bytes of my identity into IKEv2 Identification Payload
| my identity  77 65 73 74  2e 74 65 73  74 69 6e 67  2e 6c 69 62
| my identity  72 65 73 77  61 6e 2e 6f  72 67
| emitting length of IKEv2 Identification Payload: 34
| idhash calc I2  02 00 00 00  77 65 73 74  2e 74 65 73  74 69 6e 67
| idhash calc I2  2e 6c 69 62  72 65 73 77  61 6e 2e 6f  72 67
| hmac PRF sha2_512 update data-bytes@0x7f8c9532f4ec (length 30)
| hmac PRF sha2_512 final-bytes ...
| hmac PRF sha2_512 final-bytes@0x7fff25256df0 (length 64)
| IKEv2 CERTREQ: send a cert request?
| IKEv2 CERTREQ: no CA DN known to send
| Sending [CERT] of certificate: E=user-west@testing.libreswan.org,CN=west.testing.libreswan.org,OU=Test Department,O=Libreswan,L=Toronto,ST=Ontario,C=CA
| next payload is neither CERT or CERTREQ
| *****emit IKEv2 Certificate Payload:
|    next payload type: ISAKMP_NEXT_v2AUTH (0x27)
|    flags: none (0x0)
|    ikev2 cert encoding: CERT_X509_SIGNATURE (0x4)
| emitting 967 raw bytes of CERT into IKEv2 Certificate Payload
| CERT  30 82 03 c3  30 82 03 2c  a0 03 02 01  02 02 01 04
| CERT  30 0d 06 09  2a 86 48 86  f7 0d 01 01  05 05 00 30
| CERT  81 ac 31 0b  30 09 06 03  55 04 06 13  02 43 41 31
| CERT  10 30 0e 06  03 55 04 08  0c 07 4f 6e  74 61 72 69
| CERT  6f 31 10 30  0e 06 03 55  04 07 0c 07  54 6f 72 6f
| CERT  6e 74 6f 31  12 30 10 06  03 55 04 0a  0c 09 4c 69
| CERT  62 72 65 73  77 61 6e 31  18 30 16 06  03 55 04 0b
| CERT  0c 0f 54 65  73 74 20 44  65 70 61 72  74 6d 65 6e
| CERT  74 31 25 30  23 06 03 55  04 03 0c 1c  4c 69 62 72
| CERT  65 73 77 61  6e 20 74 65  73 74 20 43  41 20 66 6f
| CERT  72 20 6d 61  69 6e 63 61  31 24 30 22  06 09 2a 86
| CERT  48 86 f7 0d  01 09 01 16  15 74 65 73  74 69 6e 67
| CERT  40 6c 69 62  72 65 73 77  61 6e 2e 6f  72 67 30 22
| CERT  18 0f 32 30  31 37 30 35  30 32 32 32  33 32 30 39
| CERT  5a 18 0f 32  30 32 30 30  35 30 31 32  32 33 32 30
| CERT  39 5a 30 81  b4 31 0b 30  09 06 03 55  04 06 13 02
| CERT  43 41 31 10  30 0e 06 03  55 04 08 0c  07 4f 6e 74
| CERT  61 72 69 6f  31 10 30 0e  06 03 55 04  07 0c 07 54
| CERT  6f 72 6f 6e  74 6f 31 12  30 10 06 03  55 04 0a 0c
| CERT  09 4c 69 62  72 65 73 77  61 6e 31 18  30 16 06 03
| CERT  55 04 0b 0c  0f 54 65 73  74 20 44 65  70 61 72 74
| CERT  6d 65 6e 74  31 23 30 21  06 03 55 04  03 0c 1a 77
| CERT  65 73 74 2e  74 65 73 74  69 6e 67 2e  6c 69 62 72
| CERT  65 73 77 61  6e 2e 6f 72  67 31 2e 30  2c 06 09 2a
| CERT  86 48 86 f7  0d 01 09 01  16 1f 75 73  65 72 2d 77
| CERT  65 73 74 40  74 65 73 74  69 6e 67 2e  6c 69 62 72
| CERT  65 73 77 61  6e 2e 6f 72  67 30 81 9f  30 0d 06 09
| CERT  2a 86 48 86  f7 0d 01 01  01 05 00 03  81 8d 00 30
| CERT  81 89 02 81  81 00 da 1c  5a 87 0a b7  ba 0e 17 b6
| CERT  62 7d 8b 68  a6 2d 94 1d  ec d4 f1 06  9e 55 9e 3b
| CERT  79 2e 46 a4  bd 3a ac 9b  07 38 fa a2  74 97 75 3e
| CERT  17 8e 5c c1  7e 68 6a d7  af 19 b9 12  54 c9 37 c0
| CERT  f6 05 a8 d4  5c 6d 0c 63  e0 a2 dd a9  0d bb 14 42
| CERT  f4 7f 76 f0  19 70 e4 44  7c fd c2 cc  2f 01 75 8a
| CERT  f9 0c d1 06  5f ad b3 2b  94 4d 69 97  5c 15 0c 54
| CERT  02 7e 0d a6  b4 a2 8f c5  22 b4 7d f2  27 41 e4 0c
| CERT  1d 81 a8 02  07 01 02 03  01 00 01 a3  81 e6 30 81
| CERT  e3 30 09 06  03 55 1d 13  04 02 30 00  30 47 06 03
| CERT  55 1d 11 04  40 30 3e 82  1a 77 65 73  74 2e 74 65
| CERT  73 74 69 6e  67 2e 6c 69  62 72 65 73  77 61 6e 2e
| CERT  6f 72 67 81  1a 77 65 73  74 40 74 65  73 74 69 6e
| CERT  67 2e 6c 69  62 72 65 73  77 61 6e 2e  6f 72 67 87
| CERT  04 c0 01 02  2d 30 0b 06  03 55 1d 0f  04 04 03 02
| CERT  07 80 30 41  06 08 2b 06  01 05 05 07  01 01 04 35
| CERT  30 33 30 31  06 08 2b 06  01 05 05 07  30 01 86 25
| CERT  68 74 74 70  3a 2f 2f 6e  69 63 2e 74  65 73 74 69
| CERT  6e 67 2e 6c  69 62 72 65  73 77 61 6e  2e 6f 72 67
| CERT  3a 32 35 36  30 30 3d 06  03 55 1d 1f  04 36 30 34
| CERT  30 32 a0 30  a0 2e 86 2c  68 74 74 70  3a 2f 2f 6e
| CERT  69 63 2e 74  65 73 74 69  6e 67 2e 6c  69 62 72 65
| CERT  73 77 61 6e  2e 6f 72 67  2f 72 65 76  6f 6b 65 64
| CERT  2e 63 72 6c  30 0d 06 09  2a 86 48 86  f7 0d 01 01
| CERT  05 05 00 03  81 81 00 4a  b7 04 c4 c8  21 9d c3 e2
| CERT  12 4e ee 16  0b 4d f3 5d  6e 05 44 ba  ad b6 21 58
| CERT  9d 04 6c 9e  49 ca 9f 70  15 f7 f3 1a  b1 c1 cf d3
| CERT  16 92 11 d9  48 ab 97 3b  ec f0 b7 18  e0 16 1a ca
| CERT  68 00 48 27  85 f8 6b 38  02 77 24 6a  51 49 26 f1
| CERT  a6 b7 83 c7  ce ba 36 35  44 3b 77 47  8e 79 c5 4d
| CERT  02 48 ae a5  e6 9e 77 66  72 d6 c5 1c  71 97 d8 44
| CERT  50 89 0c 5d  d3 7f 0c b9  83 63 33 6a  98 e0 39 d0
| CERT  b2 f6 20 07  55 77 f9
| emitting length of IKEv2 Certificate Payload: 972
| not sending INITIAL_CONTACT
| *****emit IKEv2 Authentication Payload:
|    next payload type: ISAKMP_NEXT_v2SA (0x21)
|    flags: none (0x0)
|    auth method: IKEv2_AUTH_RSA (0x1)
| started looking for secret for @west.testing.libreswan.org->@NOTeast.testing.libreswan.org of kind PPK_RSA
| searching for certificate PPK_RSA:AwEAAdocW vs PPK_RSA:AwEAAdocW
| k did match
| n did match
| e did match
| rsa key AwEAAdocW found
| inputs to hash1 (first packet)
|   bd 3e 5b 40  c7 67 f4 6e  00 00 00 00  00 00 00 00
|   21 20 22 08  00 00 00 00  00 00 02 ec  22 00 01 64
|   02 00 00 54  01 01 00 09  03 00 00 0c  01 00 00 14
|   80 0e 01 00  03 00 00 08  02 00 00 07  03 00 00 08
|   02 00 00 05  03 00 00 08  02 00 00 02  03 00 00 08
|   03 00 00 00  03 00 00 08  04 00 00 0e  03 00 00 08
|   04 00 00 0f  03 00 00 08  04 00 00 10  00 00 00 08
|   04 00 00 12  02 00 00 54  02 01 00 09  03 00 00 0c
|   01 00 00 14  80 0e 00 80  03 00 00 08  02 00 00 07
|   03 00 00 08  02 00 00 05  03 00 00 08  02 00 00 02
|   03 00 00 08  03 00 00 00  03 00 00 08  04 00 00 0e
|   03 00 00 08  04 00 00 0f  03 00 00 08  04 00 00 10
|   00 00 00 08  04 00 00 12  02 00 00 5c  03 01 00 0a
|   03 00 00 0c  01 00 00 0c  80 0e 01 00  03 00 00 08
|   02 00 00 07  03 00 00 08  02 00 00 05  03 00 00 08
|   02 00 00 02  03 00 00 08  03 00 00 0e  03 00 00 08
|   03 00 00 0c  03 00 00 08  03 00 00 02  03 00 00 08
|   04 00 00 0e  03 00 00 08  04 00 00 0f  00 00 00 08
|   04 00 00 05  00 00 00 5c  04 01 00 0a  03 00 00 0c
|   01 00 00 0c  80 0e 00 80  03 00 00 08  02 00 00 07
|   03 00 00 08  02 00 00 05  03 00 00 08  02 00 00 02
|   03 00 00 08  03 00 00 0e  03 00 00 08  03 00 00 0c
|   03 00 00 08  03 00 00 02  03 00 00 08  04 00 00 0e
|   03 00 00 08  04 00 00 0f  00 00 00 08  04 00 00 05
|   28 00 01 08  00 0e 00 00  e8 a5 62 db  0a 22 31 df
|   5e a0 ed 39  c5 3e 0f d0  c7 11 7b 53  45 54 f3 98
|   06 14 88 c3  fd b9 1c 72  55 8f a4 81  b7 4a f6 53
|   53 57 a7 c7  1c 4e 50 74  9c 5f a4 84  f2 38 1e b0
|   c0 76 a2 ed  27 6e d9 31  41 10 4c ba  b0 df b1 40
|   44 47 79 8c  d4 ec c3 e0  c2 19 22 46  82 83 0d 7d
|   f2 9d a2 08  c4 2f 1b 11  18 0b 45 db  f8 7a 5e 61
|   7c 1e ae a5  15 c9 42 83  7e 34 95 0f  49 33 7b 1d
|   3c 68 bb c9  2d 06 b1 a2  00 e0 eb 83  1d 05 b8 78
|   a5 d5 17 36  86 f1 b8 85  c2 9e fb c5  0a fe 3d f2
|   a7 be 8d fa  7d e8 04 bc  1a b3 96 b4  ee 2d 86 70
|   af 5a 4a 02  d1 a6 df 6b  fe 8d d2 3b  67 2d b4 d4
|   ac bb d0 1e  d0 cd 71 e9  7e 35 49 cd  c1 22 a9 95
|   44 3a 63 13  38 1b de 10  dc 37 75 7f  b1 5c 3b 90
|   d6 8b 68 b3  10 1f a3 33  a7 7f 28 a6  7c 01 ce f4
|   a3 2e c2 61  4f 48 e5 1f  de 92 5b 0c  69 af a4 6a
|   20 8b 33 6b  19 92 fa e2  29 00 00 24  c7 14 ec e0
|   84 14 95 1c  0c 61 de d3  23 15 fa c8  ff d6 0f 15
|   ec 6f 3a 4c  d9 0b 71 ce  76 1c e1 69  29 00 00 08
|   00 00 40 2e  29 00 00 1c  00 00 40 04  fa 57 50 49
|   bd 2c 92 c3  b9 3a f8 cb  e7 eb 15 85  47 bd 3e a9
|   00 00 00 1c  00 00 40 05  6d f5 d5 b9  ef 76 19 7d
|   4b 95 ad a9  25 d4 b9 8e  87 90 f7 dc
| inputs to hash2 (responder nonce)
|   46 0c 96 48  11 aa 61 01  93 4d da a4  bb 43 bb c1
|   91 2c 12 5a  13 1f 31 57  b5 f0 ae 5e  44 9c 6f 3b
| idhash  e6 5e 86 db  c2 85 c6 e7  ba f5 55 32  10 f4 55 c5
| idhash  a3 bb a1 40  0c ad b6 38  f3 58 fa 9a  96 a9 c2 0a
| idhash  79 80 e3 9c  00 75 75 c3  8f 55 56 34  e7 58 31 0f
| idhash  de 07 ab f2  5a 1d 19 4f  e3 98 1e d9  cc d2 08 5d
| sighash hash sha init
| sighash sha hasher: context 0x7f8c95c526a0
| sighash hash sha digest first packet-chunk@0x7f8c95c512e8 (length 748)
| sighash hash sha digest nunce-chunk@0x7f8c95c4f7a8 (length 32)
| sighash hash sha digest IDHASH-bytes@0x7fff25256df0 (length 64)
| sighash hash sha final bytes@0x7fff252566ef (length 20)
| sighash  3b 75 48 33  fa 40 76 15  03 5c ae fa  7e 4d 84 4b
| sighash  d3 d4 99 26
| v2rsa octets  30 21 30 09  06 05 2b 0e  03 02 1a 05  00 04 14 3b
| v2rsa octets  75 48 33 fa  40 76 15 03  5c ae fa 7e  4d 84 4b d3
| v2rsa octets  d4 99 26
| RSA_sign_hash: Started using NSS
| NSS: Authentication to NSS successful
| RSA_sign_hash: Ended using NSS
| emitting 128 raw bytes of rsa signature into IKEv2 Authentication Payload
| rsa signature  93 ba 65 c2  bd 0e 5d ad  05 2a 69 ba  5b 9b e9 d5
| rsa signature  3e 56 ec ab  2b 5f 20 13  1d a9 60 fa  c4 9c 36 0a
| rsa signature  0f 98 e3 6e  87 2d a9 fe  56 f4 08 28  a9 ec 56 ff
| rsa signature  ca f6 74 55  fe 17 c8 53  02 fd f3 c1  a5 06 b5 8c
| rsa signature  61 9e f6 fe  52 9e 14 ce  17 d1 fd 89  96 01 41 8f
| rsa signature  03 3f f0 2c  0c ac 36 de  d4 fc 4a 4c  cf 02 ac 34
| rsa signature  64 4a 9f d0  da 7c 7d 9a  5f 94 24 54  da 44 d7 08
| rsa signature  41 61 87 0a  73 41 d2 02  83 6f 18 5c  92 11 b7 4d
| emitting length of IKEv2 Authentication Payload: 136
| getting first pending from state #1
| netlink_get_spi: allocated 0x2c0a0b46 for esp.0@192.1.2.45
| selecting default ESP/AH proposals for initiator
"san" #1: san ESP/AH proposals for initiator: 1:ESP:ENCR=AES_GCM_C_256;INTEG=NONE;ESN=DISABLED 2:ESP:ENCR=AES_GCM_C_128;INTEG=NONE;ESN=DISABLED 3:ESP:ENCR=AES_CBC_256;INTEG=HMAC_SHA2_512_256,HMAC_SHA2_256_128;ESN=DISABLED 4:ESP:ENCR=AES_CBC_128;INTEG=HMAC_SHA2_512_256,HMAC_SHA2_256_128;ESN=DISABLED 5:ESP:ENCR=AES_CBC_128;INTEG=HMAC_SHA1_96;ESN=DISABLED (default)
| Emitting ikev2_proposals ...
| *****emit IKEv2 Security Association Payload:
|    next payload type: ISAKMP_NEXT_v2TSi (0x2c)
|    flags: none (0x0)
| ******emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    prop #: 1 (0x1)
|    proto ID: IKEv2_SEC_PROTO_ESP (0x3)
|    spi size: 4 (0x4)
|    # transforms: 3 (0x3)
| emitting 4 raw bytes of our spi into IKEv2 Proposal Substructure Payload
| our spi  2c 0a 0b 46
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_GCM_C (0x14)
| ********emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_NONE (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_ESN (0x5)
|    IKEv2 transform ID: ESN_DISABLED (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 40
| ******emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    prop #: 2 (0x2)
|    proto ID: IKEv2_SEC_PROTO_ESP (0x3)
|    spi size: 4 (0x4)
|    # transforms: 3 (0x3)
| emitting 4 raw bytes of our spi into IKEv2 Proposal Substructure Payload
| our spi  2c 0a 0b 46
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_GCM_C (0x14)
| ********emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_NONE (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_ESN (0x5)
|    IKEv2 transform ID: ESN_DISABLED (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 40
| ******emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    prop #: 3 (0x3)
|    proto ID: IKEv2_SEC_PROTO_ESP (0x3)
|    spi size: 4 (0x4)
|    # transforms: 4 (0x4)
| emitting 4 raw bytes of our spi into IKEv2 Proposal Substructure Payload
| our spi  2c 0a 0b 46
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_CBC (0xc)
| ********emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_512_256 (0xe)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_256_128 (0xc)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_ESN (0x5)
|    IKEv2 transform ID: ESN_DISABLED (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 48
| ******emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_NON_LAST (0x2)
|    prop #: 4 (0x4)
|    proto ID: IKEv2_SEC_PROTO_ESP (0x3)
|    spi size: 4 (0x4)
|    # transforms: 4 (0x4)
| emitting 4 raw bytes of our spi into IKEv2 Proposal Substructure Payload
| our spi  2c 0a 0b 46
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_CBC (0xc)
| ********emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_512_256 (0xe)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA2_256_128 (0xc)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_ESN (0x5)
|    IKEv2 transform ID: ESN_DISABLED (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 48
| ******emit IKEv2 Proposal Substructure Payload:
|    last proposal: v2_PROPOSAL_LAST (0x0)
|    prop #: 5 (0x5)
|    proto ID: IKEv2_SEC_PROTO_ESP (0x3)
|    spi size: 4 (0x4)
|    # transforms: 3 (0x3)
| emitting 4 raw bytes of our spi into IKEv2 Proposal Substructure Payload
| our spi  2c 0a 0b 46
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_ENCR (0x1)
|    IKEv2 transform ID: AES_CBC (0xc)
| ********emit IKEv2 Attribute Substructure Payload:
|    af+type: IKEv2_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of IKEv2 Transform Substructure Payload: 12
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_NON_LAST (0x3)
|    IKEv2 transform type: TRANS_TYPE_INTEG (0x3)
|    IKEv2 transform ID: AUTH_HMAC_SHA1_96 (0x2)
| emitting length of IKEv2 Transform Substructure Payload: 8
| *******emit IKEv2 Transform Substructure Payload:
|    last transform: v2_TRANSFORM_LAST (0x0)
|    IKEv2 transform type: TRANS_TYPE_ESN (0x5)
|    IKEv2 transform ID: ESN_DISABLED (0x0)
| emitting length of IKEv2 Transform Substructure Payload: 8
| emitting length of IKEv2 Proposal Substructure Payload: 40
| emitting length of IKEv2 Security Association Payload: 220
| *****emit IKEv2 Traffic Selector Payload:
|    next payload type: ISAKMP_NEXT_v2TSr (0x2d)
|    flags: none (0x0)
|    number of TS: 1 (0x1)
| ******emit IKEv2 Traffic Selector:
|    TS type: IKEv2_TS_IPV4_ADDR_RANGE (0x7)
|    IP Protocol ID: 0 (0x0)
|    start port: 0 (0x0)
|    end port: 65535 (0xffff)
| emitting 4 raw bytes of ipv4 low into IKEv2 Traffic Selector
| ipv4 low  c0 01 02 2d
| emitting 4 raw bytes of ipv4 high into IKEv2 Traffic Selector
| ipv4 high  c0 01 02 2d
| emitting length of IKEv2 Traffic Selector: 16
| emitting length of IKEv2 Traffic Selector Payload: 24
| *****emit IKEv2 Traffic Selector Payload:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    number of TS: 1 (0x1)
| ******emit IKEv2 Traffic Selector:
|    TS type: IKEv2_TS_IPV4_ADDR_RANGE (0x7)
|    IP Protocol ID: 0 (0x0)
|    start port: 0 (0x0)
|    end port: 65535 (0xffff)
| emitting 4 raw bytes of ipv4 low into IKEv2 Traffic Selector
| ipv4 low  c0 01 02 17
| emitting 4 raw bytes of ipv4 high into IKEv2 Traffic Selector
| ipv4 high  c0 01 02 17
| emitting length of IKEv2 Traffic Selector: 16
| emitting length of IKEv2 Traffic Selector Payload: 24
| ikev2_padup_pre_encrypt: adding 1 byte padding-length
| emitting 1 raw bytes of padding and length into cleartext
| padding and length  00
| emitting 16 zero bytes of length of truncated HMAC/KEY into IKEv2 Encryption Payload
| emitting length of IKEv2 Encryption Payload: 1439
| emitting length of ISAKMP Message: 1467
| **emit ISAKMP Message:
|    initiator cookie:
|   bd 3e 5b 40  c7 67 f4 6e
|    responder cookie:
|   4f dd 82 29  9e 3b 6b 24
|    next payload type: ISAKMP_NEXT_v2SKF (0x35)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_AUTH (0x23)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 01
| ***emit IKEv2 Encrypted Fragment:
|    next payload type: ISAKMP_NEXT_v2IDi (0x23)
|    flags: none (0x0)
|    fragment number: 1 (0x1)
|    total fragments: 3 (0x3)
| emitting 8 raw bytes of IV into IKEv2 Encrypted Fragment
| IV  f1 26 71 61  0c 2e 3a c4
| emitting 478 raw bytes of cleartext fragment into cleartext
| cleartext fragment  25 00 00 22  02 00 00 00  77 65 73 74  2e 74 65 73
| cleartext fragment  74 69 6e 67  2e 6c 69 62  72 65 73 77  61 6e 2e 6f
| cleartext fragment  72 67 27 00  03 cc 04 30  82 03 c3 30  82 03 2c a0
| cleartext fragment  03 02 01 02  02 01 04 30  0d 06 09 2a  86 48 86 f7
| cleartext fragment  0d 01 01 05  05 00 30 81  ac 31 0b 30  09 06 03 55
| cleartext fragment  04 06 13 02  43 41 31 10  30 0e 06 03  55 04 08 0c
| cleartext fragment  07 4f 6e 74  61 72 69 6f  31 10 30 0e  06 03 55 04
| cleartext fragment  07 0c 07 54  6f 72 6f 6e  74 6f 31 12  30 10 06 03
| cleartext fragment  55 04 0a 0c  09 4c 69 62  72 65 73 77  61 6e 31 18
| cleartext fragment  30 16 06 03  55 04 0b 0c  0f 54 65 73  74 20 44 65
| cleartext fragment  70 61 72 74  6d 65 6e 74  31 25 30 23  06 03 55 04
| cleartext fragment  03 0c 1c 4c  69 62 72 65  73 77 61 6e  20 74 65 73
| cleartext fragment  74 20 43 41  20 66 6f 72  20 6d 61 69  6e 63 61 31
| cleartext fragment  24 30 22 06  09 2a 86 48  86 f7 0d 01  09 01 16 15
| cleartext fragment  74 65 73 74  69 6e 67 40  6c 69 62 72  65 73 77 61
| cleartext fragment  6e 2e 6f 72  67 30 22 18  0f 32 30 31  37 30 35 30
| cleartext fragment  32 32 32 33  32 30 39 5a  18 0f 32 30  32 30 30 35
| cleartext fragment  30 31 32 32  33 32 30 39  5a 30 81 b4  31 0b 30 09
| cleartext fragment  06 03 55 04  06 13 02 43  41 31 10 30  0e 06 03 55
| cleartext fragment  04 08 0c 07  4f 6e 74 61  72 69 6f 31  10 30 0e 06
| cleartext fragment  03 55 04 07  0c 07 54 6f  72 6f 6e 74  6f 31 12 30
| cleartext fragment  10 06 03 55  04 0a 0c 09  4c 69 62 72  65 73 77 61
| cleartext fragment  6e 31 18 30  16 06 03 55  04 0b 0c 0f  54 65 73 74
| cleartext fragment  20 44 65 70  61 72 74 6d  65 6e 74 31  23 30 21 06
| cleartext fragment  03 55 04 03  0c 1a 77 65  73 74 2e 74  65 73 74 69
| cleartext fragment  6e 67 2e 6c  69 62 72 65  73 77 61 6e  2e 6f 72 67
| cleartext fragment  31 2e 30 2c  06 09 2a 86  48 86 f7 0d  01 09 01 16
| cleartext fragment  1f 75 73 65  72 2d 77 65  73 74 40 74  65 73 74 69
| cleartext fragment  6e 67 2e 6c  69 62 72 65  73 77 61 6e  2e 6f 72 67
| cleartext fragment  30 81 9f 30  0d 06 09 2a  86 48 86 f7  0d 01
| ikev2_padup_pre_encrypt: adding 1 byte padding-length
| emitting 1 raw bytes of padding and length into cleartext
| padding and length  00
| emitting 16 zero bytes of length of truncated HMAC/KEY into IKEv2 Encrypted Fragment
| emitting length of IKEv2 Encrypted Fragment: 511
| emitting length of ISAKMP Message: 539
| Salt before authenticated encryption:
|   4f 66 26 9d
| IV before authenticated encryption:
|   f1 26 71 61  0c 2e 3a c4
| AAD before authenticated encryption:
|   bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
|   35 20 23 08  00 00 00 01  00 00 02 1b  23 00 01 ff
|   00 01 00 03
| data before authenticated encryption:
|   25 00 00 22  02 00 00 00  77 65 73 74  2e 74 65 73
|   74 69 6e 67  2e 6c 69 62  72 65 73 77  61 6e 2e 6f
|   72 67 27 00  03 cc 04 30  82 03 c3 30  82 03 2c a0
|   03 02 01 02  02 01 04 30  0d 06 09 2a  86 48 86 f7
|   0d 01 01 05  05 00 30 81  ac 31 0b 30  09 06 03 55
|   04 06 13 02  43 41 31 10  30 0e 06 03  55 04 08 0c
|   07 4f 6e 74  61 72 69 6f  31 10 30 0e  06 03 55 04
|   07 0c 07 54  6f 72 6f 6e  74 6f 31 12  30 10 06 03
|   55 04 0a 0c  09 4c 69 62  72 65 73 77  61 6e 31 18
|   30 16 06 03  55 04 0b 0c  0f 54 65 73  74 20 44 65
|   70 61 72 74  6d 65 6e 74  31 25 30 23  06 03 55 04
|   03 0c 1c 4c  69 62 72 65  73 77 61 6e  20 74 65 73
|   74 20 43 41  20 66 6f 72  20 6d 61 69  6e 63 61 31
|   24 30 22 06  09 2a 86 48  86 f7 0d 01  09 01 16 15
|   74 65 73 74  69 6e 67 40  6c 69 62 72  65 73 77 61
|   6e 2e 6f 72  67 30 22 18  0f 32 30 31  37 30 35 30
|   32 32 32 33  32 30 39 5a  18 0f 32 30  32 30 30 35
|   30 31 32 32  33 32 30 39  5a 30 81 b4  31 0b 30 09
|   06 03 55 04  06 13 02 43  41 31 10 30  0e 06 03 55
|   04 08 0c 07  4f 6e 74 61  72 69 6f 31  10 30 0e 06
|   03 55 04 07  0c 07 54 6f  72 6f 6e 74  6f 31 12 30
|   10 06 03 55  04 0a 0c 09  4c 69 62 72  65 73 77 61
|   6e 31 18 30  16 06 03 55  04 0b 0c 0f  54 65 73 74
|   20 44 65 70  61 72 74 6d  65 6e 74 31  23 30 21 06
|   03 55 04 03  0c 1a 77 65  73 74 2e 74  65 73 74 69
|   6e 67 2e 6c  69 62 72 65  73 77 61 6e  2e 6f 72 67
|   31 2e 30 2c  06 09 2a 86  48 86 f7 0d  01 09 01 16
|   1f 75 73 65  72 2d 77 65  73 74 40 74  65 73 74 69
|   6e 67 2e 6c  69 62 72 65  73 77 61 6e  2e 6f 72 67
|   30 81 9f 30  0d 06 09 2a  86 48 86 f7  0d 01 00
| integ before authenticated encryption:
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| data after authenticated encryption:
|   17 65 63 ef  2a ac 85 2c  37 97 23 08  49 ad 6c bd
|   2c 6a 3b eb  a6 9d 25 3f  e1 07 b8 e6  03 32 2c ab
|   92 b1 7d c5  ca b7 6d 61  c6 34 d5 ec  68 6d 1a 21
|   7e 1f 6d 16  0e 1b 10 54  87 14 8e c7  f1 2a 29 f5
|   20 6c 4c 0d  4b 8d fa c0  d0 7b 4c c9  b6 80 fc f9
|   f4 b2 c6 b5  a3 44 af f0  2a e6 60 9f  a1 3c b4 24
|   ae ee 01 0f  b4 dc fd c9  55 47 40 6c  65 07 60 2b
|   f8 a8 9f b8  a0 38 c5 a9  d4 d7 dd e7  1e a2 34 f8
|   c0 a4 7b 7e  2a 11 88 89  f7 24 ff 3a  ce 61 89 11
|   95 ff 01 da  78 2c ed 33  2a 0f 7d 60  3b c1 76 7e
|   2c 4a cc c3  7b 86 45 82  15 4a 95 61  87 5e 27 48
|   d8 39 3f e4  6e e9 1b 92  d4 84 22 b1  d1 e2 42 e8
|   ea 08 b8 13  16 63 86 d3  fb dd ad 3e  12 6f ac ec
|   c8 ef 12 6d  81 d4 92 67  a3 a9 5b c8  47 1b 4e 50
|   68 52 60 eb  ea f9 00 32  58 87 16 c2  bc 42 b6 8d
|   bd 3d b2 b5  8b a3 09 40  71 df 11 af  d8 09 42 1b
|   7f f4 15 14  a5 43 40 eb  0d 7c 64 78  6d a7 9a e9
|   72 79 5e 4e  b2 c7 35 5e  8f 5b e0 6f  10 82 bf 64
|   d9 4f 33 c3  58 d9 af f7  d4 ec 86 bf  46 f7 1f bb
|   b1 82 7d 6f  5a b3 a5 f2  94 98 6b b6  cf b8 3c 91
|   6f 60 44 1b  63 93 eb 40  26 f2 1c 77  bc 95 20 7d
|   21 e6 3e 61  eb cd 51 66  01 01 af da  30 64 22 e9
|   09 04 49 7e  05 33 b2 38  45 3b 86 ea  9f 4f 95 3a
|   b0 85 fa 0d  c3 dc dd d0  79 04 63 79  35 3f 80 dd
|   e0 28 3a 92  1e 36 66 e7  19 0e 83 af  46 bc a2 c2
|   8b ac ce 0c  68 49 3d 94  df 26 3b 65  83 63 b1 ee
|   37 27 e7 42  01 9f 25 de  57 f6 03 a7  c3 01 fe 9c
|   ef 15 5b 69  fc 7f e1 f9  00 12 a9 0d  47 64 0d 2c
|   19 13 b6 c4  34 7b fa 10  c7 87 13 ea  e0 9a d4 34
|   6b 45 e6 c6  e1 0e 6d a2  09 d0 f8 a4  aa e8 f3
| integ after authenticated encryption:
|   5d c4 94 86  91 b4 77 67  d4 8e 43 67  dc ab bf dd
| **emit ISAKMP Message:
|    initiator cookie:
|   bd 3e 5b 40  c7 67 f4 6e
|    responder cookie:
|   4f dd 82 29  9e 3b 6b 24
|    next payload type: ISAKMP_NEXT_v2SKF (0x35)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_AUTH (0x23)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 01
| ***emit IKEv2 Encrypted Fragment:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    fragment number: 2 (0x2)
|    total fragments: 3 (0x3)
| emitting 8 raw bytes of IV into IKEv2 Encrypted Fragment
| IV  e8 f0 85 4a  ba 9b 00 7f
| emitting 478 raw bytes of cleartext fragment into cleartext
| cleartext fragment  01 01 05 00  03 81 8d 00  30 81 89 02  81 81 00 da
| cleartext fragment  1c 5a 87 0a  b7 ba 0e 17  b6 62 7d 8b  68 a6 2d 94
| cleartext fragment  1d ec d4 f1  06 9e 55 9e  3b 79 2e 46  a4 bd 3a ac
| cleartext fragment  9b 07 38 fa  a2 74 97 75  3e 17 8e 5c  c1 7e 68 6a
| cleartext fragment  d7 af 19 b9  12 54 c9 37  c0 f6 05 a8  d4 5c 6d 0c
| cleartext fragment  63 e0 a2 dd  a9 0d bb 14  42 f4 7f 76  f0 19 70 e4
| cleartext fragment  44 7c fd c2  cc 2f 01 75  8a f9 0c d1  06 5f ad b3
| cleartext fragment  2b 94 4d 69  97 5c 15 0c  54 02 7e 0d  a6 b4 a2 8f
| cleartext fragment  c5 22 b4 7d  f2 27 41 e4  0c 1d 81 a8  02 07 01 02
| cleartext fragment  03 01 00 01  a3 81 e6 30  81 e3 30 09  06 03 55 1d
| cleartext fragment  13 04 02 30  00 30 47 06  03 55 1d 11  04 40 30 3e
| cleartext fragment  82 1a 77 65  73 74 2e 74  65 73 74 69  6e 67 2e 6c
| cleartext fragment  69 62 72 65  73 77 61 6e  2e 6f 72 67  81 1a 77 65
| cleartext fragment  73 74 40 74  65 73 74 69  6e 67 2e 6c  69 62 72 65
| cleartext fragment  73 77 61 6e  2e 6f 72 67  87 04 c0 01  02 2d 30 0b
| cleartext fragment  06 03 55 1d  0f 04 04 03  02 07 80 30  41 06 08 2b
| cleartext fragment  06 01 05 05  07 01 01 04  35 30 33 30  31 06 08 2b
| cleartext fragment  06 01 05 05  07 30 01 86  25 68 74 74  70 3a 2f 2f
| cleartext fragment  6e 69 63 2e  74 65 73 74  69 6e 67 2e  6c 69 62 72
| cleartext fragment  65 73 77 61  6e 2e 6f 72  67 3a 32 35  36 30 30 3d
| cleartext fragment  06 03 55 1d  1f 04 36 30  34 30 32 a0  30 a0 2e 86
| cleartext fragment  2c 68 74 74  70 3a 2f 2f  6e 69 63 2e  74 65 73 74
| cleartext fragment  69 6e 67 2e  6c 69 62 72  65 73 77 61  6e 2e 6f 72
| cleartext fragment  67 2f 72 65  76 6f 6b 65  64 2e 63 72  6c 30 0d 06
| cleartext fragment  09 2a 86 48  86 f7 0d 01  01 05 05 00  03 81 81 00
| cleartext fragment  4a b7 04 c4  c8 21 9d c3  e2 12 4e ee  16 0b 4d f3
| cleartext fragment  5d 6e 05 44  ba ad b6 21  58 9d 04 6c  9e 49 ca 9f
| cleartext fragment  70 15 f7 f3  1a b1 c1 cf  d3 16 92 11  d9 48 ab 97
| cleartext fragment  3b ec f0 b7  18 e0 16 1a  ca 68 00 48  27 85 f8 6b
| cleartext fragment  38 02 77 24  6a 51 49 26  f1 a6 b7 83  c7 ce
| ikev2_padup_pre_encrypt: adding 1 byte padding-length
| emitting 1 raw bytes of padding and length into cleartext
| padding and length  00
| emitting 16 zero bytes of length of truncated HMAC/KEY into IKEv2 Encrypted Fragment
| emitting length of IKEv2 Encrypted Fragment: 511
| emitting length of ISAKMP Message: 539
| Salt before authenticated encryption:
|   4f 66 26 9d
| IV before authenticated encryption:
|   e8 f0 85 4a  ba 9b 00 7f
| AAD before authenticated encryption:
|   bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
|   35 20 23 08  00 00 00 01  00 00 02 1b  00 00 01 ff
|   00 02 00 03
| data before authenticated encryption:
|   01 01 05 00  03 81 8d 00  30 81 89 02  81 81 00 da
|   1c 5a 87 0a  b7 ba 0e 17  b6 62 7d 8b  68 a6 2d 94
|   1d ec d4 f1  06 9e 55 9e  3b 79 2e 46  a4 bd 3a ac
|   9b 07 38 fa  a2 74 97 75  3e 17 8e 5c  c1 7e 68 6a
|   d7 af 19 b9  12 54 c9 37  c0 f6 05 a8  d4 5c 6d 0c
|   63 e0 a2 dd  a9 0d bb 14  42 f4 7f 76  f0 19 70 e4
|   44 7c fd c2  cc 2f 01 75  8a f9 0c d1  06 5f ad b3
|   2b 94 4d 69  97 5c 15 0c  54 02 7e 0d  a6 b4 a2 8f
|   c5 22 b4 7d  f2 27 41 e4  0c 1d 81 a8  02 07 01 02
|   03 01 00 01  a3 81 e6 30  81 e3 30 09  06 03 55 1d
|   13 04 02 30  00 30 47 06  03 55 1d 11  04 40 30 3e
|   82 1a 77 65  73 74 2e 74  65 73 74 69  6e 67 2e 6c
|   69 62 72 65  73 77 61 6e  2e 6f 72 67  81 1a 77 65
|   73 74 40 74  65 73 74 69  6e 67 2e 6c  69 62 72 65
|   73 77 61 6e  2e 6f 72 67  87 04 c0 01  02 2d 30 0b
|   06 03 55 1d  0f 04 04 03  02 07 80 30  41 06 08 2b
|   06 01 05 05  07 01 01 04  35 30 33 30  31 06 08 2b
|   06 01 05 05  07 30 01 86  25 68 74 74  70 3a 2f 2f
|   6e 69 63 2e  74 65 73 74  69 6e 67 2e  6c 69 62 72
|   65 73 77 61  6e 2e 6f 72  67 3a 32 35  36 30 30 3d
|   06 03 55 1d  1f 04 36 30  34 30 32 a0  30 a0 2e 86
|   2c 68 74 74  70 3a 2f 2f  6e 69 63 2e  74 65 73 74
|   69 6e 67 2e  6c 69 62 72  65 73 77 61  6e 2e 6f 72
|   67 2f 72 65  76 6f 6b 65  64 2e 63 72  6c 30 0d 06
|   09 2a 86 48  86 f7 0d 01  01 05 05 00  03 81 81 00
|   4a b7 04 c4  c8 21 9d c3  e2 12 4e ee  16 0b 4d f3
|   5d 6e 05 44  ba ad b6 21  58 9d 04 6c  9e 49 ca 9f
|   70 15 f7 f3  1a b1 c1 cf  d3 16 92 11  d9 48 ab 97
|   3b ec f0 b7  18 e0 16 1a  ca 68 00 48  27 85 f8 6b
|   38 02 77 24  6a 51 49 26  f1 a6 b7 83  c7 ce 00
| integ before authenticated encryption:
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| data after authenticated encryption:
|   bd 27 5f 4e  cf f0 3d e9  ee af 50 62  34 b6 35 76
|   d5 c6 a3 4e  f4 06 68 7e  e4 ee 11 f8  05 0c e7 63
|   eb 8f 01 56  de 1d ad 78  10 8e db 9f  96 c8 7f cb
|   92 b2 7a 90  eb d5 87 21  9d 38 51 34  4a 83 87 0d
|   61 d2 ea 41  31 f3 76 c2  02 71 25 df  81 fb 0b 0b
|   fa 5f 45 ae  16 15 38 47  ca 3b 69 d1  5c a9 30 2a
|   87 a8 8e e3  a4 1c 24 9d  71 b5 ba 86  8d 86 3f 13
|   7d 55 8c 3a  cd bc cd cf  08 18 07 36  54 87 0f ee
|   b9 fd 2e 24  d4 e1 8b 87  4d d4 3f f0  1e 25 c4 6d
|   9b 71 98 0e  08 02 b3 87  77 f0 b0 16  47 ce ea 45
|   57 c5 0e ac  ba 44 f4 8c  79 1c 8c cc  07 39 72 fd
|   91 05 ea 06  0e 25 bd da  d6 fa 7d 7d  83 60 2b 9c
|   ad 20 0b 7f  9b ad ed 54  59 f6 5f ee  a8 e2 6f 34
|   62 f4 e3 1e  a7 59 02 63  e1 22 91 fc  bf 41 1f 05
|   c9 42 39 c6  bd c4 5b bc  99 3d 53 ed  2a af 2e 2b
|   25 4c b2 79  86 d2 f8 53  64 aa bc e0  63 78 1d ff
|   8c 39 a1 9f  b1 ec a9 f1  01 14 86 f0  95 32 16 40
|   64 1d 04 48  7e df eb e3  29 e6 c6 43  6c 7e 02 bc
|   08 29 b4 2e  0f 15 72 d2  7b bb 9a 3b  f4 4c 7a fd
|   91 0b 93 e7  d2 62 b1 91  fa a2 70 e4  20 87 d9 18
|   97 4c 71 46  9c 84 e1 69  94 bc fb 72  d0 97 48 b9
|   94 08 bc 72  0e d9 d8 c4  bf 6c 90 4b  12 56 5c ed
|   99 81 58 be  e9 b8 fe 50  7f f3 7c fe  c4 64 43 0e
|   e3 6e e0 53  96 cb 79 b8  48 d9 5f 48  29 4a 22 2d
|   b9 a9 db 77  2f 5a e3 1d  f7 b9 dd 05  81 81 11 0c
|   ec e0 48 24  38 76 80 37  6e 26 72 a3  69 a5 81 f6
|   da 9c 58 72  eb 72 ed 22  9c f1 cf fc  54 3a 94 7a
|   5b ea 07 9d  fb 04 93 06  8c 35 7e 72  8f 13 31 15
|   d7 b0 6f 15  d5 b9 91 41  60 8a 97 5d  bf f2 f3 f3
|   b6 56 e8 35  bb 43 18 18  04 42 18 76  b1 67 ad
| integ after authenticated encryption:
|   8b 6f e0 25  bc 81 43 6d  c9 60 5c cf  52 68 04 14
| **emit ISAKMP Message:
|    initiator cookie:
|   bd 3e 5b 40  c7 67 f4 6e
|    responder cookie:
|   4f dd 82 29  9e 3b 6b 24
|    next payload type: ISAKMP_NEXT_v2SKF (0x35)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_AUTH (0x23)
|    flags: ISAKMP_FLAG_v2_IKE_INIT (0x8)
|    message ID:  00 00 00 01
| ***emit IKEv2 Encrypted Fragment:
|    next payload type: ISAKMP_NEXT_v2NONE (0x0)
|    flags: none (0x0)
|    fragment number: 3 (0x3)
|    total fragments: 3 (0x3)
| emitting 8 raw bytes of IV into IKEv2 Encrypted Fragment
| IV  ab ad b8 91  35 5a bf 3d
| emitting 454 raw bytes of cleartext fragment into cleartext
| cleartext fragment  ba 36 35 44  3b 77 47 8e  79 c5 4d 02  48 ae a5 e6
| cleartext fragment  9e 77 66 72  d6 c5 1c 71  97 d8 44 50  89 0c 5d d3
| cleartext fragment  7f 0c b9 83  63 33 6a 98  e0 39 d0 b2  f6 20 07 55
| cleartext fragment  77 f9 21 00  00 88 01 00  00 00 93 ba  65 c2 bd 0e
| cleartext fragment  5d ad 05 2a  69 ba 5b 9b  e9 d5 3e 56  ec ab 2b 5f
| cleartext fragment  20 13 1d a9  60 fa c4 9c  36 0a 0f 98  e3 6e 87 2d
| cleartext fragment  a9 fe 56 f4  08 28 a9 ec  56 ff ca f6  74 55 fe 17
| cleartext fragment  c8 53 02 fd  f3 c1 a5 06  b5 8c 61 9e  f6 fe 52 9e
| cleartext fragment  14 ce 17 d1  fd 89 96 01  41 8f 03 3f  f0 2c 0c ac
| cleartext fragment  36 de d4 fc  4a 4c cf 02  ac 34 64 4a  9f d0 da 7c
| cleartext fragment  7d 9a 5f 94  24 54 da 44  d7 08 41 61  87 0a 73 41
| cleartext fragment  d2 02 83 6f  18 5c 92 11  b7 4d 2c 00  00 dc 02 00
| cleartext fragment  00 28 01 03  04 03 2c 0a  0b 46 03 00  00 0c 01 00
| cleartext fragment  00 14 80 0e  01 00 03 00  00 08 03 00  00 00 00 00
| cleartext fragment  00 08 05 00  00 00 02 00  00 28 02 03  04 03 2c 0a
| cleartext fragment  0b 46 03 00  00 0c 01 00  00 14 80 0e  00 80 03 00
| cleartext fragment  00 08 03 00  00 00 00 00  00 08 05 00  00 00 02 00
| cleartext fragment  00 30 03 03  04 04 2c 0a  0b 46 03 00  00 0c 01 00
| cleartext fragment  00 0c 80 0e  01 00 03 00  00 08 03 00  00 0e 03 00
| cleartext fragment  00 08 03 00  00 0c 00 00  00 08 05 00  00 00 02 00
| cleartext fragment  00 30 04 03  04 04 2c 0a  0b 46 03 00  00 0c 01 00
| cleartext fragment  00 0c 80 0e  00 80 03 00  00 08 03 00  00 0e 03 00
| cleartext fragment  00 08 03 00  00 0c 00 00  00 08 05 00  00 00 00 00
| cleartext fragment  00 28 05 03  04 03 2c 0a  0b 46 03 00  00 0c 01 00
| cleartext fragment  00 0c 80 0e  00 80 03 00  00 08 03 00  00 02 00 00
| cleartext fragment  00 08 05 00  00 00 2d 00  00 18 01 00  00 00 07 00
| cleartext fragment  00 10 00 00  ff ff c0 01  02 2d c0 01  02 2d 00 00
| cleartext fragment  00 18 01 00  00 00 07 00  00 10 00 00  ff ff c0 01
| cleartext fragment  02 17 c0 01  02 17
| ikev2_padup_pre_encrypt: adding 1 byte padding-length
| emitting 1 raw bytes of padding and length into cleartext
| padding and length  00
| emitting 16 zero bytes of length of truncated HMAC/KEY into IKEv2 Encrypted Fragment
| emitting length of IKEv2 Encrypted Fragment: 487
| emitting length of ISAKMP Message: 515
| Salt before authenticated encryption:
|   4f 66 26 9d
| IV before authenticated encryption:
|   ab ad b8 91  35 5a bf 3d
| AAD before authenticated encryption:
|   bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
|   35 20 23 08  00 00 00 01  00 00 02 03  00 00 01 e7
|   00 03 00 03
| data before authenticated encryption:
|   ba 36 35 44  3b 77 47 8e  79 c5 4d 02  48 ae a5 e6
|   9e 77 66 72  d6 c5 1c 71  97 d8 44 50  89 0c 5d d3
|   7f 0c b9 83  63 33 6a 98  e0 39 d0 b2  f6 20 07 55
|   77 f9 21 00  00 88 01 00  00 00 93 ba  65 c2 bd 0e
|   5d ad 05 2a  69 ba 5b 9b  e9 d5 3e 56  ec ab 2b 5f
|   20 13 1d a9  60 fa c4 9c  36 0a 0f 98  e3 6e 87 2d
|   a9 fe 56 f4  08 28 a9 ec  56 ff ca f6  74 55 fe 17
|   c8 53 02 fd  f3 c1 a5 06  b5 8c 61 9e  f6 fe 52 9e
|   14 ce 17 d1  fd 89 96 01  41 8f 03 3f  f0 2c 0c ac
|   36 de d4 fc  4a 4c cf 02  ac 34 64 4a  9f d0 da 7c
|   7d 9a 5f 94  24 54 da 44  d7 08 41 61  87 0a 73 41
|   d2 02 83 6f  18 5c 92 11  b7 4d 2c 00  00 dc 02 00
|   00 28 01 03  04 03 2c 0a  0b 46 03 00  00 0c 01 00
|   00 14 80 0e  01 00 03 00  00 08 03 00  00 00 00 00
|   00 08 05 00  00 00 02 00  00 28 02 03  04 03 2c 0a
|   0b 46 03 00  00 0c 01 00  00 14 80 0e  00 80 03 00
|   00 08 03 00  00 00 00 00  00 08 05 00  00 00 02 00
|   00 30 03 03  04 04 2c 0a  0b 46 03 00  00 0c 01 00
|   00 0c 80 0e  01 00 03 00  00 08 03 00  00 0e 03 00
|   00 08 03 00  00 0c 00 00  00 08 05 00  00 00 02 00
|   00 30 04 03  04 04 2c 0a  0b 46 03 00  00 0c 01 00
|   00 0c 80 0e  00 80 03 00  00 08 03 00  00 0e 03 00
|   00 08 03 00  00 0c 00 00  00 08 05 00  00 00 00 00
|   00 28 05 03  04 03 2c 0a  0b 46 03 00  00 0c 01 00
|   00 0c 80 0e  00 80 03 00  00 08 03 00  00 02 00 00
|   00 08 05 00  00 00 2d 00  00 18 01 00  00 00 07 00
|   00 10 00 00  ff ff c0 01  02 2d c0 01  02 2d 00 00
|   00 18 01 00  00 00 07 00  00 10 00 00  ff ff c0 01
|   02 17 c0 01  02 17 00
| integ before authenticated encryption:
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| data after authenticated encryption:
|   5b 75 67 68  d1 b9 ca ec  33 8f b2 34  5b 36 7a 79
|   54 b2 76 31  f5 18 d0 3d  4c 7c 27 7e  72 a7 f9 94
|   9c f4 eb ec  4a 61 9b 3a  f3 ac 06 58  8d 43 1f 9d
|   db 7d c2 4f  f7 56 2f 18  5d bb 31 bc  83 bb 23 a0
|   ae 83 87 a1  c8 e6 ca ff  1f 2c f4 3a  ed 10 b0 5f
|   b7 c2 d7 9b  e4 da 50 8d  17 ce 35 9c  30 b2 ed 0b
|   2c 9d 84 67  52 41 f7 bd  56 15 d6 eb  87 d7 93 70
|   e8 9b 41 94  dd a4 57 9b  26 23 e7 cb  ff 04 9c 1a
|   58 f3 dd a3  d0 c7 03 11  1d 92 95 42  89 0c e5 a4
|   3b 24 d2 4f  83 cd fa 22  27 db 88 54  da e5 a8 d7
|   91 34 88 b1  fc 95 7f 4f  14 6f 76 55  49 5d 03 e2
|   98 a4 18 ae  eb aa b6 d4  8d 59 23 29  be 06 71 9e
|   aa 7e c2 1e  11 97 23 18  3c fd 3a 39  6a 9d 40 60
|   b6 9a 51 ef  72 a3 73 3b  a4 68 1c af  d4 7b 26 9b
|   89 b2 b9 38  b5 2a 71 67  4c 90 cc 1c  32 70 a2 84
|   4e e5 a9 dc  25 a1 3e 5b  06 0e cf 3c  02 61 ea 12
|   29 08 9b fe  68 2c c9 11  1a 3c ff dd  2a 7b f0 ed
|   a1 0d 0b 61  0b a6 0a f6  40 02 1b ac  31 e8 61 a2
|   de d9 d6 c8  7d 4f d0 79  4e a1 45 b9  b3 57 6f 70
|   1f 77 f7 48  bc 34 a6 17  9f 15 99 6b  a6 9a c1 b7
|   22 80 d0 39  6e a9 3a c7  6f a7 b9 f0  f1 a2 17 ad
|   c8 36 fd b2  e4 ec b7 c0  66 01 14 d1  95 e6 e0 aa
|   ac 0e 68 42  d9 90 66 6c  78 60 a5 e3  b1 1c 80 7b
|   0e 23 e9 06  e0 f7 05 e2  34 b2 7f 4f  73 28 6e 2a
|   3d 0d db 74  2d 17 45 8a  3d 95 74 83  81 91 26 fe
|   63 f3 77 08  63 c2 fa 89  b9 20 02 1a  c4 09 d3 df
|   6a 4b d9 f7  3f bd 8a 92  b1 08 ee 66  36 3f db 82
|   78 51 64 79  df 91 4e 18  e0 f5 b3 35  32 ea ba 78
|   66 9b b1 e7  fa 6a 07
| integ after authenticated encryption:
|   0f f7 4d b2  63 83 38 55  62 6e ab 76  f4 0f 91 6d
| #2 complete v2 state transition from STATE_UNDEFINED with STF_OK
| transition from state STATE_PARENT_I1 to state STATE_PARENT_I2
| child state #2: STATE_UNDEFINED(ignore) => STATE_PARENT_I2(open-ike)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 2
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 2 count states: 2
| message ID #2 STATE_PARENT_I2 san pst #1 st_msgid_nextuse(before=1) 2 st_msgid_lastack 0 st_msgid_lastrecv 4294967295
"san" #2: STATE_PARENT_I2: sent v2I2, expected v2R2 {auth=IKEv2 cipher=aes_gcm_16_256 integ=n/a prf=sha2_512 group=MODP2048}
| sending V2 reply packet to 192.1.2.23:500 (from port 500)
| sending 539 bytes for STATE_PARENT_I1 through eth1:500 to 192.1.2.23:500 (using #2)
|   bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
|   35 20 23 08  00 00 00 01  00 00 02 1b  23 00 01 ff
|   00 01 00 03  f1 26 71 61  0c 2e 3a c4  17 65 63 ef
|   2a ac 85 2c  37 97 23 08  49 ad 6c bd  2c 6a 3b eb
|   a6 9d 25 3f  e1 07 b8 e6  03 32 2c ab  92 b1 7d c5
|   ca b7 6d 61  c6 34 d5 ec  68 6d 1a 21  7e 1f 6d 16
|   0e 1b 10 54  87 14 8e c7  f1 2a 29 f5  20 6c 4c 0d
|   4b 8d fa c0  d0 7b 4c c9  b6 80 fc f9  f4 b2 c6 b5
|   a3 44 af f0  2a e6 60 9f  a1 3c b4 24  ae ee 01 0f
|   b4 dc fd c9  55 47 40 6c  65 07 60 2b  f8 a8 9f b8
|   a0 38 c5 a9  d4 d7 dd e7  1e a2 34 f8  c0 a4 7b 7e
|   2a 11 88 89  f7 24 ff 3a  ce 61 89 11  95 ff 01 da
|   78 2c ed 33  2a 0f 7d 60  3b c1 76 7e  2c 4a cc c3
|   7b 86 45 82  15 4a 95 61  87 5e 27 48  d8 39 3f e4
|   6e e9 1b 92  d4 84 22 b1  d1 e2 42 e8  ea 08 b8 13
|   16 63 86 d3  fb dd ad 3e  12 6f ac ec  c8 ef 12 6d
|   81 d4 92 67  a3 a9 5b c8  47 1b 4e 50  68 52 60 eb
|   ea f9 00 32  58 87 16 c2  bc 42 b6 8d  bd 3d b2 b5
|   8b a3 09 40  71 df 11 af  d8 09 42 1b  7f f4 15 14
|   a5 43 40 eb  0d 7c 64 78  6d a7 9a e9  72 79 5e 4e
|   b2 c7 35 5e  8f 5b e0 6f  10 82 bf 64  d9 4f 33 c3
|   58 d9 af f7  d4 ec 86 bf  46 f7 1f bb  b1 82 7d 6f
|   5a b3 a5 f2  94 98 6b b6  cf b8 3c 91  6f 60 44 1b
|   63 93 eb 40  26 f2 1c 77  bc 95 20 7d  21 e6 3e 61
|   eb cd 51 66  01 01 af da  30 64 22 e9  09 04 49 7e
|   05 33 b2 38  45 3b 86 ea  9f 4f 95 3a  b0 85 fa 0d
|   c3 dc dd d0  79 04 63 79  35 3f 80 dd  e0 28 3a 92
|   1e 36 66 e7  19 0e 83 af  46 bc a2 c2  8b ac ce 0c
|   68 49 3d 94  df 26 3b 65  83 63 b1 ee  37 27 e7 42
|   01 9f 25 de  57 f6 03 a7  c3 01 fe 9c  ef 15 5b 69
|   fc 7f e1 f9  00 12 a9 0d  47 64 0d 2c  19 13 b6 c4
|   34 7b fa 10  c7 87 13 ea  e0 9a d4 34  6b 45 e6 c6
|   e1 0e 6d a2  09 d0 f8 a4  aa e8 f3 5d  c4 94 86 91
|   b4 77 67 d4  8e 43 67 dc  ab bf dd
| sending 539 bytes for STATE_PARENT_I1 through eth1:500 to 192.1.2.23:500 (using #2)
|   bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
|   35 20 23 08  00 00 00 01  00 00 02 1b  00 00 01 ff
|   00 02 00 03  e8 f0 85 4a  ba 9b 00 7f  bd 27 5f 4e
|   cf f0 3d e9  ee af 50 62  34 b6 35 76  d5 c6 a3 4e
|   f4 06 68 7e  e4 ee 11 f8  05 0c e7 63  eb 8f 01 56
|   de 1d ad 78  10 8e db 9f  96 c8 7f cb  92 b2 7a 90
|   eb d5 87 21  9d 38 51 34  4a 83 87 0d  61 d2 ea 41
|   31 f3 76 c2  02 71 25 df  81 fb 0b 0b  fa 5f 45 ae
|   16 15 38 47  ca 3b 69 d1  5c a9 30 2a  87 a8 8e e3
|   a4 1c 24 9d  71 b5 ba 86  8d 86 3f 13  7d 55 8c 3a
|   cd bc cd cf  08 18 07 36  54 87 0f ee  b9 fd 2e 24
|   d4 e1 8b 87  4d d4 3f f0  1e 25 c4 6d  9b 71 98 0e
|   08 02 b3 87  77 f0 b0 16  47 ce ea 45  57 c5 0e ac
|   ba 44 f4 8c  79 1c 8c cc  07 39 72 fd  91 05 ea 06
|   0e 25 bd da  d6 fa 7d 7d  83 60 2b 9c  ad 20 0b 7f
|   9b ad ed 54  59 f6 5f ee  a8 e2 6f 34  62 f4 e3 1e
|   a7 59 02 63  e1 22 91 fc  bf 41 1f 05  c9 42 39 c6
|   bd c4 5b bc  99 3d 53 ed  2a af 2e 2b  25 4c b2 79
|   86 d2 f8 53  64 aa bc e0  63 78 1d ff  8c 39 a1 9f
|   b1 ec a9 f1  01 14 86 f0  95 32 16 40  64 1d 04 48
|   7e df eb e3  29 e6 c6 43  6c 7e 02 bc  08 29 b4 2e
|   0f 15 72 d2  7b bb 9a 3b  f4 4c 7a fd  91 0b 93 e7
|   d2 62 b1 91  fa a2 70 e4  20 87 d9 18  97 4c 71 46
|   9c 84 e1 69  94 bc fb 72  d0 97 48 b9  94 08 bc 72
|   0e d9 d8 c4  bf 6c 90 4b  12 56 5c ed  99 81 58 be
|   e9 b8 fe 50  7f f3 7c fe  c4 64 43 0e  e3 6e e0 53
|   96 cb 79 b8  48 d9 5f 48  29 4a 22 2d  b9 a9 db 77
|   2f 5a e3 1d  f7 b9 dd 05  81 81 11 0c  ec e0 48 24
|   38 76 80 37  6e 26 72 a3  69 a5 81 f6  da 9c 58 72
|   eb 72 ed 22  9c f1 cf fc  54 3a 94 7a  5b ea 07 9d
|   fb 04 93 06  8c 35 7e 72  8f 13 31 15  d7 b0 6f 15
|   d5 b9 91 41  60 8a 97 5d  bf f2 f3 f3  b6 56 e8 35
|   bb 43 18 18  04 42 18 76  b1 67 ad 8b  6f e0 25 bc
|   81 43 6d c9  60 5c cf 52  68 04 14
| sending 515 bytes for STATE_PARENT_I1 through eth1:500 to 192.1.2.23:500 (using #2)
|   bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
|   35 20 23 08  00 00 00 01  00 00 02 03  00 00 01 e7
|   00 03 00 03  ab ad b8 91  35 5a bf 3d  5b 75 67 68
|   d1 b9 ca ec  33 8f b2 34  5b 36 7a 79  54 b2 76 31
|   f5 18 d0 3d  4c 7c 27 7e  72 a7 f9 94  9c f4 eb ec
|   4a 61 9b 3a  f3 ac 06 58  8d 43 1f 9d  db 7d c2 4f
|   f7 56 2f 18  5d bb 31 bc  83 bb 23 a0  ae 83 87 a1
|   c8 e6 ca ff  1f 2c f4 3a  ed 10 b0 5f  b7 c2 d7 9b
|   e4 da 50 8d  17 ce 35 9c  30 b2 ed 0b  2c 9d 84 67
|   52 41 f7 bd  56 15 d6 eb  87 d7 93 70  e8 9b 41 94
|   dd a4 57 9b  26 23 e7 cb  ff 04 9c 1a  58 f3 dd a3
|   d0 c7 03 11  1d 92 95 42  89 0c e5 a4  3b 24 d2 4f
|   83 cd fa 22  27 db 88 54  da e5 a8 d7  91 34 88 b1
|   fc 95 7f 4f  14 6f 76 55  49 5d 03 e2  98 a4 18 ae
|   eb aa b6 d4  8d 59 23 29  be 06 71 9e  aa 7e c2 1e
|   11 97 23 18  3c fd 3a 39  6a 9d 40 60  b6 9a 51 ef
|   72 a3 73 3b  a4 68 1c af  d4 7b 26 9b  89 b2 b9 38
|   b5 2a 71 67  4c 90 cc 1c  32 70 a2 84  4e e5 a9 dc
|   25 a1 3e 5b  06 0e cf 3c  02 61 ea 12  29 08 9b fe
|   68 2c c9 11  1a 3c ff dd  2a 7b f0 ed  a1 0d 0b 61
|   0b a6 0a f6  40 02 1b ac  31 e8 61 a2  de d9 d6 c8
|   7d 4f d0 79  4e a1 45 b9  b3 57 6f 70  1f 77 f7 48
|   bc 34 a6 17  9f 15 99 6b  a6 9a c1 b7  22 80 d0 39
|   6e a9 3a c7  6f a7 b9 f0  f1 a2 17 ad  c8 36 fd b2
|   e4 ec b7 c0  66 01 14 d1  95 e6 e0 aa  ac 0e 68 42
|   d9 90 66 6c  78 60 a5 e3  b1 1c 80 7b  0e 23 e9 06
|   e0 f7 05 e2  34 b2 7f 4f  73 28 6e 2a  3d 0d db 74
|   2d 17 45 8a  3d 95 74 83  81 91 26 fe  63 f3 77 08
|   63 c2 fa 89  b9 20 02 1a  c4 09 d3 df  6a 4b d9 f7
|   3f bd 8a 92  b1 08 ee 66  36 3f db 82  78 51 64 79
|   df 91 4e 18  e0 f5 b3 35  32 ea ba 78  66 9b b1 e7
|   fa 6a 07 0f  f7 4d b2 63  83 38 55 62  6e ab 76 f4
|   0f 91 6d
| state #2 requesting EVENT_SO_DISCARD to be deleted
| delete_pluto_event: release EVENT_SO_DISCARD-pe@0x7f8c95c46b28
"san" #2: suppressing retransmit because IMPAIR_RETRANSMITS is set.
| event_schedule called for 10 seconds
| event_schedule_tv: new EVENT_v2_RELEASE_WHACK-pe@0x7f8c95c46b28
| event_schedule_tv called for about 10 seconds and change
| inserting event EVENT_v2_RELEASE_WHACK, timeout in 10.000000 seconds for #2
| ikev2_replace_delay() picked up salifetime=28800
| ikev2 case EVENT_v2_RETRANSMIT: for 27838 seconds
| event_schedule called for 27838 seconds
| event_schedule_tv: new EVENT_SA_REPLACE-pe@0x7f8c95c46b78
| event_schedule_tv called for about 27838 seconds and change
| inserting event EVENT_SA_REPLACE, timeout in 27838.000000 seconds for #2
| *received 36 bytes from 192.1.2.23:500 on eth1 (port=500)
|   bd 3e 5b 40  c7 67 f4 6e  4f dd 82 29  9e 3b 6b 24
|   29 20 22 20  00 00 00 00  00 00 00 24  00 00 00 08
|   00 00 00 18
| **parse ISAKMP Message:
|    initiator cookie:
|   bd 3e 5b 40  c7 67 f4 6e
|    responder cookie:
|   4f dd 82 29  9e 3b 6b 24
|    next payload type: ISAKMP_NEXT_v2N (0x29)
|    ISAKMP version: IKEv2 version 2.0 (rfc4306/rfc5996) (0x20)
|    exchange type: ISAKMP_v2_SA_INIT (0x22)
|    flags: ISAKMP_FLAG_v2_MSG_RESPONSE (0x20)
|    message ID:  00 00 00 00
|    length: 36 (0x24)
|  processing version=2.0 packet with exchange type=ISAKMP_v2_SA_INIT (34)
| I am receiving an IKEv2 Response ISAKMP_v2_SA_INIT
| I am the IKE SA Original Initiator
| finding hash chain in icookie hash table
|   ICOOKIE:  bd 3e 5b 40  c7 67 f4 6e
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 24
| parent_init v2 state object not found
| from_state is STATE_UNDEFINED
| selected state microcode roof
| no useful state microcode entry found
| pluto_sd: executing action action: reloading(4), status 0
listening for IKE messages
| Inspecting interface lo 
| found lo with address 127.0.0.1
| Inspecting interface eth0 
| found eth0 with address 192.0.1.254
| Inspecting interface eth1 
| found eth1 with address 192.1.2.45
| Inspecting interface eth2 
| found eth2 with address 192.9.4.45
| refresh. setup callback for interface lo:4500 24
| setup callback for interface lo:4500 fd 24
| refresh. setup callback for interface lo:500 23
| setup callback for interface lo:500 fd 23
| refresh. setup callback for interface eth0:4500 22
| setup callback for interface eth0:4500 fd 22
| refresh. setup callback for interface eth0:500 21
| setup callback for interface eth0:500 fd 21
| refresh. setup callback for interface eth1:4500 20
| setup callback for interface eth1:4500 fd 20
| refresh. setup callback for interface eth1:500 19
| setup callback for interface eth1:500 fd 19
| refresh. setup callback for interface eth2:4500 18
| setup callback for interface eth2:4500 fd 18
| refresh. setup callback for interface eth2:500 17
| setup callback for interface eth2:500 fd 17
| certs and keys locked by 'free_preshared_secrets'
forgetting secrets
| certs and keys unlocked by 'free_preshard_secrets'
loading secrets from "/etc/ipsec.secrets"
| saving Modulus
| saving PublicExponent
| ignoring PrivateExponent
| ignoring Prime1
| ignoring Prime2
| ignoring Exponent1
| ignoring Exponent2
| ignoring Coefficient
| ignoring CKAIDNSS
| computed rsa CKAID  b4 9f 1a ac  9e 45 6e 79  29 c8 81 97  3a 0c 6a d3
| computed rsa CKAID  7f 0f 03 50
loaded private key for keyid: PPK_RSA:AQOm9dY/4
| certs and keys locked by 'process_secret'
| certs and keys unlocked by 'process_secret'
| pluto_sd: executing action action: ready(5), status 0
| reaped addconn helper child
| timer_event_cb: processing event@0x7f8c95c4f908
| handling event EVENT_v2_RELEASE_WHACK for parent state #1
| processing connection "san"
| event EVENT_v2_RELEASE_WHACK st_rel_whack_event=NULL #1 STATE_PARENT_I2
| EVENT_v2_RELEASE_WHACK releasing whack for #1 STATE_PARENT_I2 (sock=26)
| delete_pluto_event: release EVENT_v2_RELEASE_WHACK-pe@0x7f8c95c4f908
| timer_event_cb: processing event@0x7f8c95c46b28
| handling event EVENT_v2_RELEASE_WHACK for child state #2
| processing connection "san"
| event EVENT_v2_RELEASE_WHACK st_rel_whack_event=NULL #2 STATE_PARENT_I2
| EVENT_v2_RELEASE_WHACK releasing whack for #2 STATE_PARENT_I2 (sock=27)
| delete_pluto_event: release EVENT_v2_RELEASE_WHACK-pe@0x7f8c95c46b28
| #2 fmt_state:1971 st->st_calculating == FALSE;
| #1 fmt_state:1971 st->st_calculating == FALSE;
shutting down
| pluto_sd: executing action action: stopping(6), status 0
| certs and keys locked by 'free_preshared_secrets'
forgetting secrets
| certs and keys unlocked by 'free_preshard_secrets'
| unreference key: 0x7f8c95c2c658 @west.testing.libreswan.org cnt 1--
| unreference key: 0x7f8c95c46d18 C=CA, ST=Ontario, L=Toronto, O=Libreswan, OU=Test Department, CN=west.testing.libreswan.org, E=user-west@testing.libreswan.org cnt 1--
| unreference key: 0x7f8c95c46f98 user-west@testing.libreswan.org cnt 1--
| unreference key: 0x7f8c95c4b408 west@testing.libreswan.org cnt 1--
| unreference key: 0x7f8c95c47868 192.1.2.45 cnt 1--
| processing connection "san"
"san": deleting non-instance connection
| removing pending policy for no connection {0x7f8c95c4dd58}
| Deleting states for connection - including all other IPsec SA's of this IKE SA
| pass 0
| index 3 state #2
| processing connection "san"
"san" #2: deleting state (STATE_PARENT_I2)
| child state #2: STATE_PARENT_I2(open-ike) => delete
| state #2 requesting N/A-pe@(nil) be deleted
| delete_pluto_event cannot delete NULL event
| state #2 requesting N/A-pe@(nil) be deleted
| delete_pluto_event cannot delete NULL event
| state #2 requesting N/A-pe@(nil) be deleted
| delete_pluto_event cannot delete NULL event
| state #2 requesting EVENT_SA_REPLACE to be deleted
| delete_pluto_event: release EVENT_SA_REPLACE-pe@0x7f8c95c46b78
| finding hash chain in state hash table
|   ICOOKIE:  bd 3e 5b 40  c7 67 f4 6e
|   RCOOKIE:  4f dd 82 29  9e 3b 6b 24
| found hash chain 3
| unhashing state object #2
| removing state 0x7f8c95c51c08 entry 0x7f8c95c52288 next 0x7f8c95c500c8 prev-next 0x7f8c95320680 from list
| updated next state 0x7f8c95c4fa48 entry 0x7f8c95c500c8 next (nil) prev-next 0x7f8c95320680
| removing state 0x7f8c95c51c08 entry 0x7f8c95c522a0 next 0x7f8c95c500e0 prev-next 0x7f8c95320608 from list
| updated next state 0x7f8c95c4fa48 entry 0x7f8c95c500e0 next (nil) prev-next 0x7f8c95320608
| in connection_discard for connection san
| child state #2: STATE_PARENT_I2(open-ike) => STATE_UNDEFINED(ignore)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 1
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| delete_state: release st->st_shared_nss-key@NULL
| delete_state: release st->st_skeyid_nss-key@NULL
| delete_state: release st->st_skey_d_nss-key@0x7f8c95c365c0
| delete_state: release st->st_skey_ai_nss-key@NULL
| delete_state: release st->st_skey_ar_nss-key@NULL
| delete_state: release st->st_skey_ei_nss-key@0x7f8c880066d0
| delete_state: release st->st_skey_er_nss-key@0x7f8c88004e50
| delete_state: release st->st_skey_pi_nss-key@0x7f8c88006ca0
| delete_state: release st->st_skey_pr_nss-key@0x7f8c880068c0
| delete_state: release st->st_enc_key_nss-key@NULL
| index 3 state #1
| processing connection "san"
"san" #1: deleting state (STATE_PARENT_I2)
| parent state #1: STATE_PARENT_I2(open-ike) => delete
| state #1 requesting N/A-pe@(nil) be deleted
| delete_pluto_event cannot delete NULL event
| state #1 requesting N/A-pe@(nil) be deleted
| delete_pluto_event cannot delete NULL event
| state #1 requesting N/A-pe@(nil) be deleted
| delete_pluto_event cannot delete NULL event
| state #1 requesting EVENT_SA_EXPIRE to be deleted
| delete_pluto_event: release EVENT_SA_EXPIRE-pe@0x7f8c95c4f508
| finding hash chain in state hash table
|   ICOOKIE:  bd 3e 5b 40  c7 67 f4 6e
|   RCOOKIE:  4f dd 82 29  9e 3b 6b 24
| found hash chain 3
| unhashing state object #1
| removing state 0x7f8c95c4fa48 entry 0x7f8c95c500c8 next (nil) prev-next 0x7f8c95320680 from list
| updated next entry is (nil)
| removing state 0x7f8c95c4fa48 entry 0x7f8c95c500e0 next (nil) prev-next 0x7f8c95320608 from list
| updated next entry is (nil)
| in connection_discard for connection san
| parent state #1: STATE_PARENT_I2(open-ike) => STATE_UNDEFINED(ignore)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 0 count states: 0
| delete_state: release st->st_shared_nss-key@0x7f8c95c34d40
| delete_state: release st->st_skeyid_nss-key@NULL
| delete_state: release st->st_skey_d_nss-key@0x7f8c95c365c0
| delete_state: release st->st_skey_ai_nss-key@NULL
| delete_state: release st->st_skey_ar_nss-key@NULL
| delete_state: release st->st_skey_ei_nss-key@0x7f8c880066d0
| delete_state: release st->st_skey_er_nss-key@0x7f8c88004e50
| delete_state: release st->st_skey_pi_nss-key@0x7f8c88006ca0
| delete_state: release st->st_skey_pr_nss-key@0x7f8c880068c0
| delete_state: release st->st_enc_key_nss-key@NULL
| pass 1
| crl fetch request list locked by 'free_crl_fetch'
| crl fetch request list unlocked by 'free_crl_fetch'
shutting down interface lo/lo 127.0.0.1:4500
shutting down interface lo/lo 127.0.0.1:500
shutting down interface eth0/eth0 192.0.1.254:4500
shutting down interface eth0/eth0 192.0.1.254:500
shutting down interface eth1/eth1 192.1.2.45:4500
shutting down interface eth1/eth1 192.1.2.45:500
shutting down interface eth2/eth2 192.9.4.45:4500
shutting down interface eth2/eth2 192.9.4.45:500
leak: EVENT_SD_WATCHDOG, item size: 32
leak: EVENT_LOG_DAILY, item size: 32
leak: EVENT_SHUNT_SCAN, item size: 32
leak: kernel integ, item size: 32
leak: EVENT_PENDING_PHASE2, item size: 32
leak: EVENT_PENDING_DDNS, item size: 32
leak: EVENT_REINIT_SECRET, item size: 32
leak detective found 7 leaks, total size 224
