NSS DB directory: sql:/etc/ipsec.d
NSS initialized
libcap-ng support [disabled]
FIPS HMAC integrity support [enabled]
FIPS Kernel Mode disabled (not detected)
FIPS Product disabled (not detected)
FIPS mode disabled - pluto daemon is not running in FIPS mode
FIPS mode disabled and NSS library is not in FIPS mode
FIPS mode disabled but HMAC integrity verification tests passed
Linux audit support [enabled]
Linux audit activated
Starting Pluto (Libreswan Version v3.18dr2-37-g4c8f3c5-master XFRM(netkey) KLIPS USE_FORK USE_PTHREAD_SETSCHEDPRIO NSS DNSSEC USE_SYSTEMD_WATCHDOG FIPS_CHECK LABELED_IPSEC LINUX_AUDIT XAUTH_PAM NETWORKMANAGER CURL(non-NSS)) pid:1915
core dump dir: /tmp
secrets file: /etc/ipsec.secrets
leak-detective disabled
NSS crypto [enabled]
XAUTH PAM support [enabled]
NAT-Traversal support  [enabled]
| Initialize libevent base
| event_schedule called for 3600 seconds
| event_schedule_tv called for about 3600 seconds and change
| inserting event EVENT_REINIT_SECRET, timeout in 3600.000000 seconds
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| event_schedule called for 120 seconds
| event_schedule_tv called for about 120 seconds and change
| inserting event EVENT_PENDING_PHASE2, timeout in 120.000000 seconds
ike_alg_register_enc(): Activating OAKLEY_TWOFISH_CBC_SSH: Ok
ike_alg_register_enc(): Activating OAKLEY_TWOFISH_CBC: Ok
ike_alg_register_enc(): Activating OAKLEY_SERPENT_CBC: Ok
| test_cbc_vector: Encrypting 16 bytes (1 block) using AES-CBC with 128-bit key
| decode_to_chunk: key: input "0x06a9214036b8a15b512e03d534120006"
| decode_to_chunk: output: 
|   06 a9 21 40  36 b8 a1 5b  51 2e 03 d5  34 12 00 06
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430befe30/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  06 a9 21 40  36 b8 a1 5b  51 2e 03 d5  34 12 00 06
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CBC)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_CBC 0x00001082)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: IV: : input "0x3dafba429d9eb430b422da802c9fac41"
| decode_to_chunk: output: 
|   3d af ba 42  9d 9e b4 30  b4 22 da 80  2c 9f ac 41
| decode_to_chunk: new IV: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| decode_to_chunk: plaintext: : input "Single block msg"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: ciphertext: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| compare_chunk: encrypt: ok
| compare_chunk: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x3dafba429d9eb430b422da802c9fac41"
| decode_to_chunk: output: 
|   3d af ba 42  9d 9e b4 30  b4 22 da 80  2c 9f ac 41
| decode_to_chunk: new IV: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| decode_to_chunk: cipertext: : input "0xe353779c1079aeb82708942dbe77181a"
| decode_to_chunk: output: 
|   e3 53 77 9c  10 79 ae b8  27 08 94 2d  be 77 18 1a
| decode_to_chunk: plaintext: : input "Single block msg"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| compare_chunk: decrypt: ok
| compare_chunk: updated CBC IV: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 16 bytes (1 block) using AES-CBC with 128-bit key passed
| test_cbc_vector: Encrypting 32 bytes (2 blocks) using AES-CBC with 128-bit key
| decode_to_chunk: key: input "0xc286696d887c9aa0611bbb3e2025a45a"
| decode_to_chunk: output: 
|   c2 86 69 6d  88 7c 9a a0  61 1b bb 3e  20 25 a4 5a
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430befe30/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  c2 86 69 6d  88 7c 9a a0  61 1b bb 3e  20 25 a4 5a
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CBC)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_CBC 0x00001082)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: IV: : input "0x562e17996d093d28ddb3ba695a2e6f58"
| decode_to_chunk: output: 
|   56 2e 17 99  6d 09 3d 28  dd b3 ba 69  5a 2e 6f 58
| decode_to_chunk: new IV: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| decode_to_chunk: plaintext: : input "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: ciphertext: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| compare_chunk: encrypt: ok
| compare_chunk: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x562e17996d093d28ddb3ba695a2e6f58"
| decode_to_chunk: output: 
|   56 2e 17 99  6d 09 3d 28  dd b3 ba 69  5a 2e 6f 58
| decode_to_chunk: new IV: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| decode_to_chunk: cipertext: : input "0xd296cd94c2cccf8a3a863028b5e1dc0a7586602d253cfff91b8266bea6d61ab1"
| decode_to_chunk: output: 
|   d2 96 cd 94  c2 cc cf 8a  3a 86 30 28  b5 e1 dc 0a
|   75 86 60 2d  25 3c ff f9  1b 82 66 be  a6 d6 1a b1
| decode_to_chunk: plaintext: : input "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| compare_chunk: decrypt: ok
| compare_chunk: updated CBC IV: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 32 bytes (2 blocks) using AES-CBC with 128-bit key passed
| test_cbc_vector: Encrypting 48 bytes (3 blocks) using AES-CBC with 128-bit key
| decode_to_chunk: key: input "0x6c3ea0477630ce21a2ce334aa746c2cd"
| decode_to_chunk: output: 
|   6c 3e a0 47  76 30 ce 21  a2 ce 33 4a  a7 46 c2 cd
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430befe30/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  6c 3e a0 47  76 30 ce 21  a2 ce 33 4a  a7 46 c2 cd
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CBC)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_CBC 0x00001082)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: IV: : input "0xc782dc4c098c66cbd9cd27d825682c81"
| decode_to_chunk: output: 
|   c7 82 dc 4c  09 8c 66 cb  d9 cd 27 d8  25 68 2c 81
| decode_to_chunk: new IV: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| decode_to_chunk: plaintext: : input "This is a 48-byte message (exactly 3 AES blocks)"
| decode_to_chunk: output: 
|   54 68 69 73  20 69 73 20  61 20 34 38  2d 62 79 74
|   65 20 6d 65  73 73 61 67  65 20 28 65  78 61 63 74
|   6c 79 20 33  20 41 45 53  20 62 6c 6f  63 6b 73 29
| decode_to_chunk: ciphertext: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| compare_chunk: encrypt: ok
| compare_chunk: updated CBC IV: ok
| decode_to_chunk: IV: : input "0xc782dc4c098c66cbd9cd27d825682c81"
| decode_to_chunk: output: 
|   c7 82 dc 4c  09 8c 66 cb  d9 cd 27 d8  25 68 2c 81
| decode_to_chunk: new IV: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| decode_to_chunk: cipertext: : input "0xd0a02b3836451753d493665d33f0e8862dea54cdb293abc7506939276772f8d5021c19216bad525c8579695d83ba2684"
| decode_to_chunk: output: 
|   d0 a0 2b 38  36 45 17 53  d4 93 66 5d  33 f0 e8 86
|   2d ea 54 cd  b2 93 ab c7  50 69 39 27  67 72 f8 d5
|   02 1c 19 21  6b ad 52 5c  85 79 69 5d  83 ba 26 84
| decode_to_chunk: plaintext: : input "This is a 48-byte message (exactly 3 AES blocks)"
| decode_to_chunk: output: 
|   54 68 69 73  20 69 73 20  61 20 34 38  2d 62 79 74
|   65 20 6d 65  73 73 61 67  65 20 28 65  78 61 63 74
|   6c 79 20 33  20 41 45 53  20 62 6c 6f  63 6b 73 29
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| compare_chunk: decrypt: ok
| compare_chunk: updated CBC IV: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 48 bytes (3 blocks) using AES-CBC with 128-bit key passed
| test_cbc_vector: Encrypting 64 bytes (4 blocks) using AES-CBC with 128-bit key
| decode_to_chunk: key: input "0x56e47a38c5598974bc46903dba290349"
| decode_to_chunk: output: 
|   56 e4 7a 38  c5 59 89 74  bc 46 90 3d  ba 29 03 49
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430befe30/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  56 e4 7a 38  c5 59 89 74  bc 46 90 3d  ba 29 03 49
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CBC)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_CBC 0x00001082)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: IV: : input "0x8ce82eefbea0da3c44699ed7db51b7d9"
| decode_to_chunk: output: 
|   8c e8 2e ef  be a0 da 3c  44 69 9e d7  db 51 b7 d9
| decode_to_chunk: new IV: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| decode_to_chunk: plaintext: : input "0xa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf"
| decode_to_chunk: output: 
|   a0 a1 a2 a3  a4 a5 a6 a7  a8 a9 aa ab  ac ad ae af
|   b0 b1 b2 b3  b4 b5 b6 b7  b8 b9 ba bb  bc bd be bf
|   c0 c1 c2 c3  c4 c5 c6 c7  c8 c9 ca cb  cc cd ce cf
|   d0 d1 d2 d3  d4 d5 d6 d7  d8 d9 da db  dc dd de df
| decode_to_chunk: ciphertext: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| compare_chunk: encrypt: ok
| compare_chunk: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x8ce82eefbea0da3c44699ed7db51b7d9"
| decode_to_chunk: output: 
|   8c e8 2e ef  be a0 da 3c  44 69 9e d7  db 51 b7 d9
| decode_to_chunk: new IV: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| decode_to_chunk: cipertext: : input "0xc30e32ffedc0774e6aff6af0869f71aa0f3af07a9a31a9c684db207eb0ef8e4e35907aa632c3ffdf868bb7b29d3d46ad83ce9f9a102ee99d49a53e87f4c3da55"
| decode_to_chunk: output: 
|   c3 0e 32 ff  ed c0 77 4e  6a ff 6a f0  86 9f 71 aa
|   0f 3a f0 7a  9a 31 a9 c6  84 db 20 7e  b0 ef 8e 4e
|   35 90 7a a6  32 c3 ff df  86 8b b7 b2  9d 3d 46 ad
|   83 ce 9f 9a  10 2e e9 9d  49 a5 3e 87  f4 c3 da 55
| decode_to_chunk: plaintext: : input "0xa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf"
| decode_to_chunk: output: 
|   a0 a1 a2 a3  a4 a5 a6 a7  a8 a9 aa ab  ac ad ae af
|   b0 b1 b2 b3  b4 b5 b6 b7  b8 b9 ba bb  bc bd be bf
|   c0 c1 c2 c3  c4 c5 c6 c7  c8 c9 ca cb  cc cd ce cf
|   d0 d1 d2 d3  d4 d5 d6 d7  d8 d9 da db  dc dd de df
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| compare_chunk: decrypt: ok
| compare_chunk: updated CBC IV: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 64 bytes (4 blocks) using AES-CBC with 128-bit key passed
ike_alg_register_enc(): Activating OAKLEY_AES_CBC: Ok
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 128-bit key
| decode_to_chunk: key: input "0x AE 68 52 F8 12 10 67 CC 4B F7 A5 76 55 77 F3 9E"
| decode_to_chunk: output: 
|   ae 68 52 f8  12 10 67 cc  4b f7 a5 76  55 77 f3 9e
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf48f0/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  ae 68 52 f8  12 10 67 cc  4b f7 a5 76  55 77 f3 9e
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CTR)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_CTR 0x00001086)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: input counter-block: : input "0x 00 00 00 30  00 00 00 00 00 00 00 00  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: Ciphertext: input "0x E4 09 5D 4F B7 A7 B3 79 2D 61 75 A3 26 13 11 B8"
| decode_to_chunk: output: 
|   e4 09 5d 4f  b7 a7 b3 79  2d 61 75 a3  26 13 11 b8
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| compare_chunk: encrypt: ok
| compare_chunk: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 00 00 30  00 00 00 00 00 00 00 00  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x E4 09 5D 4F B7 A7 B3 79 2D 61 75 A3 26 13 11 B8"
| decode_to_chunk: output: 
|   e4 09 5d 4f  b7 a7 b3 79  2d 61 75 a3  26 13 11 b8
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 30  00 00 00 00  00 00 00 00  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| compare_chunk: decrypt: ok
| compare_chunk: counter-block: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 128-bit key passed
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 128-bit key
| decode_to_chunk: key: input "0x 7E 24 06 78 17 FA E0 D7 43 D6 CE 1F 32 53 91 63"
| decode_to_chunk: output: 
|   7e 24 06 78  17 fa e0 d7  43 d6 ce 1f  32 53 91 63
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf49b0/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  7e 24 06 78  17 fa e0 d7  43 d6 ce 1f  32 53 91 63
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CTR)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_CTR 0x00001086)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: input counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 01"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: Ciphertext: input "0x51 04 A1 06 16 8A 72 D9 79 0D 41 EE 8E DA D3 88EB 2E 1E FC 46 DA 57 C8 FC E6 30 DF 91 41 BE 28"
| decode_to_chunk: output: 
|   51 04 a1 06  16 8a 72 d9  79 0d 41 ee  8e da d3 88
|   eb 2e 1e fc  46 da 57 c8  fc e6 30 df  91 41 be 28
| decode_to_chunk: expected counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 03"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| compare_chunk: encrypt: ok
| compare_chunk: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 01"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x51 04 A1 06 16 8A 72 D9 79 0D 41 EE 8E DA D3 88EB 2E 1E FC 46 DA 57 C8 FC E6 30 DF 91 41 BE 28"
| decode_to_chunk: output: 
|   51 04 a1 06  16 8a 72 d9  79 0d 41 ee  8e da d3 88
|   eb 2e 1e fc  46 da 57 c8  fc e6 30 df  91 41 be 28
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: expected counter-block: : input "0x 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00 00 03"
| decode_to_chunk: output: 
|   00 6c b6 db  c0 54 3b 59  da 48 d9 0b  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| compare_chunk: decrypt: ok
| compare_chunk: counter-block: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 128-bit key passed
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 128-bit key
| decode_to_chunk: key: input "0x 76 91 BE 03 5E 50 20 A8 AC 6E 61 85 29 F9 A0 DC"
| decode_to_chunk: output: 
|   76 91 be 03  5e 50 20 a8  ac 6e 61 85  29 f9 a0 dc
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf49b0/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  76 91 be 03  5e 50 20 a8  ac 6e 61 85  29 f9 a0 dc
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CTR)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_CTR 0x00001086)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: input counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 01"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: Ciphertext: input "0xC1 CF 48 A8 9F 2F FD D9 CF 46 52 E9 EF DB 72 D745 40 A4 2B DE 6D 78 36 D5 9A 5C EA AE F3 10 5325 B2 07 2F"
| decode_to_chunk: output: 
|   c1 cf 48 a8  9f 2f fd d9  cf 46 52 e9  ef db 72 d7
|   45 40 a4 2b  de 6d 78 36  d5 9a 5c ea  ae f3 10 53
|   25 b2 07 2f
| decode_to_chunk: expected counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 04"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| compare_chunk: encrypt: ok
| compare_chunk: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 01"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 01
| decode_to_chunk: Ciphertext: input "0xC1 CF 48 A8 9F 2F FD D9 CF 46 52 E9 EF DB 72 D745 40 A4 2B DE 6D 78 36 D5 9A 5C EA AE F3 10 5325 B2 07 2F"
| decode_to_chunk: output: 
|   c1 cf 48 a8  9f 2f fd d9  cf 46 52 e9  ef db 72 d7
|   45 40 a4 2b  de 6d 78 36  d5 9a 5c ea  ae f3 10 53
|   25 b2 07 2f
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: expected counter-block: : input "0x 00 E0 01 7B  27 77 7F 3F 4A 17 86 F0  00 00 00 04"
| decode_to_chunk: output: 
|   00 e0 01 7b  27 77 7f 3f  4a 17 86 f0  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| compare_chunk: decrypt: ok
| compare_chunk: counter-block: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 128-bit key passed
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 192-bit key
| decode_to_chunk: key: input "0x16 AF 5B 14 5F C9 F5 79 C1 75 F9 3E 3B FB 0E ED86 3D 06 CC FD B7 85 15"
| decode_to_chunk: output: 
|   16 af 5b 14  5f c9 f5 79  c1 75 f9 3e  3b fb 0e ed
|   86 3d 06 cc  fd b7 85 15
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf49f0/24) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  16 af 5b 14  5f c9 f5 79  c1 75 f9 3e  3b fb 0e ed
| bytes:  86 3d 06 cc  fd b7 85 15
| tmp: key(0x7fd430bf2fd0) length(40) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(24) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CTR)
| symkey: key(0x7fd430bf2fd0) length(40) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(24) type/mechanism(AES_CTR 0x00001086)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: input counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 01
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: Ciphertext: input "0x 4B 55 38 4F E2 59 C9 C8 4E 79 35 A0 03 CB E9 28"
| decode_to_chunk: output: 
|   4b 55 38 4f  e2 59 c9 c8  4e 79 35 a0  03 cb e9 28
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| compare_chunk: encrypt: ok
| compare_chunk: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x 4B 55 38 4F E2 59 C9 C8 4E 79 35 A0 03 CB E9 28"
| decode_to_chunk: output: 
|   4b 55 38 4f  e2 59 c9 c8  4e 79 35 a0  03 cb e9 28
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 48  36 73 3C 14 7D 6D 93 CB  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 48  36 73 3c 14  7d 6d 93 cb  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| compare_chunk: decrypt: ok
| compare_chunk: counter-block: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 192-bit key passed
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 192-bit key
| decode_to_chunk: key: input "0x7C 5C B2 40 1B 3D C3 3C 19 E7 34 08 19 E0 F6 9C67 8C 3D B8 E6 F6 A9 1A"
| decode_to_chunk: output: 
|   7c 5c b2 40  1b 3d c3 3c  19 e7 34 08  19 e0 f6 9c
|   67 8c 3d b8  e6 f6 a9 1a
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf4d80/24) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  7c 5c b2 40  1b 3d c3 3c  19 e7 34 08  19 e0 f6 9c
| bytes:  67 8c 3d b8  e6 f6 a9 1a
| tmp: key(0x7fd430bf2fd0) length(40) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(24) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CTR)
| symkey: key(0x7fd430bf2fd0) length(40) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(24) type/mechanism(AES_CTR 0x00001086)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: input counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 01"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: Ciphertext: input "0x45 32 43 FC 60 9B 23 32 7E DF AA FA 71 31 CD 9F84 90 70 1C 5A D4 A7 9C FC 1F E0 FF 42 F4 FB 00"
| decode_to_chunk: output: 
|   45 32 43 fc  60 9b 23 32  7e df aa fa  71 31 cd 9f
|   84 90 70 1c  5a d4 a7 9c  fc 1f e0 ff  42 f4 fb 00
| decode_to_chunk: expected counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 03"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| compare_chunk: encrypt: ok
| compare_chunk: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 01"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x45 32 43 FC 60 9B 23 32 7E DF AA FA 71 31 CD 9F84 90 70 1C 5A D4 A7 9C FC 1F E0 FF 42 F4 FB 00"
| decode_to_chunk: output: 
|   45 32 43 fc  60 9b 23 32  7e df aa fa  71 31 cd 9f
|   84 90 70 1c  5a d4 a7 9c  fc 1f e0 ff  42 f4 fb 00
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: expected counter-block: : input "0x 00 96 B0 3B  02 0C 6E AD C2 CB 50 0D  00 00 00 03"
| decode_to_chunk: output: 
|   00 96 b0 3b  02 0c 6e ad  c2 cb 50 0d  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| compare_chunk: decrypt: ok
| compare_chunk: counter-block: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 192-bit key passed
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 192-bit key
| decode_to_chunk: key: input "0x02 BF 39 1E E8 EC B1 59 B9 59 61 7B 09 65 27 9BF5 9B 60 A7 86 D3 E0 FE"
| decode_to_chunk: output: 
|   02 bf 39 1e  e8 ec b1 59  b9 59 61 7b  09 65 27 9b
|   f5 9b 60 a7  86 d3 e0 fe
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf4e60/24) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  02 bf 39 1e  e8 ec b1 59  b9 59 61 7b  09 65 27 9b
| bytes:  f5 9b 60 a7  86 d3 e0 fe
| tmp: key(0x7fd430bf2fd0) length(40) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(24) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CTR)
| symkey: key(0x7fd430bf2fd0) length(40) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(24) type/mechanism(AES_CTR 0x00001086)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: input counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 01"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: Ciphertext: input "0x96 89 3F C5 5E 5C 72 2F 54 0B 7D D1 DD F7 E7 58D2 88 BC 95 C6 91 65 88 45 36 C8 11 66 2F 21 88AB EE 09 35"
| decode_to_chunk: output: 
|   96 89 3f c5  5e 5c 72 2f  54 0b 7d d1  dd f7 e7 58
|   d2 88 bc 95  c6 91 65 88  45 36 c8 11  66 2f 21 88
|   ab ee 09 35
| decode_to_chunk: expected counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 04"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| compare_chunk: encrypt: ok
| compare_chunk: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 01"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x96 89 3F C5 5E 5C 72 2F 54 0B 7D D1 DD F7 E7 58D2 88 BC 95 C6 91 65 88 45 36 C8 11 66 2F 21 88AB EE 09 35"
| decode_to_chunk: output: 
|   96 89 3f c5  5e 5c 72 2f  54 0b 7d d1  dd f7 e7 58
|   d2 88 bc 95  c6 91 65 88  45 36 c8 11  66 2f 21 88
|   ab ee 09 35
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: expected counter-block: : input "0x 00 07 BD FD  5C BD 60 27 8D CC 09 12  00 00 00 04"
| decode_to_chunk: output: 
|   00 07 bd fd  5c bd 60 27  8d cc 09 12  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| compare_chunk: decrypt: ok
| compare_chunk: counter-block: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 192-bit key passed
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 256-bit key
| decode_to_chunk: key: input "0x77 6B EF F2 85 1D B0 6F 4C 8A 05 42 C8 69 6F 6C6A 81 AF 1E EC 96 B4 D3 7F C1 D6 89 E6 C1 C1 04"
| decode_to_chunk: output: 
|   77 6b ef f2  85 1d b0 6f  4c 8a 05 42  c8 69 6f 6c
|   6a 81 af 1e  ec 96 b4 d3  7f c1 d6 89  e6 c1 c1 04
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf4950/32) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  77 6b ef f2  85 1d b0 6f  4c 8a 05 42  c8 69 6f 6c
| bytes:  6a 81 af 1e  ec 96 b4 d3  7f c1 d6 89  e6 c1 c1 04
| tmp: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(32) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CTR)
| symkey: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(32) type/mechanism(AES_CTR 0x00001086)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: input counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 01
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: Ciphertext: input "0x 14 5A D0 1D BF 82 4E C7 56 08 63 DC 71 E3 E0 C0"
| decode_to_chunk: output: 
|   14 5a d0 1d  bf 82 4e c7  56 08 63 dc  71 e3 e0 c0
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| compare_chunk: encrypt: ok
| compare_chunk: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 01
| decode_to_chunk: Ciphertext: input "0x 14 5A D0 1D BF 82 4E C7 56 08 63 DC 71 E3 E0 C0"
| decode_to_chunk: output: 
|   14 5a d0 1d  bf 82 4e c7  56 08 63 dc  71 e3 e0 c0
| decode_to_chunk: Plaintext: input "0x 53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67"
| decode_to_chunk: output: 
|   53 69 6e 67  6c 65 20 62  6c 6f 63 6b  20 6d 73 67
| decode_to_chunk: expected counter-block: : input "0x 00 00 00 60  DB 56 72 C9 7A A8 F0 B2  00 00 00 02"
| decode_to_chunk: output: 
|   00 00 00 60  db 56 72 c9  7a a8 f0 b2  00 00 00 02
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x2 for 16 bytes
| do_aes_ctr: exit
| compare_chunk: decrypt: ok
| compare_chunk: counter-block: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 16 octets using AES-CTR with 256-bit key passed
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 256-bit key
| decode_to_chunk: key: input "0xF6 D6 6D 6B D5 2D 59 BB 07 96 36 58 79 EF F8 86C6 6D D5 1A 5B 6A 99 74 4B 50 59 0C 87 A2 38 84"
| decode_to_chunk: output: 
|   f6 d6 6d 6b  d5 2d 59 bb  07 96 36 58  79 ef f8 86
|   c6 6d d5 1a  5b 6a 99 74  4b 50 59 0c  87 a2 38 84
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf4950/32) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  f6 d6 6d 6b  d5 2d 59 bb  07 96 36 58  79 ef f8 86
| bytes:  c6 6d d5 1a  5b 6a 99 74  4b 50 59 0c  87 a2 38 84
| tmp: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(32) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CTR)
| symkey: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(32) type/mechanism(AES_CTR 0x00001086)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: input counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 01"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: Ciphertext: input "0xF0 5E 23 1B 38 94 61 2C 49 EE 00 0B 80 4E B2 A9B8 30 6B 50 8F 83 9D 6A 55 30 83 1D 93 44 AF 1C"
| decode_to_chunk: output: 
|   f0 5e 23 1b  38 94 61 2c  49 ee 00 0b  80 4e b2 a9
|   b8 30 6b 50  8f 83 9d 6a  55 30 83 1d  93 44 af 1c
| decode_to_chunk: expected counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 03"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| compare_chunk: encrypt: ok
| compare_chunk: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 01"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 01
| decode_to_chunk: Ciphertext: input "0xF0 5E 23 1B 38 94 61 2C 49 EE 00 0B 80 4E B2 A9B8 30 6B 50 8F 83 9D 6A 55 30 83 1D 93 44 AF 1C"
| decode_to_chunk: output: 
|   f0 5e 23 1b  38 94 61 2c  49 ee 00 0b  80 4e b2 a9
|   b8 30 6b 50  8f 83 9d 6a  55 30 83 1d  93 44 af 1c
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
| decode_to_chunk: expected counter-block: : input "0x 00 FA AC 24  C1 58 5E F1 5A 43 D8 75  00 00 00 03"
| decode_to_chunk: output: 
|   00 fa ac 24  c1 58 5e f1  5a 43 d8 75  00 00 00 03
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x3 for 32 bytes
| do_aes_ctr: exit
| compare_chunk: decrypt: ok
| compare_chunk: counter-block: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 32 octets using AES-CTR with 256-bit key passed
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 256-bit key
| decode_to_chunk: key: input "0xFF 7A 61 7C E6 91 48 E4 F1 72 6E 2F 43 58 1D E2AA 62 D9 F8 05 53 2E DF F1 EE D6 87 FB 54 15 3D"
| decode_to_chunk: output: 
|   ff 7a 61 7c  e6 91 48 e4  f1 72 6e 2f  43 58 1d e2
|   aa 62 d9 f8  05 53 2e df  f1 ee d6 87  fb 54 15 3d
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf4950/32) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  ff 7a 61 7c  e6 91 48 e4  f1 72 6e 2f  43 58 1d e2
| bytes:  aa 62 d9 f8  05 53 2e df  f1 ee d6 87  fb 54 15 3d
| tmp: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(32) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_CTR)
| symkey: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(32) type/mechanism(AES_CTR 0x00001086)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: input counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 01"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 01
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: Ciphertext: input "0xEB 6C 52 82 1D 0B BB F7 CE 75 94 46 2A CA 4F AAB4 07 DF 86 65 69 FD 07 F4 8C C0 B5 83 D6 07 1F1E C0 E6 B8"
| decode_to_chunk: output: 
|   eb 6c 52 82  1d 0b bb f7  ce 75 94 46  2a ca 4f aa
|   b4 07 df 86  65 69 fd 07  f4 8c c0 b5  83 d6 07 1f
|   1e c0 e6 b8
| decode_to_chunk: expected counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 04"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| compare_chunk: encrypt: ok
| compare_chunk: counter-block: ok
| decode_to_chunk: input counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 01"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 01
| decode_to_chunk: Ciphertext: input "0xEB 6C 52 82 1D 0B BB F7 CE 75 94 46 2A CA 4F AAB4 07 DF 86 65 69 FD 07 F4 8C C0 B5 83 D6 07 1F1E C0 E6 B8"
| decode_to_chunk: output: 
|   eb 6c 52 82  1d 0b bb f7  ce 75 94 46  2a ca 4f aa
|   b4 07 df 86  65 69 fd 07  f4 8c c0 b5  83 d6 07 1f
|   1e c0 e6 b8
| decode_to_chunk: Plaintext: input "0x00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F20 21 22 23"
| decode_to_chunk: output: 
|   00 01 02 03  04 05 06 07  08 09 0a 0b  0c 0d 0e 0f
|   10 11 12 13  14 15 16 17  18 19 1a 1b  1c 1d 1e 1f
|   20 21 22 23
| decode_to_chunk: expected counter-block: : input "0x 00 1C C5 B7  51 A5 1D 70 A1 C1 11 48  00 00 00 04"
| decode_to_chunk: output: 
|   00 1c c5 b7  51 a5 1d 70  a1 c1 11 48  00 00 00 04
| do_aes_ctr: enter
| do_aes_ctr: counter-block updated from 0x1 to 0x4 for 36 bytes
| do_aes_ctr: exit
| compare_chunk: decrypt: ok
| compare_chunk: counter-block: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Encrypting 36 octets using AES-CTR with 256-bit key passed
ike_alg_register_enc(): Activating OAKLEY_AES_CTR: Ok
| test_gcm_vector: enter
| decode_to_chunk: key: input "0xcf063a34d4a9a76c2c86787d3f96db71"
| decode_to_chunk: output: 
|   cf 06 3a 34  d4 a9 a7 6c  2c 86 78 7d  3f 96 db 71
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430befe30/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  cf 06 3a 34  d4 a9 a7 6c  2c 86 78 7d  3f 96 db 71
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_GCM)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_GCM 0x00001087)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: salted IV: input "0x113b9785971864c83b01c787"
| decode_to_chunk: output: 
|   11 3b 97 85  97 18 64 c8  3b 01 c7 87
| extract_chunk: salt: offset 0 length 4
| salt  11 3b 97 85
| extract_chunk: wire-IV: offset 4 length 8
| wire-IV  97 18 64 c8  3b 01 c7 87
| decode_to_chunk: AAD: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: plaintext: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: ciphertext: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: tag: input "0x72ac8493e3a5228b5d130a69d2510e42"
| decode_to_chunk: output: 
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| test_gcm_vector: decrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=0 tag-size=16
| test_gcm_vector: text+tag on call
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| test_gcm_vector: text+tag on return
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| compare_chunk: output plaintext: ok
| compare_chunk: TAG: ok
| test_gcm_vector: encrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=0 tag-size=16
| test_gcm_vector: text+tag on call
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| test_gcm_vector: text+tag on return
|   72 ac 84 93  e3 a5 22 8b  5d 13 0a 69  d2 51 0e 42
| compare_chunk: output ciphertext: ok
| compare_chunk: TAG: ok
| sym_key: free key 0x7fd430bf1750
| test_gcm_vector: passed
| test_gcm_vector: enter
| decode_to_chunk: key: input "0xe98b72a9881a84ca6b76e0f43e68647a"
| decode_to_chunk: output: 
|   e9 8b 72 a9  88 1a 84 ca  6b 76 e0 f4  3e 68 64 7a
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430befe30/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  e9 8b 72 a9  88 1a 84 ca  6b 76 e0 f4  3e 68 64 7a
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_GCM)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_GCM 0x00001087)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: salted IV: input "0x8b23299fde174053f3d652ba"
| decode_to_chunk: output: 
|   8b 23 29 9f  de 17 40 53  f3 d6 52 ba
| extract_chunk: salt: offset 0 length 4
| salt  8b 23 29 9f
| extract_chunk: wire-IV: offset 4 length 8
| wire-IV  de 17 40 53  f3 d6 52 ba
| decode_to_chunk: AAD: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: plaintext: input "0x28286a321293253c3e0aa2704a278032"
| decode_to_chunk: output: 
|   28 28 6a 32  12 93 25 3c  3e 0a a2 70  4a 27 80 32
| decode_to_chunk: ciphertext: input "0x5a3c1cf1985dbb8bed818036fdd5ab42"
| decode_to_chunk: output: 
|   5a 3c 1c f1  98 5d bb 8b  ed 81 80 36  fd d5 ab 42
| decode_to_chunk: tag: input "0x23c7ab0f952b7091cd324835043b5eb5"
| decode_to_chunk: output: 
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| test_gcm_vector: decrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=16 tag-size=16
| test_gcm_vector: text+tag on call
|   5a 3c 1c f1  98 5d bb 8b  ed 81 80 36  fd d5 ab 42
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| test_gcm_vector: text+tag on return
|   28 28 6a 32  12 93 25 3c  3e 0a a2 70  4a 27 80 32
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| compare_chunk: output plaintext: ok
| compare_chunk: TAG: ok
| test_gcm_vector: encrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=16 tag-size=16
| test_gcm_vector: text+tag on call
|   28 28 6a 32  12 93 25 3c  3e 0a a2 70  4a 27 80 32
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| test_gcm_vector: text+tag on return
|   5a 3c 1c f1  98 5d bb 8b  ed 81 80 36  fd d5 ab 42
|   23 c7 ab 0f  95 2b 70 91  cd 32 48 35  04 3b 5e b5
| compare_chunk: output ciphertext: ok
| compare_chunk: TAG: ok
| sym_key: free key 0x7fd430bf1750
| test_gcm_vector: passed
| test_gcm_vector: enter
| decode_to_chunk: key: input "0xbfd414a6212958a607a0f5d3ab48471d"
| decode_to_chunk: output: 
|   bf d4 14 a6  21 29 58 a6  07 a0 f5 d3  ab 48 47 1d
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf4940/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  bf d4 14 a6  21 29 58 a6  07 a0 f5 d3  ab 48 47 1d
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_GCM)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_GCM 0x00001087)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: salted IV: input "0x86d8ea0ab8e40dcc481cd0e2"
| decode_to_chunk: output: 
|   86 d8 ea 0a  b8 e4 0d cc  48 1c d0 e2
| extract_chunk: salt: offset 0 length 4
| salt  86 d8 ea 0a
| extract_chunk: wire-IV: offset 4 length 8
| wire-IV  b8 e4 0d cc  48 1c d0 e2
| decode_to_chunk: AAD: input ""
| decode_to_chunk: output: 
| 
| decode_to_chunk: plaintext: input "0xa6b76a066e63392c9443e60272ceaeb9d25c991b0f2e55e2804e168c05ea591a"
| decode_to_chunk: output: 
|   a6 b7 6a 06  6e 63 39 2c  94 43 e6 02  72 ce ae b9
|   d2 5c 99 1b  0f 2e 55 e2  80 4e 16 8c  05 ea 59 1a
| decode_to_chunk: ciphertext: input "0x62171db33193292d930bf6647347652c1ef33316d7feca99d54f1db4fcf513f8"
| decode_to_chunk: output: 
|   62 17 1d b3  31 93 29 2d  93 0b f6 64  73 47 65 2c
|   1e f3 33 16  d7 fe ca 99  d5 4f 1d b4  fc f5 13 f8
| decode_to_chunk: tag: input "0xc28280aa5c6c7a8bd366f28c1cfd1f6e"
| decode_to_chunk: output: 
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| test_gcm_vector: decrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=32 tag-size=16
| test_gcm_vector: text+tag on call
|   62 17 1d b3  31 93 29 2d  93 0b f6 64  73 47 65 2c
|   1e f3 33 16  d7 fe ca 99  d5 4f 1d b4  fc f5 13 f8
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| test_gcm_vector: text+tag on return
|   a6 b7 6a 06  6e 63 39 2c  94 43 e6 02  72 ce ae b9
|   d2 5c 99 1b  0f 2e 55 e2  80 4e 16 8c  05 ea 59 1a
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| compare_chunk: output plaintext: ok
| compare_chunk: TAG: ok
| test_gcm_vector: encrypt: aad-size=0 salt-size=4 wire-IV-size=8 text-size=32 tag-size=16
| test_gcm_vector: text+tag on call
|   a6 b7 6a 06  6e 63 39 2c  94 43 e6 02  72 ce ae b9
|   d2 5c 99 1b  0f 2e 55 e2  80 4e 16 8c  05 ea 59 1a
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| test_gcm_vector: text+tag on return
|   62 17 1d b3  31 93 29 2d  93 0b f6 64  73 47 65 2c
|   1e f3 33 16  d7 fe ca 99  d5 4f 1d b4  fc f5 13 f8
|   c2 82 80 aa  5c 6c 7a 8b  d3 66 f2 8c  1c fd 1f 6e
| compare_chunk: output ciphertext: ok
| compare_chunk: TAG: ok
| sym_key: free key 0x7fd430bf1750
| test_gcm_vector: passed
| test_gcm_vector: enter
| decode_to_chunk: key: input "0x006c458100fc5f4d62949d2c833b82d1"
| decode_to_chunk: output: 
|   00 6c 45 81  00 fc 5f 4d  62 94 9d 2c  83 3b 82 d1
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf4940/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  00 6c 45 81  00 fc 5f 4d  62 94 9d 2c  83 3b 82 d1
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(AES_GCM)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(AES_GCM 0x00001087)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: salted IV: input "0xa4e9c4bc5725a21ff42c82b2"
| decode_to_chunk: output: 
|   a4 e9 c4 bc  57 25 a2 1f  f4 2c 82 b2
| extract_chunk: salt: offset 0 length 4
| salt  a4 e9 c4 bc
| extract_chunk: wire-IV: offset 4 length 8
| wire-IV  57 25 a2 1f  f4 2c 82 b2
| decode_to_chunk: AAD: input "0x2efb14fb3657cdd6b9a8ff1a5f5a39b9"
| decode_to_chunk: output: 
|   2e fb 14 fb  36 57 cd d6  b9 a8 ff 1a  5f 5a 39 b9
| decode_to_chunk: plaintext: input "0xf381d3bfbee0a879f7a4e17b623278cedd6978053dd313530a18f1a836100950"
| decode_to_chunk: output: 
|   f3 81 d3 bf  be e0 a8 79  f7 a4 e1 7b  62 32 78 ce
|   dd 69 78 05  3d d3 13 53  0a 18 f1 a8  36 10 09 50
| decode_to_chunk: ciphertext: input "0xf39b4db3542d8542fb73fd2d66be568f26d7f814b3f87d1eceac3dd09a8d697e"
| decode_to_chunk: output: 
|   f3 9b 4d b3  54 2d 85 42  fb 73 fd 2d  66 be 56 8f
|   26 d7 f8 14  b3 f8 7d 1e  ce ac 3d d0  9a 8d 69 7e
| decode_to_chunk: tag: input "0x39f045cb23b698c925db134d56c5"
| decode_to_chunk: output: 
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| test_gcm_vector: decrypt: aad-size=16 salt-size=4 wire-IV-size=8 text-size=32 tag-size=14
| test_gcm_vector: text+tag on call
|   f3 9b 4d b3  54 2d 85 42  fb 73 fd 2d  66 be 56 8f
|   26 d7 f8 14  b3 f8 7d 1e  ce ac 3d d0  9a 8d 69 7e
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| test_gcm_vector: text+tag on return
|   f3 81 d3 bf  be e0 a8 79  f7 a4 e1 7b  62 32 78 ce
|   dd 69 78 05  3d d3 13 53  0a 18 f1 a8  36 10 09 50
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| compare_chunk: output plaintext: ok
| compare_chunk: TAG: ok
| test_gcm_vector: encrypt: aad-size=16 salt-size=4 wire-IV-size=8 text-size=32 tag-size=14
| test_gcm_vector: text+tag on call
|   f3 81 d3 bf  be e0 a8 79  f7 a4 e1 7b  62 32 78 ce
|   dd 69 78 05  3d d3 13 53  0a 18 f1 a8  36 10 09 50
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00
| test_gcm_vector: text+tag on return
|   f3 9b 4d b3  54 2d 85 42  fb 73 fd 2d  66 be 56 8f
|   26 d7 f8 14  b3 f8 7d 1e  ce ac 3d d0  9a 8d 69 7e
|   39 f0 45 cb  23 b6 98 c9  25 db 13 4d  56 c5
| compare_chunk: output ciphertext: ok
| compare_chunk: TAG: ok
| sym_key: free key 0x7fd430bf1750
| test_gcm_vector: passed
ike_alg_register_enc(): Activating OAKLEY_AES_GCM_A: Ok
ike_alg_register_enc(): Activating OAKLEY_AES_GCM_B: Ok
ike_alg_register_enc(): Activating OAKLEY_AES_GCM_C: Ok
ike_alg_register_hash(): Activating DISABLED-OAKLEY_AES_XCBC: Ok
| test_cbc_vector: Camellia: 16 bytes with 128-bit key
| decode_to_chunk: key: input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf4970/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(CAMELLIA_CBC)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(CAMELLIA_CBC 0x00000552)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: ciphertext: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| compare_chunk: encrypt: ok
| compare_chunk: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| decode_to_chunk: cipertext: : input "0x07 92 3A 39 EB 0A 81 7D 1C 4D 87 BD B8 2D 1F 1C"
| decode_to_chunk: output: 
|   07 92 3a 39  eb 0a 81 7d  1c 4d 87 bd  b8 2d 1f 1c
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| compare_chunk: decrypt: ok
| compare_chunk: updated CBC IV: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Camellia: 16 bytes with 128-bit key passed
| test_cbc_vector: Camellia: 16 bytes with 128-bit key
| decode_to_chunk: key: input "0x00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF"
| decode_to_chunk: output: 
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf4a20/16) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
| tmp: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(16) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(CAMELLIA_CBC)
| symkey: key(0x7fd430bf2fd0) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(16) type/mechanism(CAMELLIA_CBC 0x00000552)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 "
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: ciphertext: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| compare_chunk: encrypt: ok
| compare_chunk: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| decode_to_chunk: cipertext: : input "0x14 4D 2B 0F 50 0C 27 B7 EC 2C D1 2D 91 59 6F 37"
| decode_to_chunk: output: 
|   14 4d 2b 0f  50 0c 27 b7  ec 2c d1 2d  91 59 6f 37
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 "
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| compare_chunk: decrypt: ok
| compare_chunk: updated CBC IV: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Camellia: 16 bytes with 128-bit key passed
| test_cbc_vector: Camellia: 16 bytes with 256-bit key
| decode_to_chunk: key: input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf49b0/32) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| tmp: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(32) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(CAMELLIA_CBC)
| symkey: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(32) type/mechanism(CAMELLIA_CBC 0x00000552)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: ciphertext: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| compare_chunk: encrypt: ok
| compare_chunk: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| decode_to_chunk: cipertext: : input "0xB0 C6 B8 8A EA 51 8A B0 9E 84 72 48 E9 1B 1B 9D"
| decode_to_chunk: output: 
|   b0 c6 b8 8a  ea 51 8a b0  9e 84 72 48  e9 1b 1b 9d
| decode_to_chunk: plaintext: : input "0x80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   80 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| compare_chunk: decrypt: ok
| compare_chunk: updated CBC IV: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Camellia: 16 bytes with 256-bit key passed
| test_cbc_vector: Camellia: 16 bytes with 256-bit key
| decode_to_chunk: key: input "0x00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF FF EE DD CC BB AA 99 88 77 66 55 44 33 22 11 00"
| decode_to_chunk: output: 
|   00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
|   ff ee dd cc  bb aa 99 88  77 66 55 44  33 22 11 00
| ephemeral_key: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| tmp: merge symkey(0x7fd430bf0020) bytes(0x7fd430bf49b0/32) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf0020) length(16) type/mechanism(AES_KEY_GEN 0x00001080)
| bytes:  00 11 22 33  44 55 66 77  88 99 aa bb  cc dd ee ff
| bytes:  ff ee dd cc  bb aa 99 88  77 66 55 44  33 22 11 00
| tmp: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(32) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(CAMELLIA_CBC)
| symkey: key(0x7fd430bf2fd0) length(48) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey:  key(0x7fd430bf1750) length(32) type/mechanism(CAMELLIA_CBC 0x00000552)
| tmp:: free key 0x7fd430bf2fd0
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| decode_to_chunk: ciphertext: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| compare_chunk: encrypt: ok
| compare_chunk: updated CBC IV: ok
| decode_to_chunk: IV: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| decode_to_chunk: new IV: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| decode_to_chunk: cipertext: : input "0xCC 39 FF EE 18 56 D3 EB 61 02 5E 93 21 9B 65 23 "
| decode_to_chunk: output: 
|   cc 39 ff ee  18 56 d3 eb  61 02 5e 93  21 9b 65 23
| decode_to_chunk: plaintext: : input "0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01"
| decode_to_chunk: output: 
|   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 01
| NSS ike_alg_nss_cbc: camellia - enter
| NSS ike_alg_nss_cbc: camellia - exit
| compare_chunk: decrypt: ok
| compare_chunk: updated CBC IV: ok
| sym_key: free key 0x7fd430bf1750
| test_ctr_vector: Camellia: 16 bytes with 256-bit key passed
ike_alg_register_enc(): Activating OAKLEY_CAMELLIA_CBC: Ok
ike_alg_register_enc(): Activating OAKLEY_CAMELLIA_CTR: Ok
ike_alg_register_hash(): Activating OAKLEY_SHA2_512: Ok
ike_alg_register_hash(): Activating OAKLEY_SHA2_384: Ok
ike_alg_register_hash(): Activating OAKLEY_SHA2_256: Ok
starting up 1 crypto helpers
started thread for crypto helper 0 (master fd 11)
| setup helper callback for master fd 11
Using Linux XFRM/NETKEY IPsec interface code on 4.0.4-301.fc22.x86_64
| process 1915 listening for PF_KEY_V2 on file descriptor 15
| kernel_alg_init()
| kernel_alg_add(): satype=3, exttype=15, alg_id=18(ESP_AES_GCM_A)
| kernel_alg_add(): satype=3, exttype=15, alg_id=19(ESP_AES_GCM_B)
| kernel_alg_add(): satype=3, exttype=15, alg_id=20(ESP_AES_GCM_C)
| kernel_alg_add(): satype=3, exttype=15, alg_id=14(ESP_AES_CCM_A)
| kernel_alg_add(): satype=3, exttype=15, alg_id=15(ESP_AES_CCM_B)
| kernel_alg_add(): satype=3, exttype=15, alg_id=16(ESP_AES_CCM_C)
ike_alg_register_enc(): Activating aes_ccm_8: Ok
ike_alg_register_enc(): Activating aes_ccm_12: Ok
ike_alg_register_enc(): Activating aes_ccm_16: Ok
| Registered AEAD AES CCM/GCM algorithms
| finish_pfkey_msg: K_SADB_REGISTER message 1 for AH 
|   02 07 00 02  02 00 00 00  01 00 00 00  7b 07 00 00
| status value returned by setting the priority of this thread (crypto helper 0) 22
| crypto helper 0 waiting on fd 12
| pfkey_get: K_SADB_REGISTER message 1
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: sadb_msg_len=22 sadb_supported_len=72
| kernel_alg_add(): satype=2, exttype=14, alg_id=251(ESP_KAME_NULL)
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[0], exttype=14, satype=2, alg_id=251, alg_ivlen=0, alg_minbits=0, alg_maxbits=0, res=0, ret=1
| kernel_alg_add(): satype=2, exttype=14, alg_id=2(ESP_DES)
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[1], exttype=14, satype=2, alg_id=2, alg_ivlen=0, alg_minbits=128, alg_maxbits=128, res=0, ret=1
| kernel_alg_add(): satype=2, exttype=14, alg_id=3(ESP_3DES)
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[2], exttype=14, satype=2, alg_id=3, alg_ivlen=0, alg_minbits=160, alg_maxbits=160, res=0, ret=1
| kernel_alg_add(): satype=2, exttype=14, alg_id=5(ESP_IDEA)
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[3], exttype=14, satype=2, alg_id=5, alg_ivlen=0, alg_minbits=256, alg_maxbits=256, res=0, ret=1
| kernel_alg_add(): satype=2, exttype=14, alg_id=6(ESP_CAST)
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[4], exttype=14, satype=2, alg_id=6, alg_ivlen=0, alg_minbits=384, alg_maxbits=384, res=0, ret=1
| kernel_alg_add(): satype=2, exttype=14, alg_id=7(ESP_BLOWFISH)
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[5], exttype=14, satype=2, alg_id=7, alg_ivlen=0, alg_minbits=512, alg_maxbits=512, res=0, ret=1
| kernel_alg_add(): satype=2, exttype=14, alg_id=8(ESP_3IDEA)
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[6], exttype=14, satype=2, alg_id=8, alg_ivlen=0, alg_minbits=160, alg_maxbits=160, res=0, ret=1
| kernel_alg_add(): satype=2, exttype=14, alg_id=9(ESP_DES_IV32)
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[7], exttype=14, satype=2, alg_id=9, alg_ivlen=0, alg_minbits=128, alg_maxbits=128, res=0, ret=1
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: sadb_msg_len=22 sadb_supported_len=88
| kernel_alg_add(): satype=2, exttype=15, alg_id=11(ESP_NULL)
| kernel_alg_add(2,15,11) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[8], exttype=15, satype=2, alg_id=11, alg_ivlen=0, alg_minbits=0, alg_maxbits=0, res=0, ret=-1
| kernel_alg_add(): satype=2, exttype=15, alg_id=2(ESP_DES)
| kernel_alg_add(2,15,2) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[9], exttype=15, satype=2, alg_id=2, alg_ivlen=8, alg_minbits=64, alg_maxbits=64, res=0, ret=-1
| kernel_alg_add(): satype=2, exttype=15, alg_id=3(ESP_3DES)
| kernel_alg_add(2,15,3) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[10], exttype=15, satype=2, alg_id=3, alg_ivlen=8, alg_minbits=192, alg_maxbits=192, res=0, ret=-1
| kernel_alg_add(): satype=2, exttype=15, alg_id=6(ESP_CAST)
| kernel_alg_add(2,15,6) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[11], exttype=15, satype=2, alg_id=6, alg_ivlen=8, alg_minbits=40, alg_maxbits=128, res=0, ret=-1
| kernel_alg_add(): satype=2, exttype=15, alg_id=7(ESP_BLOWFISH)
| kernel_alg_add(2,15,7) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[12], exttype=15, satype=2, alg_id=7, alg_ivlen=8, alg_minbits=40, alg_maxbits=448, res=0, ret=-1
| kernel_alg_add(): satype=2, exttype=15, alg_id=12(ESP_AES)
| kernel_alg_add(2,15,12) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[13], exttype=15, satype=2, alg_id=12, alg_ivlen=8, alg_minbits=128, alg_maxbits=256, res=0, ret=-1
| kernel_alg_add(): satype=2, exttype=15, alg_id=252(ESP_SERPENT)
| kernel_alg_add(2,15,252) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[14], exttype=15, satype=2, alg_id=252, alg_ivlen=8, alg_minbits=128, alg_maxbits=256, res=0, ret=-1
| kernel_alg_add(): satype=2, exttype=15, alg_id=22(ESP_CAMELLIA)
| kernel_alg_add(2,15,22) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[15], exttype=15, satype=2, alg_id=22, alg_ivlen=8, alg_minbits=128, alg_maxbits=256, res=0, ret=-1
| kernel_alg_add(): satype=2, exttype=15, alg_id=253(ESP_TWOFISH)
| kernel_alg_add(2,15,253) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[16], exttype=15, satype=2, alg_id=253, alg_ivlen=8, alg_minbits=128, alg_maxbits=256, res=0, ret=-1
| kernel_alg_add(): satype=2, exttype=15, alg_id=13(ESP_AES_CTR)
| kernel_alg_add(2,15,13) fails because alg combo is invalid
| kernel_alg_register_pfkey(): SADB_SATYPE_AH: alg[17], exttype=15, satype=2, alg_id=13, alg_ivlen=8, alg_minbits=160, alg_maxbits=288, res=0, ret=-1
| AH registered with kernel.
| finish_pfkey_msg: K_SADB_REGISTER message 2 for ESP 
|   02 07 00 03  02 00 00 00  02 00 00 00  7b 07 00 00
| pfkey_get: K_SADB_REGISTER message 2
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: sadb_msg_len=22 sadb_supported_len=72
| kernel_alg_add(): satype=3, exttype=14, alg_id=251(ESP_KAME_NULL)
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=251
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[0], exttype=14, satype=3, alg_id=251, alg_ivlen=0, alg_minbits=0, alg_maxbits=0, res=0, ret=0
| kernel_alg_add(): satype=3, exttype=14, alg_id=2(ESP_DES)
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=2
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[1], exttype=14, satype=3, alg_id=2, alg_ivlen=0, alg_minbits=128, alg_maxbits=128, res=0, ret=0
| kernel_alg_add(): satype=3, exttype=14, alg_id=3(ESP_3DES)
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=3
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[2], exttype=14, satype=3, alg_id=3, alg_ivlen=0, alg_minbits=160, alg_maxbits=160, res=0, ret=0
| kernel_alg_add(): satype=3, exttype=14, alg_id=5(ESP_IDEA)
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=5
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[3], exttype=14, satype=3, alg_id=5, alg_ivlen=0, alg_minbits=256, alg_maxbits=256, res=0, ret=0
| kernel_alg_add(): satype=3, exttype=14, alg_id=6(ESP_CAST)
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=6
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[4], exttype=14, satype=3, alg_id=6, alg_ivlen=0, alg_minbits=384, alg_maxbits=384, res=0, ret=0
| kernel_alg_add(): satype=3, exttype=14, alg_id=7(ESP_BLOWFISH)
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=7
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[5], exttype=14, satype=3, alg_id=7, alg_ivlen=0, alg_minbits=512, alg_maxbits=512, res=0, ret=0
| kernel_alg_add(): satype=3, exttype=14, alg_id=8(ESP_3IDEA)
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=8
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[6], exttype=14, satype=3, alg_id=8, alg_ivlen=0, alg_minbits=160, alg_maxbits=160, res=0, ret=0
| kernel_alg_add(): satype=3, exttype=14, alg_id=9(ESP_DES_IV32)
| kernel_alg_add(): discarding already setup satype=3, exttype=14, alg_id=9
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[7], exttype=14, satype=3, alg_id=9, alg_ivlen=0, alg_minbits=128, alg_maxbits=128, res=0, ret=0
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: sadb_msg_len=22 sadb_supported_len=88
| kernel_alg_add(): satype=3, exttype=15, alg_id=11(ESP_NULL)
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[8], exttype=15, satype=3, alg_id=11, alg_ivlen=0, alg_minbits=0, alg_maxbits=0, res=0, ret=1
| kernel_alg_add(): satype=3, exttype=15, alg_id=2(ESP_DES)
| kernel_alg_add(): Ignoring alg_id=2(ESP_DES) - too weak
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[9], exttype=15, satype=3, alg_id=2, alg_ivlen=8, alg_minbits=64, alg_maxbits=64, res=0, ret=0
| kernel_alg_add(): satype=3, exttype=15, alg_id=3(ESP_3DES)
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[10], exttype=15, satype=3, alg_id=3, alg_ivlen=8, alg_minbits=192, alg_maxbits=192, res=0, ret=1
| kernel_alg_add(): satype=3, exttype=15, alg_id=6(ESP_CAST)
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[11], exttype=15, satype=3, alg_id=6, alg_ivlen=8, alg_minbits=40, alg_maxbits=128, res=0, ret=1
| kernel_alg_add(): satype=3, exttype=15, alg_id=7(ESP_BLOWFISH)
| kernel_alg_add(): Ignoring alg_id=7(ESP_BLOWFISH) - too weak
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[12], exttype=15, satype=3, alg_id=7, alg_ivlen=8, alg_minbits=40, alg_maxbits=448, res=0, ret=0
| kernel_alg_add(): satype=3, exttype=15, alg_id=12(ESP_AES)
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[13], exttype=15, satype=3, alg_id=12, alg_ivlen=8, alg_minbits=128, alg_maxbits=256, res=0, ret=1
| kernel_alg_add(): satype=3, exttype=15, alg_id=252(ESP_SERPENT)
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[14], exttype=15, satype=3, alg_id=252, alg_ivlen=8, alg_minbits=128, alg_maxbits=256, res=0, ret=1
| kernel_alg_add(): satype=3, exttype=15, alg_id=22(ESP_CAMELLIA)
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[15], exttype=15, satype=3, alg_id=22, alg_ivlen=8, alg_minbits=128, alg_maxbits=256, res=0, ret=1
| kernel_alg_add(): satype=3, exttype=15, alg_id=253(ESP_TWOFISH)
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[16], exttype=15, satype=3, alg_id=253, alg_ivlen=8, alg_minbits=128, alg_maxbits=256, res=0, ret=1
| kernel_alg_add(): satype=3, exttype=15, alg_id=13(ESP_AES_CTR)
| kernel_alg_register_pfkey(): SADB_SATYPE_ESP: alg[17], exttype=15, satype=3, alg_id=13, alg_ivlen=8, alg_minbits=160, alg_maxbits=288, res=0, ret=1
| ESP registered with kernel.
| finish_pfkey_msg: K_SADB_REGISTER message 3 for IPCOMP 
|   02 07 00 09  02 00 00 00  03 00 00 00  7b 07 00 00
| pfkey_get: K_SADB_REGISTER message 3
| IPCOMP registered with kernel.
| Registered AH, ESP and IPCOMP
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| setup kernel fd callback
| Changing to directory '/etc/ipsec.d/crls'
| selinux support is enabled.
| event_schedule called for 17084 seconds
| event_schedule_tv called for about 17084 seconds and change
| inserting event EVENT_LOG_DAILY, timeout in 17084.000000 seconds
| pluto_sd: executing action action:start(1), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| created addconn helper (pid:2048) using fork+execve
| Setting up events, loop start
listening for IKE messages
| Inspecting interface lo 
| found lo with address 127.0.0.1
| Inspecting interface eth0 
| found eth0 with address 192.0.3.254
| Inspecting interface eth1 
| found eth1 with address 192.1.3.33
adding interface eth1/eth1 192.1.3.33:500
| NAT-Traversal: Trying new style NAT-T
| NAT-Traversal: ESPINUDP(2) setup failed for new style NAT-T family IPv4 (errno=95)
| NAT-Traversal: Trying old style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for old style NAT-T family IPv4
adding interface eth1/eth1 192.1.3.33:4500
adding interface eth0/eth0 192.0.3.254:500
| NAT-Traversal: Trying new style NAT-T
| NAT-Traversal: ESPINUDP(2) setup failed for new style NAT-T family IPv4 (errno=95)
| NAT-Traversal: Trying old style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for old style NAT-T family IPv4
adding interface eth0/eth0 192.0.3.254:4500
adding interface lo/lo 127.0.0.1:500
| NAT-Traversal: Trying new style NAT-T
| NAT-Traversal: ESPINUDP(2) setup failed for new style NAT-T family IPv4 (errno=95)
| NAT-Traversal: Trying old style NAT-T
| NAT-Traversal: ESPINUDP(2) setup succeeded for old style NAT-T family IPv4
adding interface lo/lo 127.0.0.1:4500
| setup callback for interface lo:4500 fd 22
| setup callback for interface lo:500 fd 21
| setup callback for interface eth0:4500 fd 20
| setup callback for interface eth0:500 fd 19
| setup callback for interface eth1:4500 fd 18
| setup callback for interface eth1:500 fd 17
| certs and keys locked by 'free_preshared_secrets'
| certs and keys unlocked by 'free_preshard_secrets'
loading secrets from "/etc/ipsec.secrets"
| saving Modulus
| saving PublicExponent
| ignoring PrivateExponent
| ignoring Prime1
| ignoring Prime2
| ignoring Exponent1
| ignoring Exponent2
| ignoring Coefficient
| saving CKAID
loaded private key for keyid: PPK_RSA:?len=3?
| certs and keys locked by 'process_secret'
| certs and keys unlocked by 'process_secret'
| Added new connection north-east-port3 with policy RSASIG+ENCRYPT+PFS+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO
| counting wild cards for @north is 0
| counting wild cards for @east is 0
| connect_to_host_pair: 192.1.3.33:500 192.1.2.23:500 -> hp:none
added connection description "north-east-port3"
| 192.1.3.33[@north]:6/0---192.1.3.254...192.1.2.23<192.1.2.23>[@east]:6/3
| ike_life: 3600s; ipsec_life: 28800s; rekey_margin: 540s; rekey_fuzz: 100%; keyingtries: 0; replay_window: 32; policy: RSASIG+ENCRYPT+PFS+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO
| add keyid @north
| add pubkey  01 03 e5 df  73 b6 3e d5  36 a8 f1 3d  0d d3 02 ab
| add pubkey  7f ec 4c 9e  8b 0e 0e d2  cf 0f 59 bf  6d 88 21 86
| add pubkey  93 9e 10 34  af 2d cf b3  7e eb e5 b2  24 b2 a5 b0
| add pubkey  01 03 7d b5  96 ad 66 ee  48 c2 28 d9  9a 76 36 a9
| add pubkey  10 84 b5 09  8f 17 4f 65  ce d8 2f 8e  78 80 8a 87
| add pubkey  f4 6b 98 d9  91 94 6b 52  15 5b 9c 47  12 be d8 6f
| add pubkey  25 b4 65 38  7e e4 8d c7  f0 58 d3 9f  69 14 cc 3e
| add pubkey  c8 16 1f af  bb 5d 93 2b  33 39 0e 94  55 81 f4 b3
| add pubkey  cc 92 58 6e  4a 5a 4e c3  76 ab 04 2e  11 08 06 55
| add pubkey  13 0f 02 6c  dd d1 bc c0  b8 8d 65 f5  97 ed fc 18
| add pubkey  39 f9 55 ab  fa 0d c5 49  99 7f 1b cf  c3 de 99 7d
| add pubkey  9e ca 6f 9e  14 d6 5a ff  de d6 4f 57  6a 83 ab 51
| add pubkey  ba 64 74 e0  22 e9 9a c5  10 71 bb d4  eb a4 99 28
| add pubkey  9c 85 0e 31  ea cc ab ef  98 84 3f 59  c1 75 aa b3
| add pubkey  61 eb 61 8c  58 a5 92 25  84 ad c7 79  f3 87 d0 c7
| add pubkey  83 c2 d6 8a  fe 26 9d 2a  ff b1 dd 9b  89 21 7c ca
| add pubkey  f5 38 2d 3f  64 0c 41 9c  34 e9 b2 55  0f 82 1a b3
| add pubkey  c7 5e a5 99
| add keyid @east
| add pubkey  01 03 bd 6c  96 eb df 78  89 b3 ed 77  0d a1 7f 7b
| add pubkey  e5 16 c2 c9  e4 7d 92 0a  90 9d 55 43  b4 62 13 03
| add pubkey  85 7a e0 26  7b 54 1f ca  09 93 cf ff  25 c9 02 4c
| add pubkey  78 ca 94 e5  3e ac d1 f9  a8 e5 bb 7f  cc 20 84 e0
| add pubkey  21 c9 f0 0d  c5 44 ba f3  48 64 61 58  f6 0f 63 0d
| add pubkey  d2 67 1e 59  8b ec f3 50  39 71 fb 39  da 11 64 b6
| add pubkey  62 cd 5f d3  8d 2e c1 50  ed 9c 6e 22  0c 39 a7 ce
| add pubkey  62 b5 af 8a  80 0f 2e 4c  05 5c 82 c7  8d 29 02 2e
| add pubkey  bb 23 5f db  f2 9e b5 7d  e2 20 70 1a  63 f3 8e 5d
| add pubkey  ac 47 f0 5c  26 4e b1 d0  42 60 52 4a  b0 77 25 ce
| add pubkey  e0 98 2b 43  f4 c7 59 1a  64 01 83 ea  4e e3 1a 2a
| add pubkey  92 b8 55 ab  63 dd 4b 70  47 29 dc e9  b4 60 bf 43
| add pubkey  4d 58 8f 64  73 95 70 ac  35 89 b2 c2  9c d4 62 c0
| add pubkey  5f 56 5f ad  1b e5 dd 49  93 6a f5 23  82 ed d4 e7
| add pubkey  d5 f1 55 f2  2d a2 26 a6  36 53 2f 94  fb 99 22 5c
| add pubkey  47 cc 6d 80  30 88 96 38  0c f5 f2 ed  37 d0 09 d5
| add pubkey  07 8f 69 ef  a9 99 ce 4d  1a 77 9e 39  c4 38 f3 c5
| add pubkey  51 51 48 ef
| Added new connection north-east-pass with policy PFS+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO+PASS+NEVER_NEGOTIATE
| counting wild cards for @north is 0
| counting wild cards for @east is 0
| find_host_pair: comparing 192.1.3.33:500 to 192.1.2.23:500
| connect_to_host_pair: 192.1.3.33:500 192.1.2.23:500 -> hp:north-east-port3
added connection description "north-east-pass"
| 192.1.3.33[@north]---192.1.3.254...192.1.2.23<192.1.2.23>[@east]
| ike_life: 0s; ipsec_life: 0s; rekey_margin: 0s; rekey_fuzz: 0%; keyingtries: 0; replay_window: 0; policy: PFS+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO+PASS+NEVER_NEGOTIATE
listening for IKE messages
| Inspecting interface lo 
| found lo with address 127.0.0.1
| Inspecting interface eth0 
| found eth0 with address 192.0.3.254
| Inspecting interface eth1 
| found eth1 with address 192.1.3.33
| refresh. setup callback for interface lo:4500 22
| setup callback for interface lo:4500 fd 22
| refresh. setup callback for interface lo:500 21
| setup callback for interface lo:500 fd 21
| refresh. setup callback for interface eth0:4500 20
| setup callback for interface eth0:4500 fd 20
| refresh. setup callback for interface eth0:500 19
| setup callback for interface eth0:500 fd 19
| refresh. setup callback for interface eth1:4500 18
| setup callback for interface eth1:4500 fd 18
| refresh. setup callback for interface eth1:500 17
| setup callback for interface eth1:500 fd 17
| certs and keys locked by 'free_preshared_secrets'
forgetting secrets
| certs and keys unlocked by 'free_preshard_secrets'
loading secrets from "/etc/ipsec.secrets"
| saving Modulus
| saving PublicExponent
| ignoring PrivateExponent
| ignoring Prime1
| ignoring Prime2
| ignoring Exponent1
| ignoring Exponent2
| ignoring Coefficient
| saving CKAID
loaded private key for keyid: PPK_RSA:?len=3?
| certs and keys locked by 'process_secret'
| certs and keys unlocked by 'process_secret'
| reaped addconn helper child
reapchild failed with errno=10 No child processes
| processing connection "north-east-pass"
| could_route called for north-east-pass (kind=CK_PERMANENT)
|  conn north-east-pass mark 0/0000000000, 0/0000000000 vs
|  conn north-east-pass mark 0/0000000000, 0/0000000000
|  conn north-east-pass mark 0/0000000000, 0/0000000000 vs
|  conn north-east-port3 mark 0/0000000000, 0/0000000000
| route owner of "north-east-pass" unrouted: NULL; eroute owner: NULL
|  conn north-east-pass mark 0/0000000000, 0/0000000000 vs
|  conn north-east-pass mark 0/0000000000, 0/0000000000
|  conn north-east-pass mark 0/0000000000, 0/0000000000 vs
|  conn north-east-port3 mark 0/0000000000, 0/0000000000
| route owner of "north-east-pass" unrouted: NULL; eroute owner: NULL
| route_and_eroute with c: north-east-pass (next: none) ero:null esr:{(nil)} ro:null rosr:{(nil)} and state: #0
| shunt_eroute() called for connection 'north-east-pass' to 'add' for rt_kind 'prospective erouted'
| netlink_raw_eroute: SPI_PASS
| netlink_raw_eroute: SPI_PASS
| route_and_eroute: firewall_notified: true
| command executing prepare-host
| trusted_ca_nss: trustee A = '(empty)'
| trusted_ca_nss: trustor B = '(empty)'
| executing prepare-host: PLUTO_VERB='prepare-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-pass' PLUTO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUTO_MY_ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33' PLUTO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='0' PLUTO_SA_REQID='16392' PLUTO_SA_TYPE='none' PLUTO_PEER='192.1.2.23' PLUTO_PEER_ID='@east' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' PLUTO_PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='0' PLUTO_PEER_PROTOCOL='0' PLUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='0' PLUTO_CONN_POLICY='PFS+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO+PASS+NEVER_NEGOTIATE' PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILED=0 PLUTO_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLUTO_PEER_BANNER='' PLUTO_NM_CONFIGURED='0' VTI_IFACE='' VTI_ROUTING='no' ipsec _updown 2>&1
| popen cmd is 964 chars long
| cmd(   0):PLUTO_VERB='prepare-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-pass':
| cmd(  80): PLUTO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUTO:
| cmd( 160):_MY_ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33':
| cmd( 240): PLUTO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='0' :
| cmd( 320):PLUTO_SA_REQID='16392' PLUTO_SA_TYPE='none' PLUTO_PEER='192.1.2.23' PLUTO_PEER_I:
| cmd( 400):D='@east' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' P:
| cmd( 480):LUTO_PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='0' PLUTO_PEER_PROTOCOL=:
| cmd( 560):'0' PLUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='0' PLUTO_CONN_POLICY='P:
| cmd( 640):FS+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO+PASS+NEVER_NEGOTIAT:
| cmd( 720):E' PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILED=0 PL:
| cmd( 800):UTO_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLUTO_PEE:
| cmd( 880):R_BANNER='' PLUTO_NM_CONFIGURED='0' VTI_IFACE='' VTI_ROUTING='no' ipsec _updown :
| cmd( 960):2>&1:
| command executing route-host
| trusted_ca_nss: trustee A = '(empty)'
| trusted_ca_nss: trustor B = '(empty)'
| executing route-host: PLUTO_VERB='route-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-pass' PLUTO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUTO_MY_ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33' PLUTO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='0' PLUTO_SA_REQID='16392' PLUTO_SA_TYPE='none' PLUTO_PEER='192.1.2.23' PLUTO_PEER_ID='@east' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' PLUTO_PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='0' PLUTO_PEER_PROTOCOL='0' PLUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='0' PLUTO_CONN_POLICY='PFS+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO+PASS+NEVER_NEGOTIATE' PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILED=0 PLUTO_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLUTO_PEER_BANNER='' PLUTO_NM_CONFIGURED='0' VTI_IFACE='' VTI_ROUTING='no' ipsec _updown 2>&1
| popen cmd is 962 chars long
| cmd(   0):PLUTO_VERB='route-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-pass' P:
| cmd(  80):LUTO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUTO_M:
| cmd( 160):Y_ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33' P:
| cmd( 240):LUTO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='0' PL:
| cmd( 320):UTO_SA_REQID='16392' PLUTO_SA_TYPE='none' PLUTO_PEER='192.1.2.23' PLUTO_PEER_ID=:
| cmd( 400):'@east' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' PLU:
| cmd( 480):TO_PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='0' PLUTO_PEER_PROTOCOL='0:
| cmd( 560):' PLUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='0' PLUTO_CONN_POLICY='PFS:
| cmd( 640):+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO+PASS+NEVER_NEGOTIATE':
| cmd( 720): PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILED=0 PLUT:
| cmd( 800):O_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLUTO_PEER_:
| cmd( 880):BANNER='' PLUTO_NM_CONFIGURED='0' VTI_IFACE='' VTI_ROUTING='no' ipsec _updown 2>:
| cmd( 960):&1:
| processing connection "north-east-port3"
| empty esp_info, returning defaults
| creating state object #1 at 0x7fd430c017e0
| parent state #1: new > STATE_UNDEFINED(ignore)
| processing connection "north-east-port3"
| inserting state object #1
| finding hash chain in state hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 6
| list 0x7fd42fb913b8 first entry (nil)
| inserted state 0x7fd430c017e0 entry 0x7fd430c01e58 next (nil) prev-next 0x7fd42fb913b8 into list
| updated next entry is (nil)
| finding hash chain in icookie hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 6
| list 0x7fd42fb914d8 first entry (nil)
| inserted state 0x7fd430c017e0 entry 0x7fd430c01e70 next (nil) prev-next 0x7fd42fb914d8 into list
| updated next entry is (nil)
| event_schedule called for 0 seconds
| event_schedule_tv called for about 0 seconds and change
| inserting event EVENT_SO_DISCARD, timeout in 0.000000 seconds for #1
| processing connection "north-east-port3"
| parent state #1: STATE_UNDEFINED(ignore) > STATE_MAIN_I1(half-open-ike)
| ignore states: 0
| half-open-ike states: 1
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| Queuing pending IPsec SA negotiating with 192.1.2.23 "north-east-port3"
"north-east-port3" #1: initiating Main Mode
| **emit ISAKMP Message:
|    initiator cookie:
|   16 be dc ea  e2 2b 8c 83
|    responder cookie:
|   00 00 00 00  00 00 00 00
|    next payload type: ISAKMP_NEXT_SA (0x1)
|    ISAKMP version: ISAKMP Version 1.0 (rfc2407) (0x10)
|    exchange type: ISAKMP_XCHG_IDPROT (0x2)
|    flags: none (0x0)
|    message ID:  00 00 00 00
| no specific IKE algorithms specified - using defaults
| ***emit ISAKMP Security Association Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
|    DOI: ISAKMP_DOI_IPSEC (0x1)
| ****emit IPsec DOI SIT:
|    IPsec DOI SIT: SIT_IDENTITY_ONLY (0x1)
| ikev1_out_sa pcn: 0 has 1 valid proposals
| ikev1_out_sa pcn: 0 pn: 0<1 valid_count: 1 trans_cnt: 18
| ****emit ISAKMP Proposal Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    proposal number: 0 (0x0)
|    protocol ID: PROTO_ISAKMP (0x1)
|    SPI size: 0 (0x0)
|    number of transforms: 18 (0x12)
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 0 (0x0)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_SHA1]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 1 (0x1)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_SHA1]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 2 (0x2)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_MD5]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 3 (0x3)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_MD5]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 4 (0x4)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_3DES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_SHA1]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| emitting length of ISAKMP Transform Payload (ISAKMP): 32
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 5 (0x5)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_3DES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_MD5]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| emitting length of ISAKMP Transform Payload (ISAKMP): 32
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 6 (0x6)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_SHA1]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_GROUP_MODP1536]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 7 (0x7)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_SHA1]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_GROUP_MODP1536]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 8 (0x8)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_MD5]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_GROUP_MODP1536]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 9 (0x9)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_MD5]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_GROUP_MODP1536]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 10 (0xa)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_3DES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_SHA1]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_GROUP_MODP1536]
| emitting length of ISAKMP Transform Payload (ISAKMP): 32
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 11 (0xb)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_3DES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_MD5]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_GROUP_MODP1536]
| emitting length of ISAKMP Transform Payload (ISAKMP): 32
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 12 (0xc)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_3DES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_SHA1]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_GROUP_MODP1024]
| emitting length of ISAKMP Transform Payload (ISAKMP): 32
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 13 (0xd)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 5 (0x5)
|     [5 is OAKLEY_3DES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_MD5]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_GROUP_MODP1024]
| emitting length of ISAKMP Transform Payload (ISAKMP): 32
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 14 (0xe)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_SHA1]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_GROUP_MODP1024]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 15 (0xf)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_SHA1]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_GROUP_MODP1024]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ISAKMP transform number: 16 (0x10)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_MD5]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_GROUP_MODP1024]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| *****emit ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    ISAKMP transform number: 17 (0x11)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_LIFE_SECONDS]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|     [7 is OAKLEY_AES_CBC]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 1 (0x1)
|     [1 is OAKLEY_MD5]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|     [3 is OAKLEY_RSA_SIG]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 2 (0x2)
|     [2 is OAKLEY_GROUP_MODP1024]
| ******emit ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 128 (0x80)
| emitting length of ISAKMP Transform Payload (ISAKMP): 36
| emitting length of ISAKMP Proposal Payload: 632
| emitting length of ISAKMP Security Association Payload: 644
| out_vid(): sending [Dead Peer Detection]
| ***emit ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
| emitting 16 raw bytes of V_ID into ISAKMP Vendor ID Payload
| V_ID  af ca d7 13  68 a1 f1 c9  6b 86 96 fc  77 57 01 00
| emitting length of ISAKMP Vendor ID Payload: 20
| out_vid(): sending [FRAGMENTATION]
| ***emit ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
| emitting 16 raw bytes of V_ID into ISAKMP Vendor ID Payload
| V_ID  40 48 b7 d5  6e bc e8 85  25 e7 de 7f  00 d6 c2 d3
| emitting length of ISAKMP Vendor ID Payload: 20
| nat traversal enabled: 1
| nat add vid
| sending draft and RFC NATT VIDs
| out_vid(): sending [RFC 3947]
| ***emit ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
| emitting 16 raw bytes of V_ID into ISAKMP Vendor ID Payload
| V_ID  4a 13 1c 81  07 03 58 45  5c 57 28 f2  0e 95 45 2f
| emitting length of ISAKMP Vendor ID Payload: 20
| out_vid(): sending [draft-ietf-ipsec-nat-t-ike-03]
| ***emit ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
| emitting 16 raw bytes of V_ID into ISAKMP Vendor ID Payload
| V_ID  7d 94 19 a6  53 10 ca 6f  2c 17 9d 92  15 52 9d 56
| emitting length of ISAKMP Vendor ID Payload: 20
| out_vid(): sending [draft-ietf-ipsec-nat-t-ike-02_n]
| ***emit ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
| emitting 16 raw bytes of V_ID into ISAKMP Vendor ID Payload
| V_ID  90 cb 80 91  3e bb 69 6e  08 63 81 b5  ec 42 7b 1f
| emitting length of ISAKMP Vendor ID Payload: 20
| out_vid(): sending [draft-ietf-ipsec-nat-t-ike-02]
| ***emit ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
| emitting 16 raw bytes of V_ID into ISAKMP Vendor ID Payload
| V_ID  cd 60 46 43  35 df 21 f8  7c fd b2 fc  68 b6 a4 48
| emitting length of ISAKMP Vendor ID Payload: 20
| no IKEv1 message padding required
| emitting length of ISAKMP Message: 792
| sending 792 bytes for reply packet for main_outI1 through eth1:500 to 192.1.2.23:500 (using #1)
|   16 be dc ea  e2 2b 8c 83  00 00 00 00  00 00 00 00
|   01 10 02 00  00 00 00 00  00 00 03 18  0d 00 02 84
|   00 00 00 01  00 00 00 01  00 00 02 78  00 01 00 12
|   03 00 00 24  00 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 0e
|   80 0e 01 00  03 00 00 24  01 01 00 00  80 0b 00 01
|   80 0c 0e 10  80 01 00 07  80 02 00 02  80 03 00 03
|   80 04 00 0e  80 0e 00 80  03 00 00 24  02 01 00 00
|   80 0b 00 01  80 0c 0e 10  80 01 00 07  80 02 00 01
|   80 03 00 03  80 04 00 0e  80 0e 01 00  03 00 00 24
|   03 01 00 00  80 0b 00 01  80 0c 0e 10  80 01 00 07
|   80 02 00 01  80 03 00 03  80 04 00 0e  80 0e 00 80
|   03 00 00 20  04 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 05  80 02 00 02  80 03 00 03  80 04 00 0e
|   03 00 00 20  05 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 05  80 02 00 01  80 03 00 03  80 04 00 0e
|   03 00 00 24  06 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 05
|   80 0e 01 00  03 00 00 24  07 01 00 00  80 0b 00 01
|   80 0c 0e 10  80 01 00 07  80 02 00 02  80 03 00 03
|   80 04 00 05  80 0e 00 80  03 00 00 24  08 01 00 00
|   80 0b 00 01  80 0c 0e 10  80 01 00 07  80 02 00 01
|   80 03 00 03  80 04 00 05  80 0e 01 00  03 00 00 24
|   09 01 00 00  80 0b 00 01  80 0c 0e 10  80 01 00 07
|   80 02 00 01  80 03 00 03  80 04 00 05  80 0e 00 80
|   03 00 00 20  0a 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 05  80 02 00 02  80 03 00 03  80 04 00 05
|   03 00 00 20  0b 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 05  80 02 00 01  80 03 00 03  80 04 00 05
|   03 00 00 20  0c 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 05  80 02 00 02  80 03 00 03  80 04 00 02
|   03 00 00 20  0d 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 05  80 02 00 01  80 03 00 03  80 04 00 02
|   03 00 00 24  0e 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 02
|   80 0e 01 00  03 00 00 24  0f 01 00 00  80 0b 00 01
|   80 0c 0e 10  80 01 00 07  80 02 00 02  80 03 00 03
|   80 04 00 02  80 0e 00 80  03 00 00 24  10 01 00 00
|   80 0b 00 01  80 0c 0e 10  80 01 00 07  80 02 00 01
|   80 03 00 03  80 04 00 02  80 0e 01 00  00 00 00 24
|   11 01 00 00  80 0b 00 01  80 0c 0e 10  80 01 00 07
|   80 02 00 01  80 03 00 03  80 04 00 02  80 0e 00 80
|   0d 00 00 14  af ca d7 13  68 a1 f1 c9  6b 86 96 fc
|   77 57 01 00  0d 00 00 14  40 48 b7 d5  6e bc e8 85
|   25 e7 de 7f  00 d6 c2 d3  0d 00 00 14  4a 13 1c 81
|   07 03 58 45  5c 57 28 f2  0e 95 45 2f  0d 00 00 14
|   7d 94 19 a6  53 10 ca 6f  2c 17 9d 92  15 52 9d 56
|   0d 00 00 14  90 cb 80 91  3e bb 69 6e  08 63 81 b5
|   ec 42 7b 1f  00 00 00 14  cd 60 46 43  35 df 21 f8
|   7c fd b2 fc  68 b6 a4 48
| state: #1 requesting EVENT_SO_DISCARD to be deleted
| event_schedule_ms called for about 500 ms
| event_schedule_tv called for about 0 seconds and change
| inserting event EVENT_v1_RETRANSMIT, timeout in 0.500000 seconds for #1
| *received 144 bytes from 192.1.2.23:500 on eth1 (port=500)
|   16 be dc ea  e2 2b 8c 83  f7 5c b7 35  07 e0 34 03
|   01 10 02 00  00 00 00 00  00 00 00 90  0d 00 00 38
|   00 00 00 01  00 00 00 01  00 00 00 2c  00 01 00 01
|   00 00 00 24  00 01 00 00  80 0b 00 01  80 0c 0e 10
|   80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 0e
|   80 0e 01 00  0d 00 00 14  af ca d7 13  68 a1 f1 c9
|   6b 86 96 fc  77 57 01 00  0d 00 00 14  40 48 b7 d5
|   6e bc e8 85  25 e7 de 7f  00 d6 c2 d3  00 00 00 14
|   4a 13 1c 81  07 03 58 45  5c 57 28 f2  0e 95 45 2f
| **parse ISAKMP Message:
|    initiator cookie:
|   16 be dc ea  e2 2b 8c 83
|    responder cookie:
|   f7 5c b7 35  07 e0 34 03
|    next payload type: ISAKMP_NEXT_SA (0x1)
|    ISAKMP version: ISAKMP Version 1.0 (rfc2407) (0x10)
|    exchange type: ISAKMP_XCHG_IDPROT (0x2)
|    flags: none (0x0)
|    message ID:  00 00 00 00
|    length: 144 (0x90)
|  processing version=1.0 packet with exchange type=ISAKMP_XCHG_IDPROT (2)
| finding hash chain in state hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  f7 5c b7 35  07 e0 34 03
| found hash chain 9
| v1 state object not found
| finding hash chain in state hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 6
| v1 peer and cookies match on #1, provided msgid 00000000 == 00000000
| v1 state object #1 found, in STATE_MAIN_I1
| processing connection "north-east-port3"
| #1 state_busy:2286 st != NULL && st->st_calculating == FALSE;
| got payload 0x2  (ISAKMP_NEXT_SA) needed: 0x2opt: 0x2080
| ***parse ISAKMP Security Association Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
|    length: 56 (0x38)
|    DOI: ISAKMP_DOI_IPSEC (0x1)
| got payload 0x2000  (ISAKMP_NEXT_VID) needed: 0x0opt: 0x2080
| ***parse ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
|    length: 20 (0x14)
| got payload 0x2000  (ISAKMP_NEXT_VID) needed: 0x0opt: 0x2080
| ***parse ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
|    length: 20 (0x14)
| got payload 0x2000  (ISAKMP_NEXT_VID) needed: 0x0opt: 0x2080
| ***parse ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    length: 20 (0x14)
| received Vendor ID payload [Dead Peer Detection]
| received Vendor ID payload [FRAGMENTATION]
|  quirks.qnat_traversal_vid set to=89 
| received Vendor ID payload [RFC 3947]
| ****parse IPsec DOI SIT:
|    IPsec DOI SIT: SIT_IDENTITY_ONLY (0x1)
| ****parse ISAKMP Proposal Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    length: 44 (0x2c)
|    proposal number: 0 (0x0)
|    protocol ID: PROTO_ISAKMP (0x1)
|    SPI size: 0 (0x0)
|    number of transforms: 1 (0x1)
| *****parse ISAKMP Transform Payload (ISAKMP):
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    length: 36 (0x24)
|    ISAKMP transform number: 0 (0x0)
|    ISAKMP transform ID: KEY_IKE (0x1)
| ******parse ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_TYPE (0x800b)
|    length/value: 1 (0x1)
|    [1 is OAKLEY_LIFE_SECONDS]
| ******parse ISAKMP Oakley attribute:
|    af+type: OAKLEY_LIFE_DURATION (0x800c)
|    length/value: 3600 (0xe10)
| ******parse ISAKMP Oakley attribute:
|    af+type: OAKLEY_ENCRYPTION_ALGORITHM (0x8001)
|    length/value: 7 (0x7)
|    [7 is OAKLEY_AES_CBC]
| ike_alg_enc_ok(ealg=7,key_len=0): blocksize=16, keyminlen=128, keydeflen=128, keymaxlen=256, ret=1
| ******parse ISAKMP Oakley attribute:
|    af+type: OAKLEY_HASH_ALGORITHM (0x8002)
|    length/value: 2 (0x2)
|    [2 is OAKLEY_SHA1]
| ******parse ISAKMP Oakley attribute:
|    af+type: OAKLEY_AUTHENTICATION_METHOD (0x8003)
|    length/value: 3 (0x3)
|    [3 is OAKLEY_RSA_SIG]
| ******parse ISAKMP Oakley attribute:
|    af+type: OAKLEY_GROUP_DESCRIPTION (0x8004)
|    length/value: 14 (0xe)
|    [14 is OAKLEY_GROUP_MODP2048]
| ******parse ISAKMP Oakley attribute:
|    af+type: OAKLEY_KEY_LENGTH (0x800e)
|    length/value: 256 (0x100)
| ike_alg_enc_ok(ealg=7,key_len=256): blocksize=16, keyminlen=128, keydeflen=128, keymaxlen=256, ret=1
| Oakley Transform 0 accepted
| sender checking NAT-T: enabled and 89
| returning NAT-T method NAT_TRAVERSAL_METHOD_IETF_RFC
| enabling possible NAT-traversal with method RFC 3947 (NAT-Traversal)
| crypto helper 0: pcw_work: 0
| asking crypto helper 0 to do build KE and nonce; request ID 1 (len=2776, pcw_work=0)
| crypto helper 0 read fd: 12
| crypto helper 0 doing build KE and nonce; request ID 1
| NSS: Value of Prime:
|   ff ff ff ff  ff ff ff ff  c9 0f da a2  21 68 c2 34
|   c4 c6 62 8b  80 dc 1c d1  29 02 4e 08  8a 67 cc 74
|   02 0b be a6  3b 13 9b 22  51 4a 08 79  8e 34 04 dd
|   ef 95 19 b3  cd 3a 43 1b  30 2b 0a 6d  f2 5f 14 37
|   4f e1 35 6d  6d 51 c2 45  e4 85 b5 76  62 5e 7e c6
|   f4 4c 42 e9  a6 37 ed 6b  0b ff 5c b6  f4 06 b7 ed
|   ee 38 6b fb  5a 89 9f a5  ae 9f 24 11  7c 4b 1f e6
|   49 28 66 51  ec e4 5b 3d  c2 00 7c b8  a1 63 bf 05
|   98 da 48 36  1c 55 d3 9a  69 16 3f a8  fd 24 cf 5f
|   83 65 5d 23  dc a3 ad 96  1c 62 f3 56  20 85 52 bb
|   9e d5 29 07  70 96 96 6d  67 0c 35 4e  4a bc 98 04
|   f1 74 6c 08  ca 18 21 7c  32 90 5e 46  2e 36 ce 3b
|   e3 9e 77 2c  18 0e 86 03  9b 27 83 a2  ec 07 a2 8f
|   b5 c5 5d f0  6f 4c 52 c9  de 2b cb f6  95 58 17 18
|   39 95 49 7c  ea 95 6a e5  15 d2 26 18  98 fa 05 10
|   15 72 8e 5a  8a ac aa 68  ff ff ff ff  ff ff ff ff
| NSS: Value of base:  02
| NSS: generated dh priv and pub keys: 256
| NSS: Local DH secret (pointer): 0x7fd420003370
| NSS: Public DH value sent(computed in NSS):
|   ae 31 4d 71  cb 50 d0 57  3d 4e b5 14  75 84 9d 8b
|   39 6b 76 ef  f8 11 1e 9b  dd e5 dd d8  82 9f 89 5a
|   8e 32 81 ab  2c 8b 9d 07  cd 57 d4 20  8f d9 41 b8
|   27 ef 82 a6  85 21 40 fa  a0 72 1a a5  30 ad 08 33
|   58 30 f1 b5  8b 5a f5 95  3b 63 ae 37  33 84 35 7f
|   20 f4 cc 5b  7f a6 04 43  92 5a 98 ca  30 ed 1d 46
|   6b 5c 4b 6f  03 2e 97 8e  5a 2c 81 a0  a4 35 fe 86
|   c1 b4 4d 1a  7f 8b 63 63  f2 7d fd 52  72 96 a3 d9
|   a1 60 cc 8b  e3 18 ef 3a  c3 ec 63 47  88 54 70 89
|   82 3f 16 65  90 db a3 75  71 0b c5 5f  b3 13 34 56
|   4f 0a 3e a2  58 cd 96 53  bb 7c 25 8f  03 b9 92 c2
|   e0 ce fa b3  a4 17 07 a8  03 b3 62 48  dd a5 95 89
|   30 89 1f aa  9d e5 26 b7  46 a2 3d 8a  87 44 bb 43
|   cc b7 fa a1  47 31 84 14  7b 1d af 93  62 e8 44 5a
|   49 d4 be 75  b7 dc ee 00  26 b0 40 d6  02 69 5c 1f
|   3c ac fd 10  5d d5 52 43  1b ae de e7  ea e8 c1 2a
| NSS: Local DH public value (pointer): 0x7fd420002b60
| Generated nonce:  9f cc 33 8b  6b 57 90 94  fc 3a ce 30  9c e2 fc 0f
| Generated nonce:  e7 98 ac 87  cd 85 bb 60  c9 b3 90 cf  c7 62 53 f8
| crypto helper 0 finished build KE and nonce; request ID 1 time elapsed 3196 usec
| #1 send_crypto_helper_request:613 st->st_calculating = TRUE;
| state: #1 requesting EVENT_v1_RETRANSMIT to be deleted
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_CRYPTO_FAILED, timeout in 60.000000 seconds for #1
| complete v1 state transition with STF_SUSPEND
| crypto helper 0 has finished work (pcw_work now 1)
| crypto helper 0 replies to request ID 1
| calling continuation function 0x7fd42f8bb410
| main_inR1_outI2_continue for #1: calculated ke+nonce, sending I2
| processing connection "north-east-port3"
| #1 main_inR1_outI2_continue:949 st->st_calculating = FALSE;
| **emit ISAKMP Message:
|    initiator cookie:
|   16 be dc ea  e2 2b 8c 83
|    responder cookie:
|   f7 5c b7 35  07 e0 34 03
|    next payload type: ISAKMP_NEXT_KE (0x4)
|    ISAKMP version: ISAKMP Version 1.0 (rfc2407) (0x10)
|    exchange type: ISAKMP_XCHG_IDPROT (0x2)
|    flags: none (0x0)
|    message ID:  00 00 00 00
| saving DH priv (local secret) and pub key into state struct
| ***emit ISAKMP Key Exchange Payload:
|    next payload type: ISAKMP_NEXT_NONCE (0xa)
| emitting 256 raw bytes of keyex value into ISAKMP Key Exchange Payload
| keyex value  ae 31 4d 71  cb 50 d0 57  3d 4e b5 14  75 84 9d 8b
| keyex value  39 6b 76 ef  f8 11 1e 9b  dd e5 dd d8  82 9f 89 5a
| keyex value  8e 32 81 ab  2c 8b 9d 07  cd 57 d4 20  8f d9 41 b8
| keyex value  27 ef 82 a6  85 21 40 fa  a0 72 1a a5  30 ad 08 33
| keyex value  58 30 f1 b5  8b 5a f5 95  3b 63 ae 37  33 84 35 7f
| keyex value  20 f4 cc 5b  7f a6 04 43  92 5a 98 ca  30 ed 1d 46
| keyex value  6b 5c 4b 6f  03 2e 97 8e  5a 2c 81 a0  a4 35 fe 86
| keyex value  c1 b4 4d 1a  7f 8b 63 63  f2 7d fd 52  72 96 a3 d9
| keyex value  a1 60 cc 8b  e3 18 ef 3a  c3 ec 63 47  88 54 70 89
| keyex value  82 3f 16 65  90 db a3 75  71 0b c5 5f  b3 13 34 56
| keyex value  4f 0a 3e a2  58 cd 96 53  bb 7c 25 8f  03 b9 92 c2
| keyex value  e0 ce fa b3  a4 17 07 a8  03 b3 62 48  dd a5 95 89
| keyex value  30 89 1f aa  9d e5 26 b7  46 a2 3d 8a  87 44 bb 43
| keyex value  cc b7 fa a1  47 31 84 14  7b 1d af 93  62 e8 44 5a
| keyex value  49 d4 be 75  b7 dc ee 00  26 b0 40 d6  02 69 5c 1f
| keyex value  3c ac fd 10  5d d5 52 43  1b ae de e7  ea e8 c1 2a
| emitting length of ISAKMP Key Exchange Payload: 260
| ***emit ISAKMP Nonce Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
| emitting 32 raw bytes of Ni into ISAKMP Nonce Payload
| Ni  9f cc 33 8b  6b 57 90 94  fc 3a ce 30  9c e2 fc 0f
| Ni  e7 98 ac 87  cd 85 bb 60  c9 b3 90 cf  c7 62 53 f8
| emitting length of ISAKMP Nonce Payload: 36
| NAT-T checking st_nat_traversal
| NAT-T found (implies NAT_T_WITH_NATD)
| sending NAT-D payloads
| natd_hash: hasher=0x7fd42fb911c0(20)
| natd_hash: icookie=  16 be dc ea  e2 2b 8c 83
| natd_hash: rcookie=  f7 5c b7 35  07 e0 34 03
| natd_hash: ip=  c0 01 02 17
| natd_hash: port=500
| natd_hash: hash=  61 08 9a 14  b2 ff 6c 2f  1c 86 95 82  2f bc 56 0b
| natd_hash: hash=  b6 21 6a a4
| ***emit ISAKMP NAT-D Payload:
|    next payload type: ISAKMP_NEXT_NATD_RFC (0x14)
| emitting 20 raw bytes of NAT-D into ISAKMP NAT-D Payload
| NAT-D  61 08 9a 14  b2 ff 6c 2f  1c 86 95 82  2f bc 56 0b
| NAT-D  b6 21 6a a4
| emitting length of ISAKMP NAT-D Payload: 24
| natd_hash: hasher=0x7fd42fb911c0(20)
| natd_hash: icookie=  16 be dc ea  e2 2b 8c 83
| natd_hash: rcookie=  f7 5c b7 35  07 e0 34 03
| natd_hash: ip=  c0 01 03 21
| natd_hash: port=500
| natd_hash: hash=  3f cf a6 57  bf 8b 6a ac  c0 ba 9a 98  e6 4a 12 ab
| natd_hash: hash=  ab 58 fe 89
| ***emit ISAKMP NAT-D Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
| emitting 20 raw bytes of NAT-D into ISAKMP NAT-D Payload
| NAT-D  3f cf a6 57  bf 8b 6a ac  c0 ba 9a 98  e6 4a 12 ab
| NAT-D  ab 58 fe 89
| emitting length of ISAKMP NAT-D Payload: 24
| no IKEv1 message padding required
| emitting length of ISAKMP Message: 372
| rehashing state object #1
| removing state 0x7fd430c017e0 entry 0x7fd430c01e58 next (nil) prev-next 0x7fd42fb913b8 from list
| updated next entry is (nil)
| finding hash chain in state hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  f7 5c b7 35  07 e0 34 03
| found hash chain 9
| list 0x7fd42fb913d0 first entry (nil)
| inserted state 0x7fd430c017e0 entry 0x7fd430c01e58 next (nil) prev-next 0x7fd42fb913d0 into list
| updated next entry is (nil)
| complete v1 state transition with STF_OK
"north-east-port3" #1: transition from state STATE_MAIN_I1 to state STATE_MAIN_I2
| peer supports fragmentation
| peer supports dpd
| parent state #1: STATE_MAIN_I1(half-open-ike) > STATE_MAIN_I2(open-ike)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 1
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| state: #1 requesting EVENT_CRYPTO_FAILED to be deleted
| sending reply packet to 192.1.2.23:500 (from port 500)
| sending 372 bytes for STATE_MAIN_I1 through eth1:500 to 192.1.2.23:500 (using #1)
|   16 be dc ea  e2 2b 8c 83  f7 5c b7 35  07 e0 34 03
|   04 10 02 00  00 00 00 00  00 00 01 74  0a 00 01 04
|   ae 31 4d 71  cb 50 d0 57  3d 4e b5 14  75 84 9d 8b
|   39 6b 76 ef  f8 11 1e 9b  dd e5 dd d8  82 9f 89 5a
|   8e 32 81 ab  2c 8b 9d 07  cd 57 d4 20  8f d9 41 b8
|   27 ef 82 a6  85 21 40 fa  a0 72 1a a5  30 ad 08 33
|   58 30 f1 b5  8b 5a f5 95  3b 63 ae 37  33 84 35 7f
|   20 f4 cc 5b  7f a6 04 43  92 5a 98 ca  30 ed 1d 46
|   6b 5c 4b 6f  03 2e 97 8e  5a 2c 81 a0  a4 35 fe 86
|   c1 b4 4d 1a  7f 8b 63 63  f2 7d fd 52  72 96 a3 d9
|   a1 60 cc 8b  e3 18 ef 3a  c3 ec 63 47  88 54 70 89
|   82 3f 16 65  90 db a3 75  71 0b c5 5f  b3 13 34 56
|   4f 0a 3e a2  58 cd 96 53  bb 7c 25 8f  03 b9 92 c2
|   e0 ce fa b3  a4 17 07 a8  03 b3 62 48  dd a5 95 89
|   30 89 1f aa  9d e5 26 b7  46 a2 3d 8a  87 44 bb 43
|   cc b7 fa a1  47 31 84 14  7b 1d af 93  62 e8 44 5a
|   49 d4 be 75  b7 dc ee 00  26 b0 40 d6  02 69 5c 1f
|   3c ac fd 10  5d d5 52 43  1b ae de e7  ea e8 c1 2a
|   14 00 00 24  9f cc 33 8b  6b 57 90 94  fc 3a ce 30
|   9c e2 fc 0f  e7 98 ac 87  cd 85 bb 60  c9 b3 90 cf
|   c7 62 53 f8  14 00 00 18  61 08 9a 14  b2 ff 6c 2f
|   1c 86 95 82  2f bc 56 0b  b6 21 6a a4  00 00 00 18
|   3f cf a6 57  bf 8b 6a ac  c0 ba 9a 98  e6 4a 12 ab
|   ab 58 fe 89
| event_schedule_ms called for about 500 ms
| event_schedule_tv called for about 0 seconds and change
| inserting event EVENT_v1_RETRANSMIT, timeout in 0.500000 seconds for #1
"north-east-port3" #1: STATE_MAIN_I2: sent MI2, expecting MR2
| modecfg pull: noquirk policy:push not-client
| phase 1 is done, looking for phase 2 to unpend
| *received 372 bytes from 192.1.2.23:500 on eth1 (port=500)
|   16 be dc ea  e2 2b 8c 83  f7 5c b7 35  07 e0 34 03
|   04 10 02 00  00 00 00 00  00 00 01 74  0a 00 01 04
|   cd dc b6 06  32 60 55 a1  74 78 29 37  8b aa 72 35
|   f3 0c 3e e8  a4 1e dc 2c  53 3c 47 5e  89 a2 64 08
|   b9 cc d6 77  8e 0e be d4  37 8e d6 d9  10 a3 bf 30
|   dc 4c bb ad  8d 39 73 ee  ea 23 21 7d  b1 bc 29 0e
|   50 1a b6 2f  92 09 e9 96  68 0f b4 ba  af 66 49 2e
|   16 f3 77 86  69 6d 69 b8  4c e7 4d 2e  a7 21 78 c6
|   c5 0e 3b 08  a7 23 a8 5c  d8 88 c2 8a  c6 56 7f b7
|   24 b3 45 22  06 82 a1 69  08 3a 8c 46  d2 a0 4e 50
|   7a 0e 40 42  af 35 43 7d  57 f1 f7 78  69 f3 cd 35
|   72 62 9d 2b  67 c0 11 ad  db 8e 89 6c  62 a7 8e d4
|   13 10 8b 5a  1b 2f cf a6  5d c0 94 6f  93 dc 11 1f
|   87 1f 1b 88  16 68 30 9f  1c 9a 94 07  b8 cb fe 74
|   2e 79 3f 69  a1 26 c6 f2  b3 9f e7 b3  01 cb 9c b8
|   b1 68 30 6d  17 b9 2d 03  39 40 23 57  76 8c 74 36
|   3b b2 ae 0c  60 15 83 be  8e 95 69 90  b4 36 aa 12
|   41 1b 95 ab  30 2f 7e f8  f3 23 6b 25  70 bf 0b 31
|   14 00 00 24  f5 00 7a fb  00 5a 87 11  4e a5 32 2c
|   d4 9b b7 65  bb b4 88 13  c1 d2 f3 b1  16 e9 3c 37
|   f0 a6 4a 3a  14 00 00 18  23 86 1f 59  3e 72 b8 f4
|   a3 6f c2 00  c5 a3 d2 8b  d3 1d ed 30  00 00 00 18
|   61 08 9a 14  b2 ff 6c 2f  1c 86 95 82  2f bc 56 0b
|   b6 21 6a a4
| **parse ISAKMP Message:
|    initiator cookie:
|   16 be dc ea  e2 2b 8c 83
|    responder cookie:
|   f7 5c b7 35  07 e0 34 03
|    next payload type: ISAKMP_NEXT_KE (0x4)
|    ISAKMP version: ISAKMP Version 1.0 (rfc2407) (0x10)
|    exchange type: ISAKMP_XCHG_IDPROT (0x2)
|    flags: none (0x0)
|    message ID:  00 00 00 00
|    length: 372 (0x174)
|  processing version=1.0 packet with exchange type=ISAKMP_XCHG_IDPROT (2)
| finding hash chain in state hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  f7 5c b7 35  07 e0 34 03
| found hash chain 9
| v1 peer and cookies match on #1, provided msgid 00000000 == 00000000
| v1 state object #1 found, in STATE_MAIN_I2
| processing connection "north-east-port3"
| #1 state_busy:2286 st != NULL && st->st_calculating == FALSE;
| got payload 0x10  (ISAKMP_NEXT_KE) needed: 0x410opt: 0x102080
| ***parse ISAKMP Key Exchange Payload:
|    next payload type: ISAKMP_NEXT_NONCE (0xa)
|    length: 260 (0x104)
| got payload 0x400  (ISAKMP_NEXT_NONCE) needed: 0x400opt: 0x102080
| ***parse ISAKMP Nonce Payload:
|    next payload type: ISAKMP_NEXT_NATD_RFC (0x14)
|    length: 36 (0x24)
| got payload 0x100000  (ISAKMP_NEXT_NATD_RFC) needed: 0x0opt: 0x102080
| ***parse ISAKMP NAT-D Payload:
|    next payload type: ISAKMP_NEXT_NATD_RFC (0x14)
|    length: 24 (0x18)
| got payload 0x100000  (ISAKMP_NEXT_NATD_RFC) needed: 0x0opt: 0x102080
| ***parse ISAKMP NAT-D Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    length: 24 (0x18)
| **emit ISAKMP Message:
|    initiator cookie:
|   16 be dc ea  e2 2b 8c 83
|    responder cookie:
|   f7 5c b7 35  07 e0 34 03
|    next payload type: ISAKMP_NEXT_ID (0x5)
|    ISAKMP version: ISAKMP Version 1.0 (rfc2407) (0x10)
|    exchange type: ISAKMP_XCHG_IDPROT (0x2)
|    flags: ISAKMP_FLAG_v1_ENCRYPTION (0x1)
|    message ID:  00 00 00 00
| DH public value received:
|   cd dc b6 06  32 60 55 a1  74 78 29 37  8b aa 72 35
|   f3 0c 3e e8  a4 1e dc 2c  53 3c 47 5e  89 a2 64 08
|   b9 cc d6 77  8e 0e be d4  37 8e d6 d9  10 a3 bf 30
|   dc 4c bb ad  8d 39 73 ee  ea 23 21 7d  b1 bc 29 0e
|   50 1a b6 2f  92 09 e9 96  68 0f b4 ba  af 66 49 2e
|   16 f3 77 86  69 6d 69 b8  4c e7 4d 2e  a7 21 78 c6
|   c5 0e 3b 08  a7 23 a8 5c  d8 88 c2 8a  c6 56 7f b7
|   24 b3 45 22  06 82 a1 69  08 3a 8c 46  d2 a0 4e 50
|   7a 0e 40 42  af 35 43 7d  57 f1 f7 78  69 f3 cd 35
|   72 62 9d 2b  67 c0 11 ad  db 8e 89 6c  62 a7 8e d4
|   13 10 8b 5a  1b 2f cf a6  5d c0 94 6f  93 dc 11 1f
|   87 1f 1b 88  16 68 30 9f  1c 9a 94 07  b8 cb fe 74
|   2e 79 3f 69  a1 26 c6 f2  b3 9f e7 b3  01 cb 9c b8
|   b1 68 30 6d  17 b9 2d 03  39 40 23 57  76 8c 74 36
|   3b b2 ae 0c  60 15 83 be  8e 95 69 90  b4 36 aa 12
|   41 1b 95 ab  30 2f 7e f8  f3 23 6b 25  70 bf 0b 31
| started looking for secret for @north->@east of kind PPK_PSK
| actually looking for secret for @north->@east of kind PPK_PSK
| line 1: key type PPK_PSK(@north) to type PPK_RSA
| concluding with best_match=0 best=(nil) (lineno=-1)
| parent1 type: 2 group: 14 len: 2776
| Copying DH pub key pointer to be sent to a thread helper
| crypto helper 0: pcw_work: 0
| asking crypto helper 0 to do compute dh+iv (V1 Phase 1); request ID 2 (len=2776, pcw_work=0)
| crypto helper 0 read fd: 12
| crypto helper 0 doing compute dh+iv (V1 Phase 1); request ID 2
| peer's g:   cd dc b6 06  32 60 55 a1  74 78 29 37  8b aa 72 35
| peer's g:   f3 0c 3e e8  a4 1e dc 2c  53 3c 47 5e  89 a2 64 08
| peer's g:   b9 cc d6 77  8e 0e be d4  37 8e d6 d9  10 a3 bf 30
| peer's g:   dc 4c bb ad  8d 39 73 ee  ea 23 21 7d  b1 bc 29 0e
| peer's g:   50 1a b6 2f  92 09 e9 96  68 0f b4 ba  af 66 49 2e
| peer's g:   16 f3 77 86  69 6d 69 b8  4c e7 4d 2e  a7 21 78 c6
| peer's g:   c5 0e 3b 08  a7 23 a8 5c  d8 88 c2 8a  c6 56 7f b7
| peer's g:   24 b3 45 22  06 82 a1 69  08 3a 8c 46  d2 a0 4e 50
| peer's g:   7a 0e 40 42  af 35 43 7d  57 f1 f7 78  69 f3 cd 35
| peer's g:   72 62 9d 2b  67 c0 11 ad  db 8e 89 6c  62 a7 8e d4
| peer's g:   13 10 8b 5a  1b 2f cf a6  5d c0 94 6f  93 dc 11 1f
| peer's g:   87 1f 1b 88  16 68 30 9f  1c 9a 94 07  b8 cb fe 74
| peer's g:   2e 79 3f 69  a1 26 c6 f2  b3 9f e7 b3  01 cb 9c b8
| peer's g:   b1 68 30 6d  17 b9 2d 03  39 40 23 57  76 8c 74 36
| peer's g:   3b b2 ae 0c  60 15 83 be  8e 95 69 90  b4 36 aa 12
| peer's g:   41 1b 95 ab  30 2f 7e f8  f3 23 6b 25  70 bf 0b 31
| Started DH shared-secret computation in NSS:
| SKEYID sig prf: init 0x7fd420001850
| SKEYID sig prf: init chunk Ni 0x7fd427ee9700 (length 32)
| symkey_from_bytes merge symkey(0x7fd430bf1750) bytes(0x7fd427ee9700/32) - derive(CONCATENATE_DATA_AND_BASE) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf1750) length(256) type/mechanism(CONCATENATE_DATA_AND_BASE 0x00000363)
| bytes:  9f cc 33 8b  6b 57 90 94  fc 3a ce 30  9c e2 fc 0f
| bytes:  e7 98 ac 87  cd 85 bb 60  c9 b3 90 cf  c7 62 53 f8
| symkey_from_bytes key(0x7fd430bf2fd0) length(288) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| key: symkey from symkey(0x7fd430bf2fd0) - next-byte(0) key-size(32) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd430bf2fd0) length(288) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| key: key(0x7fd420007160) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| symkey_from_bytes: free key 0x7fd430bf2fd0
| SKEYID sig prf: init chunk Nr 0x7fd427ee9720 (length 32)
| concat_symkey_bytes merge symkey(0x7fd420007160) bytes(0x7fd427ee9720/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(32) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| bytes:  f5 00 7a fb  00 5a 87 11  4e a5 32 2c  d4 9b b7 65
| bytes:  bb b4 88 13  c1 d2 f3 b1  16 e9 3c 37  f0 a6 4a 3a
| concat_symkey_bytes key(0x7fd430bf2fd0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| update_key: free key 0x7fd420007160
| SKEYID sig prf: update
| xor_symkey_chunk merge symkey(0x7fd430bf2fd0) bytes(0x7fd427ee9550/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd430bf2fd0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| SKEYID sig prf: update symkey g^xy 0x7fd430bf1750 (length 256)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd430bf1750) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd430bf1750) length(256) type/mechanism(CONCATENATE_DATA_AND_BASE 0x00000363)
| concat: key(0x7fd420006fa0) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| SKEYID sig prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420006fa0) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420006fa0) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420007160) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420006fa0
| xor_symkey_chunk merge symkey(0x7fd430bf2fd0) bytes(0x7fd427ee9580/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd430bf2fd0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420006fa0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420006fa0) symkey(2: 0x7fd420007160) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420006fa0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420007160) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd42000a130) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420006fa0
| prf hashed inner:: free key 0x7fd420007160
| prf key: free key 0x7fd430bf2fd0
| prf outer hash hash(oakley_sha) symkey(0x7fd42000a130) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000a130) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash key(0x7fd430bf2fd0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf outer: free key 0x7fd42000a130
| prf final result key(0x7fd430bf2fd0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| SKEYID_d prf: init 0x7fd420001850
| SKEYID_d prf: init symkey SKEYID 0x7fd430bf2fd0 (length 20)
| SKEYID_d prf: update
| concat_symkey_bytes merge symkey(0x7fd430bf2fd0) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430bf2fd0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd42000a130) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd42000a130) bytes(0x7fd427ee9530/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000a130) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| SKEYID_d prf: update symkey g^xy 0x7fd430bf1750 (length 256)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd430bf1750) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd430bf1750) length(256) type/mechanism(CONCATENATE_DATA_AND_BASE 0x00000363)
| concat: key(0x7fd420006fa0) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| SKEYID_d prf: update chunk CKI_i 0x7fd427ee9940 (length 8)
| concat_symkey_bytes merge symkey(0x7fd420006fa0) bytes(0x7fd427ee9940/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420006fa0) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  16 be dc ea  e2 2b 8c 83
| concat_symkey_bytes key(0x7fd420007160) length(328) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420006fa0
| SKEYID_d prf: update chunk CKI_r 0x7fd427ee9948 (length 8)
| concat_symkey_bytes merge symkey(0x7fd420007160) bytes(0x7fd427ee9948/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(328) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  f7 5c b7 35  07 e0 34 03
| concat_symkey_bytes key(0x7fd420006fa0) length(336) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420007160
| SKEYID_d prf: update byte 0
| concat_symkey_bytes merge symkey(0x7fd420006fa0) bytes(0x7fd427ee95cc/1) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420006fa0) length(336) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  00
| concat_symkey_bytes key(0x7fd420007160) length(337) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420006fa0
| SKEYID_d prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420007160) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(337) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420007160
| xor_symkey_chunk merge symkey(0x7fd42000a130) bytes(0x7fd427ee9570/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000a130) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd420006fa0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd42000b9b0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| prf hashed inner:: free key 0x7fd420006fa0
| prf key: free key 0x7fd42000a130
| prf outer hash hash(oakley_sha) symkey(0x7fd42000b9b0) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000b9b0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash key(0x7fd42000a130) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf outer: free key 0x7fd42000b9b0
| prf final result key(0x7fd42000a130) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| SKEYID_a prf: init 0x7fd420001850
| SKEYID_a prf: init symkey SKEYID 0x7fd430bf2fd0 (length 20)
| SKEYID_a prf: update
| concat_symkey_bytes merge symkey(0x7fd430bf2fd0) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430bf2fd0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd42000b9b0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd42000b9b0) bytes(0x7fd427ee9530/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000b9b0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420006fa0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| SKEYID_a prf: update symkey SKEYID_d 0x7fd42000a130 (length 20)
| concat: merge symkey(1: 0x7fd420006fa0) symkey(2: 0x7fd42000a130) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420006fa0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd42000a130) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420007160) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420006fa0
| SKEYID_a prf: update symkey g^xy 0x7fd430bf1750 (length 256)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd430bf1750) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| symkey 2: key(0x7fd430bf1750) length(256) type/mechanism(CONCATENATE_DATA_AND_BASE 0x00000363)
| concat: key(0x7fd420006fa0) length(340) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| SKEYID_a prf: update chunk CKI_i 0x7fd427ee9940 (length 8)
| concat_symkey_bytes merge symkey(0x7fd420006fa0) bytes(0x7fd427ee9940/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420006fa0) length(340) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  16 be dc ea  e2 2b 8c 83
| concat_symkey_bytes key(0x7fd420007160) length(348) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420006fa0
| SKEYID_a prf: update chunk CKI_r 0x7fd427ee9948 (length 8)
| concat_symkey_bytes merge symkey(0x7fd420007160) bytes(0x7fd427ee9948/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(348) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  f7 5c b7 35  07 e0 34 03
| concat_symkey_bytes key(0x7fd420006fa0) length(356) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420007160
| SKEYID_a prf: update byte 1
| concat_symkey_bytes merge symkey(0x7fd420006fa0) bytes(0x7fd427ee95cc/1) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420006fa0) length(356) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  01
| concat_symkey_bytes key(0x7fd420007160) length(357) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420006fa0
| SKEYID_a prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420007160) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(357) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420007160
| xor_symkey_chunk merge symkey(0x7fd42000b9b0) bytes(0x7fd427ee9570/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000b9b0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd420006fa0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd42000d230) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| prf hashed inner:: free key 0x7fd420006fa0
| prf key: free key 0x7fd42000b9b0
| prf outer hash hash(oakley_sha) symkey(0x7fd42000d230) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000d230) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash key(0x7fd42000b9b0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf outer: free key 0x7fd42000d230
| prf final result key(0x7fd42000b9b0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| SKEYID_e prf: init 0x7fd420001850
| SKEYID_e prf: init symkey SKEYID 0x7fd430bf2fd0 (length 20)
| SKEYID_e prf: update
| concat_symkey_bytes merge symkey(0x7fd430bf2fd0) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430bf2fd0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd42000d230) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd42000d230) bytes(0x7fd427ee9530/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000d230) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420006fa0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| SKEYID_e prf: update symkey SKEYID_a 0x7fd42000b9b0 (length 20)
| concat: merge symkey(1: 0x7fd420006fa0) symkey(2: 0x7fd42000b9b0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420006fa0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd42000b9b0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420007160) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420006fa0
| #1 send_crypto_helper_request:613 st->st_calculating = TRUE;
| state: #1 requesting EVENT_v1_RETRANSMIT to be deleted
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_CRYPTO_FAILED, timeout in 60.000000 seconds for #1
| complete v1 state transition with STF_SUSPEND
| SKEYID_e prf: update symkey g^xy 0x7fd430bf1750 (length 256)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd430bf1750) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| symkey 2: key(0x7fd430bf1750) length(256) type/mechanism(CONCATENATE_DATA_AND_BASE 0x00000363)
| concat: key(0x7fd420006fa0) length(340) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| SKEYID_e prf: update chunk CKI_i 0x7fd427ee9940 (length 8)
| concat_symkey_bytes merge symkey(0x7fd420006fa0) bytes(0x7fd427ee9940/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420006fa0) length(340) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  16 be dc ea  e2 2b 8c 83
| concat_symkey_bytes key(0x7fd420007160) length(348) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420006fa0
| SKEYID_e prf: update chunk CKI_r 0x7fd427ee9948 (length 8)
| concat_symkey_bytes merge symkey(0x7fd420007160) bytes(0x7fd427ee9948/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(348) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  f7 5c b7 35  07 e0 34 03
| concat_symkey_bytes key(0x7fd420006fa0) length(356) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420007160
| SKEYID_e prf: update byte 2
| concat_symkey_bytes merge symkey(0x7fd420006fa0) bytes(0x7fd427ee95cc/1) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420006fa0) length(356) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  02
| concat_symkey_bytes key(0x7fd420007160) length(357) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420006fa0
| SKEYID_e prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420007160) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(357) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420007160
| xor_symkey_chunk merge symkey(0x7fd42000d230) bytes(0x7fd427ee9570/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000d230) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd420006fa0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd42000eab0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| prf hashed inner:: free key 0x7fd420006fa0
| prf key: free key 0x7fd42000d230
| prf outer hash hash(oakley_sha) symkey(0x7fd42000eab0) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash key(0x7fd42000d230) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf outer: free key 0x7fd42000eab0
| prf final result key(0x7fd42000d230) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| appendix_b prf: init 0x7fd420001850
| appendix_b prf: init symkey SKEYID_e 0x7fd42000d230 (length 20)
| appendix_b prf: update
| concat_symkey_bytes merge symkey(0x7fd42000d230) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000d230) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd42000eab0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd42000eab0) bytes(0x7fd427ee95a0/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000eab0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420006fa0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| appendix_b prf: update byte 0
| concat_symkey_bytes merge symkey(0x7fd420006fa0) bytes(0x7fd427ee963c/1) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420006fa0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| bytes:  00
| concat_symkey_bytes key(0x7fd420007160) length(65) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420006fa0
| appendix_b prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420007160) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(65) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420007160
| xor_symkey_chunk merge symkey(0x7fd42000eab0) bytes(0x7fd427ee9580/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000eab0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd420006fa0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420010440) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| prf hashed inner:: free key 0x7fd420006fa0
| prf key: free key 0x7fd42000eab0
| prf outer hash hash(oakley_sha) symkey(0x7fd420010440) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf outer: free key 0x7fd420010440
| prf final result key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| key: symkey from symkey(0x7fd42000eab0) - next-byte(0) key-size(20) flags(0x0) derive(EXTRACT_KEY_FROM_KEY) target(EXTRACT_KEY_FROM_KEY)
| symkey: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| key: key(0x7fd420010440) length(20) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| SKEYID_e prf: init 0x7fd420001850
| SKEYID_e prf: init symkey SKEYID_e 0x7fd42000d230 (length 20)
| SKEYID_e prf: update
| concat_symkey_bytes merge symkey(0x7fd42000d230) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000d230) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd420006fa0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd420006fa0) bytes(0x7fd427ee95a0/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420006fa0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| SKEYID_e prf: update symkey old_k 0x7fd420010440 (length 20)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd420010440) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420010440) length(20) type/mechanism(EXTRACT_KEY_FROM_KEY 0x00000365)
| concat: key(0x7fd420011cd0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| SKEYID_e prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420011cd0) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420011cd0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420007160) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420011cd0
| xor_symkey_chunk merge symkey(0x7fd420006fa0) bytes(0x7fd427ee9580/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420006fa0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420011cd0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420011cd0) symkey(2: 0x7fd420007160) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420011cd0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420007160) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420013560) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420011cd0
| prf hashed inner:: free key 0x7fd420007160
| prf key: free key 0x7fd420006fa0
| prf outer hash hash(oakley_sha) symkey(0x7fd420013560) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf outer: free key 0x7fd420013560
| prf final result key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: merge symkey(1: 0x7fd42000eab0) symkey(2: 0x7fd420006fa0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| symkey 2: key(0x7fd420006fa0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420013560) length(40) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd42000eab0
| old_k#N: free key 0x7fd420010440
| old_k#final: free key 0x7fd420006fa0
| crypt key: symkey from symkey(0x7fd420013560) - next-byte(0) key-size(32) flags(0x300) derive(EXTRACT_KEY_FROM_KEY) target(AES_CBC)
| symkey: key(0x7fd420013560) length(40) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| crypt key: key(0x7fd420006fa0) length(32) type/mechanism(AES_CBC 0x00001082)
| keymat: free key 0x7fd420013560
| NSS: pointers skeyid_d 0x7fd42000a130,  skeyid_a 0x7fd42000b9b0,  skeyid_e 0x7fd42000d230,  enc_key 0x7fd420006fa0
| DH_i:  ae 31 4d 71  cb 50 d0 57  3d 4e b5 14  75 84 9d 8b
| DH_i:  39 6b 76 ef  f8 11 1e 9b  dd e5 dd d8  82 9f 89 5a
| DH_i:  8e 32 81 ab  2c 8b 9d 07  cd 57 d4 20  8f d9 41 b8
| DH_i:  27 ef 82 a6  85 21 40 fa  a0 72 1a a5  30 ad 08 33
| DH_i:  58 30 f1 b5  8b 5a f5 95  3b 63 ae 37  33 84 35 7f
| DH_i:  20 f4 cc 5b  7f a6 04 43  92 5a 98 ca  30 ed 1d 46
| DH_i:  6b 5c 4b 6f  03 2e 97 8e  5a 2c 81 a0  a4 35 fe 86
| DH_i:  c1 b4 4d 1a  7f 8b 63 63  f2 7d fd 52  72 96 a3 d9
| DH_i:  a1 60 cc 8b  e3 18 ef 3a  c3 ec 63 47  88 54 70 89
| DH_i:  82 3f 16 65  90 db a3 75  71 0b c5 5f  b3 13 34 56
| DH_i:  4f 0a 3e a2  58 cd 96 53  bb 7c 25 8f  03 b9 92 c2
| DH_i:  e0 ce fa b3  a4 17 07 a8  03 b3 62 48  dd a5 95 89
| DH_i:  30 89 1f aa  9d e5 26 b7  46 a2 3d 8a  87 44 bb 43
| DH_i:  cc b7 fa a1  47 31 84 14  7b 1d af 93  62 e8 44 5a
| DH_i:  49 d4 be 75  b7 dc ee 00  26 b0 40 d6  02 69 5c 1f
| DH_i:  3c ac fd 10  5d d5 52 43  1b ae de e7  ea e8 c1 2a
| DH_r:  cd dc b6 06  32 60 55 a1  74 78 29 37  8b aa 72 35
| DH_r:  f3 0c 3e e8  a4 1e dc 2c  53 3c 47 5e  89 a2 64 08
| DH_r:  b9 cc d6 77  8e 0e be d4  37 8e d6 d9  10 a3 bf 30
| DH_r:  dc 4c bb ad  8d 39 73 ee  ea 23 21 7d  b1 bc 29 0e
| DH_r:  50 1a b6 2f  92 09 e9 96  68 0f b4 ba  af 66 49 2e
| DH_r:  16 f3 77 86  69 6d 69 b8  4c e7 4d 2e  a7 21 78 c6
| DH_r:  c5 0e 3b 08  a7 23 a8 5c  d8 88 c2 8a  c6 56 7f b7
| DH_r:  24 b3 45 22  06 82 a1 69  08 3a 8c 46  d2 a0 4e 50
| DH_r:  7a 0e 40 42  af 35 43 7d  57 f1 f7 78  69 f3 cd 35
| DH_r:  72 62 9d 2b  67 c0 11 ad  db 8e 89 6c  62 a7 8e d4
| DH_r:  13 10 8b 5a  1b 2f cf a6  5d c0 94 6f  93 dc 11 1f
| DH_r:  87 1f 1b 88  16 68 30 9f  1c 9a 94 07  b8 cb fe 74
| DH_r:  2e 79 3f 69  a1 26 c6 f2  b3 9f e7 b3  01 cb 9c b8
| DH_r:  b1 68 30 6d  17 b9 2d 03  39 40 23 57  76 8c 74 36
| DH_r:  3b b2 ae 0c  60 15 83 be  8e 95 69 90  b4 36 aa 12
| DH_r:  41 1b 95 ab  30 2f 7e f8  f3 23 6b 25  70 bf 0b 31
| end of IV generation
| crypto helper 0 finished compute dh+iv (V1 Phase 1); request ID 2 time elapsed 28131 usec
| crypto helper 0 has finished work (pcw_work now 1)
| crypto helper 0 replies to request ID 2
| calling continuation function 0x7fd42f8ba040
| main_inR2_outI3_cryptotail for #1: calculated DH, sending R1
| processing connection "north-east-port3"
| #1 main_inR2_outI3_cryptotail:1683 st->st_calculating = FALSE;
| thinking about whether to send my certificate:
|   I have RSA key: OAKLEY_RSA_SIG cert.type: 0?? 
|   sendcert: CERT_ALWAYSSEND and I did not get a certificate request 
|   so do not send cert.
| I did not send a certificate because I do not have one.
|  I am not sending a certificate request
| I will NOT send an initial contact payload
| checking NAT-t: enabled and RFC 3947 (NAT-Traversal)
| natd_hash: hasher=0x7fd42fb911c0(20)
| natd_hash: icookie=  16 be dc ea  e2 2b 8c 83
| natd_hash: rcookie=  f7 5c b7 35  07 e0 34 03
| natd_hash: ip=  c0 01 03 21
| natd_hash: port=500
| natd_hash: hash=  3f cf a6 57  bf 8b 6a ac  c0 ba 9a 98  e6 4a 12 ab
| natd_hash: hash=  ab 58 fe 89
| natd_hash: hasher=0x7fd42fb911c0(20)
| natd_hash: icookie=  16 be dc ea  e2 2b 8c 83
| natd_hash: rcookie=  f7 5c b7 35  07 e0 34 03
| natd_hash: ip=  c0 01 02 17
| natd_hash: port=500
| natd_hash: hash=  61 08 9a 14  b2 ff 6c 2f  1c 86 95 82  2f bc 56 0b
| natd_hash: hash=  b6 21 6a a4
| expected NAT-D(me):  3f cf a6 57  bf 8b 6a ac  c0 ba 9a 98  e6 4a 12 ab
| expected NAT-D(me):  ab 58 fe 89
| expected NAT-D(him):
|   61 08 9a 14  b2 ff 6c 2f  1c 86 95 82  2f bc 56 0b
|   b6 21 6a a4
| received NAT-D:  23 86 1f 59  3e 72 b8 f4  a3 6f c2 00  c5 a3 d2 8b
| received NAT-D:  d3 1d ed 30
| received NAT-D:  61 08 9a 14  b2 ff 6c 2f  1c 86 95 82  2f bc 56 0b
| received NAT-D:  b6 21 6a a4
| NAT_TRAVERSAL this end is behind NAT
| NAT_TRAVERSAL nat_keepalive enabled 192.1.2.23
| NAT-Traversal: Result using RFC 3947 (NAT-Traversal) sender port 500: I am behind NAT
|  NAT_T_WITH_KA detected
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| ***emit ISAKMP Identification Payload (IPsec DOI):
|    next payload type: ISAKMP_NEXT_SIG (0x9)
|    ID type: ID_FQDN (0x2)
|    Protocol ID: 0 (0x0)
|    port: 0 (0x0)
| emitting 5 raw bytes of my identity into ISAKMP Identification Payload (IPsec DOI)
| my identity  6e 6f 72 74  68
| emitting length of ISAKMP Identification Payload (IPsec DOI): 13
| hmac prf: init 0x7fd430c037a0
| hmac prf: init symkey symkey 0x7fd430bf2fd0 (length 20)
| hmac prf: update
| concat_symkey_bytes merge symkey(0x7fd430bf2fd0) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430bf2fd0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd420013560) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd420013560) bytes(0x7fff61379770/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420013560) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| hmac prf: update bytes data 0x7fd430c01480 (length 256)
| concat_symkey_bytes merge symkey(0x7fd420010440) bytes(0x7fd430c01480/256) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| bytes:  ae 31 4d 71  cb 50 d0 57  3d 4e b5 14  75 84 9d 8b
| bytes:  39 6b 76 ef  f8 11 1e 9b  dd e5 dd d8  82 9f 89 5a
| bytes:  8e 32 81 ab  2c 8b 9d 07  cd 57 d4 20  8f d9 41 b8
| bytes:  27 ef 82 a6  85 21 40 fa  a0 72 1a a5  30 ad 08 33
| bytes:  58 30 f1 b5  8b 5a f5 95  3b 63 ae 37  33 84 35 7f
| bytes:  20 f4 cc 5b  7f a6 04 43  92 5a 98 ca  30 ed 1d 46
| bytes:  6b 5c 4b 6f  03 2e 97 8e  5a 2c 81 a0  a4 35 fe 86
| bytes:  c1 b4 4d 1a  7f 8b 63 63  f2 7d fd 52  72 96 a3 d9
| bytes:  a1 60 cc 8b  e3 18 ef 3a  c3 ec 63 47  88 54 70 89
| bytes:  82 3f 16 65  90 db a3 75  71 0b c5 5f  b3 13 34 56
| bytes:  4f 0a 3e a2  58 cd 96 53  bb 7c 25 8f  03 b9 92 c2
| bytes:  e0 ce fa b3  a4 17 07 a8  03 b3 62 48  dd a5 95 89
| bytes:  30 89 1f aa  9d e5 26 b7  46 a2 3d 8a  87 44 bb 43
| bytes:  cc b7 fa a1  47 31 84 14  7b 1d af 93  62 e8 44 5a
| bytes:  49 d4 be 75  b7 dc ee 00  26 b0 40 d6  02 69 5c 1f
| bytes:  3c ac fd 10  5d d5 52 43  1b ae de e7  ea e8 c1 2a
| concat_symkey_bytes key(0x7fd42000eab0) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420010440
| hmac prf: update bytes data 0x7fd430c03690 (length 256)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c03690/256) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  cd dc b6 06  32 60 55 a1  74 78 29 37  8b aa 72 35
| bytes:  f3 0c 3e e8  a4 1e dc 2c  53 3c 47 5e  89 a2 64 08
| bytes:  b9 cc d6 77  8e 0e be d4  37 8e d6 d9  10 a3 bf 30
| bytes:  dc 4c bb ad  8d 39 73 ee  ea 23 21 7d  b1 bc 29 0e
| bytes:  50 1a b6 2f  92 09 e9 96  68 0f b4 ba  af 66 49 2e
| bytes:  16 f3 77 86  69 6d 69 b8  4c e7 4d 2e  a7 21 78 c6
| bytes:  c5 0e 3b 08  a7 23 a8 5c  d8 88 c2 8a  c6 56 7f b7
| bytes:  24 b3 45 22  06 82 a1 69  08 3a 8c 46  d2 a0 4e 50
| bytes:  7a 0e 40 42  af 35 43 7d  57 f1 f7 78  69 f3 cd 35
| bytes:  72 62 9d 2b  67 c0 11 ad  db 8e 89 6c  62 a7 8e d4
| bytes:  13 10 8b 5a  1b 2f cf a6  5d c0 94 6f  93 dc 11 1f
| bytes:  87 1f 1b 88  16 68 30 9f  1c 9a 94 07  b8 cb fe 74
| bytes:  2e 79 3f 69  a1 26 c6 f2  b3 9f e7 b3  01 cb 9c b8
| bytes:  b1 68 30 6d  17 b9 2d 03  39 40 23 57  76 8c 74 36
| bytes:  3b b2 ae 0c  60 15 83 be  8e 95 69 90  b4 36 aa 12
| bytes:  41 1b 95 ab  30 2f 7e f8  f3 23 6b 25  70 bf 0b 31
| concat_symkey_bytes key(0x7fd420010440) length(576) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: update bytes data 0x7fd430c01c60 (length 8)
| concat_symkey_bytes merge symkey(0x7fd420010440) bytes(0x7fd430c01c60/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(576) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  16 be dc ea  e2 2b 8c 83
| concat_symkey_bytes key(0x7fd42000eab0) length(584) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420010440
| hmac prf: update bytes data 0x7fd430c01c88 (length 8)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c01c88/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(584) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  f7 5c b7 35  07 e0 34 03
| concat_symkey_bytes key(0x7fd420010440) length(592) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hashing 640 bytes of SA
| hmac prf: update bytes data 0x7fd430c02004 (length 640)
| concat_symkey_bytes merge symkey(0x7fd420010440) bytes(0x7fd430c02004/640) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(592) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  00 00 00 01  00 00 00 01  00 00 02 78  00 01 00 12
| bytes:  03 00 00 24  00 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 0e
| bytes:  80 0e 01 00  03 00 00 24  01 01 00 00  80 0b 00 01
| bytes:  80 0c 0e 10  80 01 00 07  80 02 00 02  80 03 00 03
| bytes:  80 04 00 0e  80 0e 00 80  03 00 00 24  02 01 00 00
| bytes:  80 0b 00 01  80 0c 0e 10  80 01 00 07  80 02 00 01
| bytes:  80 03 00 03  80 04 00 0e  80 0e 01 00  03 00 00 24
| bytes:  03 01 00 00  80 0b 00 01  80 0c 0e 10  80 01 00 07
| bytes:  80 02 00 01  80 03 00 03  80 04 00 0e  80 0e 00 80
| bytes:  03 00 00 20  04 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 02  80 03 00 03  80 04 00 0e
| bytes:  03 00 00 20  05 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 01  80 03 00 03  80 04 00 0e
| bytes:  03 00 00 24  06 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 05
| bytes:  80 0e 01 00  03 00 00 24  07 01 00 00  80 0b 00 01
| bytes:  80 0c 0e 10  80 01 00 07  80 02 00 02  80 03 00 03
| bytes:  80 04 00 05  80 0e 00 80  03 00 00 24  08 01 00 00
| bytes:  80 0b 00 01  80 0c 0e 10  80 01 00 07  80 02 00 01
| bytes:  80 03 00 03  80 04 00 05  80 0e 01 00  03 00 00 24
| bytes:  09 01 00 00  80 0b 00 01  80 0c 0e 10  80 01 00 07
| bytes:  80 02 00 01  80 03 00 03  80 04 00 05  80 0e 00 80
| bytes:  03 00 00 20  0a 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 02  80 03 00 03  80 04 00 05
| bytes:  03 00 00 20  0b 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 01  80 03 00 03  80 04 00 05
| bytes:  03 00 00 20  0c 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 02  80 03 00 03  80 04 00 02
| bytes:  03 00 00 20  0d 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 01  80 03 00 03  80 04 00 02
| bytes:  03 00 00 24  0e 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 02
| bytes:  80 0e 01 00  03 00 00 24  0f 01 00 00  80 0b 00 01
| bytes:  80 0c 0e 10  80 01 00 07  80 02 00 02  80 03 00 03
| bytes:  80 04 00 02  80 0e 00 80  03 00 00 24  10 01 00 00
| bytes:  80 0b 00 01  80 0c 0e 10  80 01 00 07  80 02 00 01
| bytes:  80 03 00 03  80 04 00 02  80 0e 01 00  00 00 00 24
| bytes:  11 01 00 00  80 0b 00 01  80 0c 0e 10  80 01 00 07
| bytes:  80 02 00 01  80 03 00 03  80 04 00 02  80 0e 00 80
| concat_symkey_bytes key(0x7fd42000eab0) length(1232) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420010440
| hmac prf: update bytes data 0x7fd42fb9ec40 (length 9)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd42fb9ec40/9) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(1232) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  02 00 00 00  6e 6f 72 74  68
| concat_symkey_bytes key(0x7fd420010440) length(1241) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420010440) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(1241) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420010440
| xor_symkey_chunk merge symkey(0x7fd420013560) bytes(0x7fff61379750/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420013560) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420010440) symkey(2: 0x7fd42000eab0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420007160) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420010440
| prf hashed inner:: free key 0x7fd42000eab0
| prf key: free key 0x7fd420013560
| prf outer hash hash(oakley_sha) symkey(0x7fd420007160) to bytes
| symkey: key(0x7fd420007160) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash  47 7e 76 d8  25 42 bc ac  77 64 cd 73  ca de c8 e0
| prf outer hash  bf 40 f9 d1
| prf outer: free key 0x7fd420007160
| prf final bytes  47 7e 76 d8  25 42 bc ac  77 64 cd 73  ca de c8 e0
| prf final bytes  bf 40 f9 d1
| started looking for secret for @north->@east of kind PPK_RSA
| actually looking for secret for @north->@east of kind PPK_RSA
| line 1: key type PPK_RSA(@north) to type PPK_RSA
| 1: compared key (none) to @north / @east -> 2
| 2: compared key (none) to @north / @east -> 2
| line 1: match=2
| best_match 0>2 best=0x7fd430c01610 (line=1)
| concluding with best_match=2 best=0x7fd430c01610 (lineno=1)
| RSA_sign_hash: Started using NSS
| NSS: Authentication to NSS successful
| RSA_sign_hash: Ended using NSS
| ***emit ISAKMP Signature Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
| emitting 274 raw bytes of SIG_I into ISAKMP Signature Payload
| SIG_I  2c 2b 33 1b  d1 14 08 fb  01 dc 28 cf  c4 2b 41 36
| SIG_I  28 0e 6d eb  c0 ca 7d bb  4f 4b e3 69  09 5c 0e d5
| SIG_I  37 5d da d3  01 f3 8e 34  4d 68 f0 8b  c2 c0 7c 50
| SIG_I  bb 69 00 4b  d2 7a eb 70  22 71 05 1f  da 36 3d 8e
| SIG_I  1e c9 4c 5c  2d 7e a8 d1  93 c7 9b 46  54 7b 7b 53
| SIG_I  2b 42 91 97  98 3d f5 fb  c1 ff db b6  07 3f 86 84
| SIG_I  4f 31 51 b3  b4 f6 e3 77  c1 cb 74 5b  a1 8d 19 b9
| SIG_I  a9 65 46 8c  9b 0b 00 1a  b1 18 a4 cb  a5 3c 2f 17
| SIG_I  98 a4 bc 78  44 4e a4 aa  29 5e df 78  25 35 d1 e4
| SIG_I  b7 e0 60 86  d3 87 7a e8  ec be 21 16  3a 57 80 46
| SIG_I  5b 03 b0 ec  4a e6 66 60  51 d3 9e 5f  82 56 62 94
| SIG_I  92 3d ce 2e  ce f4 e3 8b  2f 88 05 a4  fa a1 b3 76
| SIG_I  65 0e 3d f8  7e 3a ce 7c  18 84 19 19  3f 65 20 c1
| SIG_I  05 55 61 da  34 c7 28 c9  b1 c8 29 59  ef ea dc 16
| SIG_I  ea 4e 33 d6  3b 39 fb ff  3f d0 29 06  6b 0e 6e 4b
| SIG_I  f2 7e 72 d5  b2 5a d3 af  13 1b c6 21  5d f0 fd f5
| SIG_I  77 ca 5f 1f  4d 2f 22 34  43 93 00 4a  64 2e e6 ab
| SIG_I  3b e0
| emitting length of ISAKMP Signature Payload: 278
| Not sending INITIAL_CONTACT
| encrypting:  09 00 00 0d  02 00 00 00  6e 6f 72 74  68 00 00 01
| encrypting:  16 2c 2b 33  1b d1 14 08  fb 01 dc 28  cf c4 2b 41
| encrypting:  36 28 0e 6d  eb c0 ca 7d  bb 4f 4b e3  69 09 5c 0e
| encrypting:  d5 37 5d da  d3 01 f3 8e  34 4d 68 f0  8b c2 c0 7c
| encrypting:  50 bb 69 00  4b d2 7a eb  70 22 71 05  1f da 36 3d
| encrypting:  8e 1e c9 4c  5c 2d 7e a8  d1 93 c7 9b  46 54 7b 7b
| encrypting:  53 2b 42 91  97 98 3d f5  fb c1 ff db  b6 07 3f 86
| encrypting:  84 4f 31 51  b3 b4 f6 e3  77 c1 cb 74  5b a1 8d 19
| encrypting:  b9 a9 65 46  8c 9b 0b 00  1a b1 18 a4  cb a5 3c 2f
| encrypting:  17 98 a4 bc  78 44 4e a4  aa 29 5e df  78 25 35 d1
| encrypting:  e4 b7 e0 60  86 d3 87 7a  e8 ec be 21  16 3a 57 80
| encrypting:  46 5b 03 b0  ec 4a e6 66  60 51 d3 9e  5f 82 56 62
| encrypting:  94 92 3d ce  2e ce f4 e3  8b 2f 88 05  a4 fa a1 b3
| encrypting:  76 65 0e 3d  f8 7e 3a ce  7c 18 84 19  19 3f 65 20
| encrypting:  c1 05 55 61  da 34 c7 28  c9 b1 c8 29  59 ef ea dc
| encrypting:  16 ea 4e 33  d6 3b 39 fb  ff 3f d0 29  06 6b 0e 6e
| encrypting:  4b f2 7e 72  d5 b2 5a d3  af 13 1b c6  21 5d f0 fd
| encrypting:  f5 77 ca 5f  1f 4d 2f 22  34 43 93 00  4a 64 2e e6
| encrypting:  ab 3b e0
| IV:  07 7c d8 fe  da 3e c9 b4  d2 ed f4 dd  f6 9a 9b ee
| IV:  d8 15 ee 70
| unpadded size is: 291
| emitting 13 zero bytes of encryption padding into ISAKMP Message
| encrypting 304 using OAKLEY_AES_CBC
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| next IV:  99 3f bc f5  c7 5f 53 96  0f cc 01 b1  4d ca ff 84
| no IKEv1 message padding required
| emitting length of ISAKMP Message: 332
| complete v1 state transition with STF_OK
"north-east-port3" #1: transition from state STATE_MAIN_I2 to state STATE_MAIN_I3
| parent state #1: STATE_MAIN_I2(open-ike) > STATE_MAIN_I3(open-ike)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 1
| established-anonymous-ike states: 0
| established-authenticated-ike states: 0
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| state: #1 requesting EVENT_CRYPTO_FAILED to be deleted
| NAT-T: floating local port 500 to nat port 4500
| NAT-T connection has wrong interface definition 192.1.3.33:4500 vs 192.1.3.33:500
| NAT-T: using interface eth1:4500
| sending reply packet to 192.1.2.23:4500 (from port 4500)
| sending 336 bytes for STATE_MAIN_I2 through eth1:4500 to 192.1.2.23:4500 (using #1)
|   00 00 00 00  16 be dc ea  e2 2b 8c 83  f7 5c b7 35
|   07 e0 34 03  05 10 02 01  00 00 00 00  00 00 01 4c
|   84 be 3f 03  08 26 88 d6  1d 10 8f 96  dc 44 c5 55
|   5a 44 e8 bf  22 36 76 96  f4 ae 4c 7e  d9 5f b6 5d
|   54 82 ba 77  3b 2c 3d 7f  4d 20 ee a0  96 e0 1d 13
|   be dd 7a dc  39 8e ce fb  61 4d 40 1f  aa 7f 88 c2
|   43 dd aa 35  69 6a 09 6a  a4 19 9a f3  ea 18 4b f5
|   b8 f4 83 db  c6 bc 67 a6  48 0d de e3  e5 d1 6c b6
|   30 76 d6 99  07 cf 1c 6f  df 21 e4 f5  20 2d 74 52
|   69 72 b8 ae  7f 1b fb d5  48 fc f3 14  04 bb f0 39
|   cd 49 d6 eb  cc bd 5c de  4b 4b e8 db  9a f8 a3 f6
|   74 58 2f dd  9d 23 73 07  16 c8 91 41  94 04 22 58
|   f5 c5 20 48  be 3b df 86  55 12 e1 a3  bf f5 69 d7
|   81 d5 fb 10  d6 8a fa 20  e4 ed d4 c1  18 50 57 1a
|   2f 6c cc 6c  c3 de fe ca  58 21 fc 2d  50 cd a2 ef
|   a0 1c f3 a5  74 b6 13 4d  eb 83 e7 cf  1e e2 e3 b3
|   c3 ab 4e ce  32 0e 50 35  63 30 8d 45  de 13 5f 67
|   58 cd 47 6a  56 09 11 87  aa db c4 21  f0 33 44 63
|   53 cb 78 b4  1d 27 81 58  55 4a bf 31  6e 0e e5 66
|   4d 10 ad 5e  22 e4 04 2d  12 96 ca bc  cc 90 10 f1
|   99 3f bc f5  c7 5f 53 96  0f cc 01 b1  4d ca ff 84
| event_schedule_ms called for about 500 ms
| event_schedule_tv called for about 0 seconds and change
| inserting event EVENT_v1_RETRANSMIT, timeout in 0.500000 seconds for #1
"north-east-port3" #1: STATE_MAIN_I3: sent MI3, expecting MR3
| modecfg pull: noquirk policy:push not-client
| phase 1 is done, looking for phase 2 to unpend
| *received 332 bytes from 192.1.2.23:4500 on eth1 (port=4500)
|   16 be dc ea  e2 2b 8c 83  f7 5c b7 35  07 e0 34 03
|   05 10 02 01  00 00 00 00  00 00 01 4c  de 54 f4 5b
|   df 57 9a a9  df bf 9a 51  31 cf df ee  d8 e9 4c 78
|   1e c0 78 6a  f7 15 f4 da  c3 bf e1 65  c4 d4 92 35
|   13 0b c7 9a  f0 16 0c 67  78 d6 ce ae  28 4d 0d db
|   21 0d dc 92  e8 9e df 50  3f 7c e4 3d  9b 6b de ff
|   e5 dd 79 33  20 51 f4 83  4a ba 91 18  e0 ee 4f 14
|   58 28 71 f2  f9 13 13 9a  22 e5 9d 32  48 c9 d8 18
|   f9 f7 74 41  81 a4 c1 7e  95 e7 52 4e  c5 34 06 dc
|   d7 ef c5 f3  e3 0a 1c b4  c1 28 4b b7  b7 99 23 02
|   a2 59 a2 f6  79 8d 55 a8  06 45 94 5f  b9 98 5c 75
|   5a e0 1f 4b  a3 39 df ec  78 51 05 f0  61 c4 99 22
|   99 2f e9 1a  17 bd ea b5  d8 9e 06 77  de 1f ed 09
|   b7 56 f8 65  34 74 15 f4  65 49 89 27  0f e7 91 5d
|   c5 f0 04 56  80 44 d5 ce  bb 10 8d bb  39 95 f2 88
|   36 ed 81 ab  ee e1 1b 4c  8e 18 64 b5  16 e5 8e 2f
|   42 76 c3 33  af 6c 94 c0  12 f6 59 9c  dd 69 3e 48
|   da cd a8 bc  98 b1 2f 25  3f c0 e2 c2  97 14 12 16
|   f7 4b f2 67  f1 7a 11 16  e0 d9 b4 21  cc a0 ed 9b
|   2f b8 4d be  10 cd 85 b7  e6 fd c9 c2  2e 33 34 10
|   87 3b cc 95  0a b0 8d 3c  21 38 90 43
| **parse ISAKMP Message:
|    initiator cookie:
|   16 be dc ea  e2 2b 8c 83
|    responder cookie:
|   f7 5c b7 35  07 e0 34 03
|    next payload type: ISAKMP_NEXT_ID (0x5)
|    ISAKMP version: ISAKMP Version 1.0 (rfc2407) (0x10)
|    exchange type: ISAKMP_XCHG_IDPROT (0x2)
|    flags: ISAKMP_FLAG_v1_ENCRYPTION (0x1)
|    message ID:  00 00 00 00
|    length: 332 (0x14c)
|  processing version=1.0 packet with exchange type=ISAKMP_XCHG_IDPROT (2)
| finding hash chain in state hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  f7 5c b7 35  07 e0 34 03
| found hash chain 9
| v1 peer and cookies match on #1, provided msgid 00000000 == 00000000
| v1 state object #1 found, in STATE_MAIN_I3
| processing connection "north-east-port3"
| #1 state_busy:2286 st != NULL && st->st_calculating == FALSE;
| received encrypted packet from 192.1.2.23:4500
| decrypting 304 bytes using algorithm OAKLEY_AES_CBC
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| decrypted:
|   09 00 00 0c  02 00 00 00  65 61 73 74  0d 00 01 16
|   29 8f 90 fc  32 7f 9c c2  c3 e5 c6 06  e1 40 f6 28
|   07 c2 67 99  23 a6 42 b2  81 c6 6d a0  77 5e 0d b7
|   6d ea bd 37  df a4 2d f6  ee 2e 88 f0  a7 0d 19 c7
|   92 f8 69 db  c4 14 5d e0  4e ed 05 c7  c7 ea 15 17
|   b7 71 fb a6  32 09 5b d1  ea e2 26 c9  f1 d7 21 ee
|   22 95 f0 68  22 71 7e b3  eb 6d f5 12  ca 27 4c f5
|   06 e1 66 d0  fb e4 4f 9f  6b af a1 84  9f e1 3c 4f
|   26 fc 4a 29  a5 7c 9b 2b  e6 88 f3 c4  e7 cc 17 b1
|   eb df ca 83  fa 5e cc a0  be 48 b5 b9  f7 87 bb 89
|   f8 8c 12 70  5c 69 c8 b6  c4 54 64 51  32 b9 7c 86
|   ee 93 7d 97  da 47 38 8e  40 01 f0 39  51 42 d9 a1
|   57 a9 db 38  18 60 fa e3  1d a7 77 ec  9e 3e 26 1c
|   63 8a c7 7a  06 63 2b c8  f0 07 b8 06  df 44 90 ba
|   d2 2a 2d 54  3b 8a db 4f  51 e1 e8 16  1d eb fa 16
|   99 03 ee 55  77 43 a8 4b  84 43 c3 df  e2 5e 65 f2
|   e5 37 e5 85  9f aa 5b 65  d5 74 79 6a  8f 0f 62 26
|   d7 41 0b 54  8e 43 9f 5f  cb f8 42 62  ce 3a 1a 09
|   4e a3 00 00  00 09 49 4b  45 76 32 00  00 00 00 00
| next IV:  2e 33 34 10  87 3b cc 95  0a b0 8d 3c  21 38 90 43
| got payload 0x20  (ISAKMP_NEXT_ID) needed: 0x220opt: 0x20c0
| ***parse ISAKMP Identification Payload:
|    next payload type: ISAKMP_NEXT_SIG (0x9)
|    length: 12 (0xc)
|    ID type: ID_FQDN (0x2)
|    DOI specific A: 0 (0x0)
|    DOI specific B: 0 (0x0)
|      obj:   65 61 73 74
| got payload 0x200  (ISAKMP_NEXT_SIG) needed: 0x200opt: 0x20c0
| ***parse ISAKMP Signature Payload:
|    next payload type: ISAKMP_NEXT_VID (0xd)
|    length: 278 (0x116)
| got payload 0x2000  (ISAKMP_NEXT_VID) needed: 0x0opt: 0x20c0
| ***parse ISAKMP Vendor ID Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    length: 9 (0x9)
| removing 5 bytes of padding
| received Vendor ID payload [CAN-IKEv2]
"north-east-port3" #1: Main mode peer ID is ID_FQDN: '@east'
| hmac prf: init 0x7fd430c02550
| hmac prf: init symkey symkey 0x7fd430bf2fd0 (length 20)
| hmac prf: update
| concat_symkey_bytes merge symkey(0x7fd430bf2fd0) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430bf2fd0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd420007160) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd420007160) bytes(0x7fff6137a5b0/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420007160) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420013560) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| hmac prf: update bytes data 0x7fd430c03690 (length 256)
| concat_symkey_bytes merge symkey(0x7fd420013560) bytes(0x7fd430c03690/256) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| bytes:  cd dc b6 06  32 60 55 a1  74 78 29 37  8b aa 72 35
| bytes:  f3 0c 3e e8  a4 1e dc 2c  53 3c 47 5e  89 a2 64 08
| bytes:  b9 cc d6 77  8e 0e be d4  37 8e d6 d9  10 a3 bf 30
| bytes:  dc 4c bb ad  8d 39 73 ee  ea 23 21 7d  b1 bc 29 0e
| bytes:  50 1a b6 2f  92 09 e9 96  68 0f b4 ba  af 66 49 2e
| bytes:  16 f3 77 86  69 6d 69 b8  4c e7 4d 2e  a7 21 78 c6
| bytes:  c5 0e 3b 08  a7 23 a8 5c  d8 88 c2 8a  c6 56 7f b7
| bytes:  24 b3 45 22  06 82 a1 69  08 3a 8c 46  d2 a0 4e 50
| bytes:  7a 0e 40 42  af 35 43 7d  57 f1 f7 78  69 f3 cd 35
| bytes:  72 62 9d 2b  67 c0 11 ad  db 8e 89 6c  62 a7 8e d4
| bytes:  13 10 8b 5a  1b 2f cf a6  5d c0 94 6f  93 dc 11 1f
| bytes:  87 1f 1b 88  16 68 30 9f  1c 9a 94 07  b8 cb fe 74
| bytes:  2e 79 3f 69  a1 26 c6 f2  b3 9f e7 b3  01 cb 9c b8
| bytes:  b1 68 30 6d  17 b9 2d 03  39 40 23 57  76 8c 74 36
| bytes:  3b b2 ae 0c  60 15 83 be  8e 95 69 90  b4 36 aa 12
| bytes:  41 1b 95 ab  30 2f 7e f8  f3 23 6b 25  70 bf 0b 31
| concat_symkey_bytes key(0x7fd42000eab0) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420013560
| hmac prf: update bytes data 0x7fd430c01480 (length 256)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c01480/256) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  ae 31 4d 71  cb 50 d0 57  3d 4e b5 14  75 84 9d 8b
| bytes:  39 6b 76 ef  f8 11 1e 9b  dd e5 dd d8  82 9f 89 5a
| bytes:  8e 32 81 ab  2c 8b 9d 07  cd 57 d4 20  8f d9 41 b8
| bytes:  27 ef 82 a6  85 21 40 fa  a0 72 1a a5  30 ad 08 33
| bytes:  58 30 f1 b5  8b 5a f5 95  3b 63 ae 37  33 84 35 7f
| bytes:  20 f4 cc 5b  7f a6 04 43  92 5a 98 ca  30 ed 1d 46
| bytes:  6b 5c 4b 6f  03 2e 97 8e  5a 2c 81 a0  a4 35 fe 86
| bytes:  c1 b4 4d 1a  7f 8b 63 63  f2 7d fd 52  72 96 a3 d9
| bytes:  a1 60 cc 8b  e3 18 ef 3a  c3 ec 63 47  88 54 70 89
| bytes:  82 3f 16 65  90 db a3 75  71 0b c5 5f  b3 13 34 56
| bytes:  4f 0a 3e a2  58 cd 96 53  bb 7c 25 8f  03 b9 92 c2
| bytes:  e0 ce fa b3  a4 17 07 a8  03 b3 62 48  dd a5 95 89
| bytes:  30 89 1f aa  9d e5 26 b7  46 a2 3d 8a  87 44 bb 43
| bytes:  cc b7 fa a1  47 31 84 14  7b 1d af 93  62 e8 44 5a
| bytes:  49 d4 be 75  b7 dc ee 00  26 b0 40 d6  02 69 5c 1f
| bytes:  3c ac fd 10  5d d5 52 43  1b ae de e7  ea e8 c1 2a
| concat_symkey_bytes key(0x7fd420013560) length(576) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: update bytes data 0x7fd430c01c88 (length 8)
| concat_symkey_bytes merge symkey(0x7fd420013560) bytes(0x7fd430c01c88/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(576) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  f7 5c b7 35  07 e0 34 03
| concat_symkey_bytes key(0x7fd42000eab0) length(584) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420013560
| hmac prf: update bytes data 0x7fd430c01c60 (length 8)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c01c60/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(584) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  16 be dc ea  e2 2b 8c 83
| concat_symkey_bytes key(0x7fd420013560) length(592) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hashing 640 bytes of SA
| hmac prf: update bytes data 0x7fd430c02004 (length 640)
| concat_symkey_bytes merge symkey(0x7fd420013560) bytes(0x7fd430c02004/640) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(592) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  00 00 00 01  00 00 00 01  00 00 02 78  00 01 00 12
| bytes:  03 00 00 24  00 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 0e
| bytes:  80 0e 01 00  03 00 00 24  01 01 00 00  80 0b 00 01
| bytes:  80 0c 0e 10  80 01 00 07  80 02 00 02  80 03 00 03
| bytes:  80 04 00 0e  80 0e 00 80  03 00 00 24  02 01 00 00
| bytes:  80 0b 00 01  80 0c 0e 10  80 01 00 07  80 02 00 01
| bytes:  80 03 00 03  80 04 00 0e  80 0e 01 00  03 00 00 24
| bytes:  03 01 00 00  80 0b 00 01  80 0c 0e 10  80 01 00 07
| bytes:  80 02 00 01  80 03 00 03  80 04 00 0e  80 0e 00 80
| bytes:  03 00 00 20  04 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 02  80 03 00 03  80 04 00 0e
| bytes:  03 00 00 20  05 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 01  80 03 00 03  80 04 00 0e
| bytes:  03 00 00 24  06 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 05
| bytes:  80 0e 01 00  03 00 00 24  07 01 00 00  80 0b 00 01
| bytes:  80 0c 0e 10  80 01 00 07  80 02 00 02  80 03 00 03
| bytes:  80 04 00 05  80 0e 00 80  03 00 00 24  08 01 00 00
| bytes:  80 0b 00 01  80 0c 0e 10  80 01 00 07  80 02 00 01
| bytes:  80 03 00 03  80 04 00 05  80 0e 01 00  03 00 00 24
| bytes:  09 01 00 00  80 0b 00 01  80 0c 0e 10  80 01 00 07
| bytes:  80 02 00 01  80 03 00 03  80 04 00 05  80 0e 00 80
| bytes:  03 00 00 20  0a 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 02  80 03 00 03  80 04 00 05
| bytes:  03 00 00 20  0b 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 01  80 03 00 03  80 04 00 05
| bytes:  03 00 00 20  0c 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 02  80 03 00 03  80 04 00 02
| bytes:  03 00 00 20  0d 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 05  80 02 00 01  80 03 00 03  80 04 00 02
| bytes:  03 00 00 24  0e 01 00 00  80 0b 00 01  80 0c 0e 10
| bytes:  80 01 00 07  80 02 00 02  80 03 00 03  80 04 00 02
| bytes:  80 0e 01 00  03 00 00 24  0f 01 00 00  80 0b 00 01
| bytes:  80 0c 0e 10  80 01 00 07  80 02 00 02  80 03 00 03
| bytes:  80 04 00 02  80 0e 00 80  03 00 00 24  10 01 00 00
| bytes:  80 0b 00 01  80 0c 0e 10  80 01 00 07  80 02 00 01
| bytes:  80 03 00 03  80 04 00 02  80 0e 01 00  00 00 00 24
| bytes:  11 01 00 00  80 0b 00 01  80 0c 0e 10  80 01 00 07
| bytes:  80 02 00 01  80 03 00 03  80 04 00 02  80 0e 00 80
| concat_symkey_bytes key(0x7fd42000eab0) length(1232) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420013560
| hmac prf: update bytes data 0x7fd430c02410 (length 8)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c02410/8) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(1232) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  02 00 00 00  65 61 73 74
| concat_symkey_bytes key(0x7fd420013560) length(1240) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420013560) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(1240) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420013560
| xor_symkey_chunk merge symkey(0x7fd420007160) bytes(0x7fff6137a590/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420007160) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420013560) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420013560) symkey(2: 0x7fd42000eab0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420013560) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420010440) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420013560
| prf hashed inner:: free key 0x7fd42000eab0
| prf key: free key 0x7fd420007160
| prf outer hash hash(oakley_sha) symkey(0x7fd420010440) to bytes
| symkey: key(0x7fd420010440) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash  94 5d e3 ea  ea 43 f6 6a  ae fd c3 19  54 c6 fb 21
| prf outer hash  e6 02 fc c0
| prf outer: free key 0x7fd420010440
| prf final bytes  94 5d e3 ea  ea 43 f6 6a  ae fd c3 19  54 c6 fb 21
| prf final bytes  e6 02 fc c0
| required CA is '%any'
| trusted_ca_nss: trustee A = '(empty)'
| trusted_ca_nss: trustor B = '(empty)'
| key issuer CA is '%any'
| NSS RSA verify: decrypted sig: 
|   94 5d e3 ea  ea 43 f6 6a  ae fd c3 19  54 c6 fb 21
|   e6 02 fc c0
| NSS RSA verify: hash value: 
|   94 5d e3 ea  ea 43 f6 6a  ae fd c3 19  54 c6 fb 21
|   e6 02 fc c0
| RSA Signature verified
| an RSA Sig check passed with *AQO9bJbr3 [preloaded key]
| authentication succeeded
| complete v1 state transition with STF_OK
"north-east-port3" #1: transition from state STATE_MAIN_I3 to state STATE_MAIN_I4
| parent state #1: STATE_MAIN_I3(open-ike) > STATE_MAIN_I4(established-authenticated-ike)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 1
| anonymous-ipsec states: 0
| authenticated-ipsec states: 0
| informational states: 0
| unknown states: 0
| category states: 1 count states: 1
| state: #1 requesting EVENT_v1_RETRANSMIT to be deleted
| event_schedule_ms called for about 2607000 ms
| event_schedule_tv called for about 2607 seconds and change
| inserting event EVENT_SA_REPLACE, timeout in 2607.000000 seconds for #1
"north-east-port3" #1: STATE_MAIN_I4: ISAKMP SA established {auth=RSA_SIG cipher=aes_256 integ=sha group=MODP2048}
| modecfg pull: noquirk policy:push not-client
| phase 1 is done, looking for phase 2 to unpend
| unpending state #1
| unqueuing pending Quick Mode with 192.1.2.23 "north-east-port3" import:admin initiate
| creating state object #2 at 0x7fd430c07d30
| parent state #2: new > STATE_UNDEFINED(ignore)
| duplicating state object #1 as #2
| #2 quick_outI1:921 st->st_calculating == FALSE;
| processing connection "north-east-port3"
| child state #2: STATE_UNDEFINED(ignore) > STATE_QUICK_I1(authenticated-ipsec)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 1
| anonymous-ipsec states: 0
| authenticated-ipsec states: 1
| informational states: 0
| unknown states: 0
| category states: 2 count states: 2
| inserting state object #2
| finding hash chain in state hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  f7 5c b7 35  07 e0 34 03
| found hash chain 9
| list 0x7fd42fb913d0 first entry 0x7fd430c01e58
| inserted state 0x7fd430c07d30 entry 0x7fd430c083a8 next 0x7fd430c01e58 prev-next 0x7fd42fb913d0 into list
| updated next state 0x7fd430c017e0 entry 0x7fd430c01e58 next (nil) prev-next 0x7fd430c083a8
| finding hash chain in icookie hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  00 00 00 00  00 00 00 00
| found hash chain 6
| list 0x7fd42fb914d8 first entry 0x7fd430c01e70
| inserted state 0x7fd430c07d30 entry 0x7fd430c083c0 next 0x7fd430c01e70 prev-next 0x7fd42fb914d8 into list
| updated next state 0x7fd430c017e0 entry 0x7fd430c01e70 next (nil) prev-next 0x7fd430c083c0
| event_schedule called for 0 seconds
| event_schedule_tv called for about 0 seconds and change
| inserting event EVENT_SO_DISCARD, timeout in 0.000000 seconds for #2
"north-east-port3" #2: initiating Quick Mode RSASIG+ENCRYPT+PFS+UP+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO {using isakmp#1 msgid:619a598b proposal=defaults pfsgroup=OAKLEY_GROUP_MODP2048}
| crypto helper 0: pcw_work: 0
| asking crypto helper 0 to do build KE and nonce; request ID 3 (len=2776, pcw_work=0)
| crypto helper 0 read fd: 12
| crypto helper 0 doing build KE and nonce; request ID 3
| NSS: Value of Prime:
|   ff ff ff ff  ff ff ff ff  c9 0f da a2  21 68 c2 34
|   c4 c6 62 8b  80 dc 1c d1  29 02 4e 08  8a 67 cc 74
|   02 0b be a6  3b 13 9b 22  51 4a 08 79  8e 34 04 dd
|   ef 95 19 b3  cd 3a 43 1b  30 2b 0a 6d  f2 5f 14 37
|   4f e1 35 6d  6d 51 c2 45  e4 85 b5 76  62 5e 7e c6
|   f4 4c 42 e9  a6 37 ed 6b  0b ff 5c b6  f4 06 b7 ed
|   ee 38 6b fb  5a 89 9f a5  ae 9f 24 11  7c 4b 1f e6
|   49 28 66 51  ec e4 5b 3d  c2 00 7c b8  a1 63 bf 05
|   98 da 48 36  1c 55 d3 9a  69 16 3f a8  fd 24 cf 5f
|   83 65 5d 23  dc a3 ad 96  1c 62 f3 56  20 85 52 bb
|   9e d5 29 07  70 96 96 6d  67 0c 35 4e  4a bc 98 04
|   f1 74 6c 08  ca 18 21 7c  32 90 5e 46  2e 36 ce 3b
|   e3 9e 77 2c  18 0e 86 03  9b 27 83 a2  ec 07 a2 8f
|   b5 c5 5d f0  6f 4c 52 c9  de 2b cb f6  95 58 17 18
|   39 95 49 7c  ea 95 6a e5  15 d2 26 18  98 fa 05 10
|   15 72 8e 5a  8a ac aa 68  ff ff ff ff  ff ff ff ff
| NSS: Value of base:  02
| NSS: generated dh priv and pub keys: 256
| NSS: Local DH secret (pointer): 0x7fd430c06df0
| NSS: Public DH value sent(computed in NSS):
|   92 2b 8f 33  c9 6a d9 d5  19 fa 47 fa  4c d8 4d 39
|   30 b3 7e ee  66 8c 1f 3e  49 c0 1f 18  50 8e 25 c3
|   87 50 4f b0  f7 65 7f 31  28 3a 97 15  f1 fe 66 af
|   51 a4 0a 6d  df b0 0e 18  94 01 f8 c0  31 a4 b1 1e
|   08 fa 8e 3f  2e ea 08 b5  a3 b2 ae 1b  b5 2d f7 3a
|   91 b4 19 c6  1b 4a 8c 46  d5 e1 77 27  b9 0a d1 df
|   44 34 7a 17  36 5a bb 3b  55 94 eb 81  fb 7e 01 ff
|   d9 d5 eb a0  c5 9b c9 ec  a4 d3 dc 48  d7 7c 9a 45
|   33 da b1 b7  ed 1c cd 5f  d4 8a d5 c0  8b 7b 02 68
|   a2 8c 5c e6  5e 9d 03 f4  d2 1a c7 0f  18 eb c7 7f
|   d2 36 00 d1  aa 5e d2 be  45 bf 46 98  3b d9 da d1
|   d6 c7 bc 6f  1a 9a 23 f8  35 47 65 df  d6 ee 4e 0c
|   69 f9 cc 32  d4 35 1d 2a  9e e3 04 89  8d 1a 5f a9
|   c2 f4 14 9a  d4 e3 60 68  9f 17 0a d6  2e c1 36 f2
|   4d 35 ff 2c  14 95 e2 87  2a 7e e2 6f  0a f4 4f 21
|   6d b7 59 72  11 70 09 c6  62 6b 1e 68  11 21 ad b1
| NSS: Local DH public value (pointer): 0x7fd430c065e0
| Generated nonce:  9b a2 27 ff  20 4d 02 c0  17 a8 14 e4  6a 8d 7a d0
| Generated nonce:  66 28 1b b4  6d e1 fa f0  88 61 7e 11  9a f0 61 ab
| crypto helper 0 finished build KE and nonce; request ID 3 time elapsed 3263 usec
| #2 send_crypto_helper_request:613 st->st_calculating = TRUE;
| state: #2 requesting EVENT_SO_DISCARD to be deleted
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_CRYPTO_FAILED, timeout in 60.000000 seconds for #2
| removing pending policy for "none" {0x7fd430c00250}
| crypto helper 0 has finished work (pcw_work now 1)
| crypto helper 0 replies to request ID 3
| calling continuation function 0x7fd42f8c0590
| quick_outI1_continue for #2: calculated ke+nonce, sending I1
| #2 quick_outI1_continue:880 st->st_calculating = FALSE;
| processing connection "north-east-port3"
| **emit ISAKMP Message:
|    initiator cookie:
|   16 be dc ea  e2 2b 8c 83
|    responder cookie:
|   f7 5c b7 35  07 e0 34 03
|    next payload type: ISAKMP_NEXT_HASH (0x8)
|    ISAKMP version: ISAKMP Version 1.0 (rfc2407) (0x10)
|    exchange type: ISAKMP_XCHG_QUICK (0x20)
|    flags: ISAKMP_FLAG_v1_ENCRYPTION (0x1)
|    message ID:  8b 59 9a 61
| ***emit ISAKMP Hash Payload:
|    next payload type: ISAKMP_NEXT_SA (0x1)
| emitting 20 zero bytes of HASH into ISAKMP Hash Payload
| emitting length of ISAKMP Hash Payload: 24
| empty esp_info, returning defaults
| ***emit ISAKMP Security Association Payload:
|    next payload type: ISAKMP_NEXT_NONCE (0xa)
|    DOI: ISAKMP_DOI_IPSEC (0x1)
| ****emit IPsec DOI SIT:
|    IPsec DOI SIT: SIT_IDENTITY_ONLY (0x1)
| ikev1_out_sa pcn: 0 has 1 valid proposals
| ikev1_out_sa pcn: 0 pn: 0<1 valid_count: 1 trans_cnt: 4
| ****emit ISAKMP Proposal Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    proposal number: 0 (0x0)
|    protocol ID: PROTO_IPSEC_ESP (0x3)
|    SPI size: 4 (0x4)
|    number of transforms: 4 (0x4)
| netlink_get_spi: allocated 0x57b1c36 for esp.0@192.1.3.33
| emitting 4 raw bytes of SPI into ISAKMP Proposal Payload
| SPI  05 7b 1c 36
| *****emit ISAKMP Transform Payload (ESP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ESP transform number: 0 (0x0)
|    ESP transform ID: ESP_AES (0xc)
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: GROUP_DESCRIPTION (0x8003)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: ENCAPSULATION_MODE (0x8004)
|    length/value: 4 (0x4)
|     [4 is ENCAPSULATION_MODE_UDP_TRANSPORT_RFC]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_TYPE (0x8001)
|    length/value: 1 (0x1)
|     [1 is SA_LIFE_TYPE_SECONDS]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_DURATION (0x8002)
|    length/value: 28800 (0x7080)
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: AUTH_ALGORITHM (0x8005)
|    length/value: 2 (0x2)
|     [2 is AUTH_ALGORITHM_HMAC_SHA1]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: KEY_LENGTH (0x8006)
|    length/value: 128 (0x80)
| emitting length of ISAKMP Transform Payload (ESP): 32
| *****emit ISAKMP Transform Payload (ESP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ESP transform number: 1 (0x1)
|    ESP transform ID: ESP_AES (0xc)
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: GROUP_DESCRIPTION (0x8003)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: ENCAPSULATION_MODE (0x8004)
|    length/value: 4 (0x4)
|     [4 is ENCAPSULATION_MODE_UDP_TRANSPORT_RFC]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_TYPE (0x8001)
|    length/value: 1 (0x1)
|     [1 is SA_LIFE_TYPE_SECONDS]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_DURATION (0x8002)
|    length/value: 28800 (0x7080)
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: AUTH_ALGORITHM (0x8005)
|    length/value: 1 (0x1)
|     [1 is AUTH_ALGORITHM_HMAC_MD5]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: KEY_LENGTH (0x8006)
|    length/value: 128 (0x80)
| emitting length of ISAKMP Transform Payload (ESP): 32
| *****emit ISAKMP Transform Payload (ESP):
|    next payload type: ISAKMP_NEXT_T (0x3)
|    ESP transform number: 2 (0x2)
|    ESP transform ID: ESP_3DES (0x3)
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: GROUP_DESCRIPTION (0x8003)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: ENCAPSULATION_MODE (0x8004)
|    length/value: 4 (0x4)
|     [4 is ENCAPSULATION_MODE_UDP_TRANSPORT_RFC]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_TYPE (0x8001)
|    length/value: 1 (0x1)
|     [1 is SA_LIFE_TYPE_SECONDS]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_DURATION (0x8002)
|    length/value: 28800 (0x7080)
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: AUTH_ALGORITHM (0x8005)
|    length/value: 2 (0x2)
|     [2 is AUTH_ALGORITHM_HMAC_SHA1]
| emitting length of ISAKMP Transform Payload (ESP): 28
| *****emit ISAKMP Transform Payload (ESP):
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    ESP transform number: 3 (0x3)
|    ESP transform ID: ESP_3DES (0x3)
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: GROUP_DESCRIPTION (0x8003)
|    length/value: 14 (0xe)
|     [14 is OAKLEY_GROUP_MODP2048]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: ENCAPSULATION_MODE (0x8004)
|    length/value: 4 (0x4)
|     [4 is ENCAPSULATION_MODE_UDP_TRANSPORT_RFC]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_TYPE (0x8001)
|    length/value: 1 (0x1)
|     [1 is SA_LIFE_TYPE_SECONDS]
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_DURATION (0x8002)
|    length/value: 28800 (0x7080)
| ******emit ISAKMP IPsec DOI attribute:
|    af+type: AUTH_ALGORITHM (0x8005)
|    length/value: 1 (0x1)
|     [1 is AUTH_ALGORITHM_HMAC_MD5]
| emitting length of ISAKMP Transform Payload (ESP): 28
| emitting length of ISAKMP Proposal Payload: 132
| emitting length of ISAKMP Security Association Payload: 144
| ***emit ISAKMP Nonce Payload:
|    next payload type: ISAKMP_NEXT_KE (0x4)
| emitting 32 raw bytes of Ni into ISAKMP Nonce Payload
| Ni  9b a2 27 ff  20 4d 02 c0  17 a8 14 e4  6a 8d 7a d0
| Ni  66 28 1b b4  6d e1 fa f0  88 61 7e 11  9a f0 61 ab
| emitting length of ISAKMP Nonce Payload: 36
| saving DH priv (local secret) and pub key into state struct
| ***emit ISAKMP Key Exchange Payload:
|    next payload type: ISAKMP_NEXT_ID (0x5)
| emitting 256 raw bytes of keyex value into ISAKMP Key Exchange Payload
| keyex value  92 2b 8f 33  c9 6a d9 d5  19 fa 47 fa  4c d8 4d 39
| keyex value  30 b3 7e ee  66 8c 1f 3e  49 c0 1f 18  50 8e 25 c3
| keyex value  87 50 4f b0  f7 65 7f 31  28 3a 97 15  f1 fe 66 af
| keyex value  51 a4 0a 6d  df b0 0e 18  94 01 f8 c0  31 a4 b1 1e
| keyex value  08 fa 8e 3f  2e ea 08 b5  a3 b2 ae 1b  b5 2d f7 3a
| keyex value  91 b4 19 c6  1b 4a 8c 46  d5 e1 77 27  b9 0a d1 df
| keyex value  44 34 7a 17  36 5a bb 3b  55 94 eb 81  fb 7e 01 ff
| keyex value  d9 d5 eb a0  c5 9b c9 ec  a4 d3 dc 48  d7 7c 9a 45
| keyex value  33 da b1 b7  ed 1c cd 5f  d4 8a d5 c0  8b 7b 02 68
| keyex value  a2 8c 5c e6  5e 9d 03 f4  d2 1a c7 0f  18 eb c7 7f
| keyex value  d2 36 00 d1  aa 5e d2 be  45 bf 46 98  3b d9 da d1
| keyex value  d6 c7 bc 6f  1a 9a 23 f8  35 47 65 df  d6 ee 4e 0c
| keyex value  69 f9 cc 32  d4 35 1d 2a  9e e3 04 89  8d 1a 5f a9
| keyex value  c2 f4 14 9a  d4 e3 60 68  9f 17 0a d6  2e c1 36 f2
| keyex value  4d 35 ff 2c  14 95 e2 87  2a 7e e2 6f  0a f4 4f 21
| keyex value  6d b7 59 72  11 70 09 c6  62 6b 1e 68  11 21 ad b1
| emitting length of ISAKMP Key Exchange Payload: 260
| ***emit ISAKMP Identification Payload (IPsec DOI):
|    next payload type: ISAKMP_NEXT_ID (0x5)
|    ID type: ID_IPV4_ADDR (0x1)
|    Protocol ID: 6 (0x6)
|    port: 0 (0x0)
| emitting 4 raw bytes of client network into ISAKMP Identification Payload (IPsec DOI)
| client network  c0 01 03 21
| emitting length of ISAKMP Identification Payload (IPsec DOI): 12
| ***emit ISAKMP Identification Payload (IPsec DOI):
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    ID type: ID_IPV4_ADDR (0x1)
|    Protocol ID: 6 (0x6)
|    port: 3 (0x3)
| emitting 4 raw bytes of client network into ISAKMP Identification Payload (IPsec DOI)
| client network  c0 01 02 17
| emitting length of ISAKMP Identification Payload (IPsec DOI): 12
| ***emit ISAKMP NAT-OA Payload:
|    next payload type: ISAKMP_NEXT_NATOA_RFC (0x15)
|    ID type: ID_IPV4_ADDR (0x1)
| emitting 4 raw bytes of NAT-OAi into ISAKMP NAT-OA Payload
| NAT-OAi  c0 01 03 21
| NAT-OAi (S):  c0 01 03 21
| emitting length of ISAKMP NAT-OA Payload: 12
| ***emit ISAKMP NAT-OA Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    ID type: ID_IPV4_ADDR (0x1)
| emitting 4 raw bytes of NAT-OAr into ISAKMP NAT-OA Payload
| NAT-OAr  c0 01 02 17
| NAT-OAr (S):  c0 01 02 17
| emitting length of ISAKMP NAT-OA Payload: 12
| hmac prf: init 0x7fd430c05330
| hmac prf: init symkey symkey 0x7fd42000b9b0 (length 20)
| hmac prf: update
| concat_symkey_bytes merge symkey(0x7fd42000b9b0) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000b9b0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd420010440) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd420010440) bytes(0x7fff61379c40/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420010440) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| hmac prf: update bytes data 0x7fd430c08068 (length 4)
| concat_symkey_bytes merge symkey(0x7fd420007160) bytes(0x7fd430c08068/4) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| bytes:  8b 59 9a 61
| concat_symkey_bytes key(0x7fd42000eab0) length(68) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420007160
| hmac prf: update bytes data 0x7fd42fb9ec54 (length 488)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd42fb9ec54/488) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(68) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  0a 00 00 90  00 00 00 01  00 00 00 01  00 00 00 84
| bytes:  00 03 04 04  05 7b 1c 36  03 00 00 20  00 0c 00 00
| bytes:  80 03 00 0e  80 04 00 04  80 01 00 01  80 02 70 80
| bytes:  80 05 00 02  80 06 00 80  03 00 00 20  01 0c 00 00
| bytes:  80 03 00 0e  80 04 00 04  80 01 00 01  80 02 70 80
| bytes:  80 05 00 01  80 06 00 80  03 00 00 1c  02 03 00 00
| bytes:  80 03 00 0e  80 04 00 04  80 01 00 01  80 02 70 80
| bytes:  80 05 00 02  00 00 00 1c  03 03 00 00  80 03 00 0e
| bytes:  80 04 00 04  80 01 00 01  80 02 70 80  80 05 00 01
| bytes:  04 00 00 24  9b a2 27 ff  20 4d 02 c0  17 a8 14 e4
| bytes:  6a 8d 7a d0  66 28 1b b4  6d e1 fa f0  88 61 7e 11
| bytes:  9a f0 61 ab  05 00 01 04  92 2b 8f 33  c9 6a d9 d5
| bytes:  19 fa 47 fa  4c d8 4d 39  30 b3 7e ee  66 8c 1f 3e
| bytes:  49 c0 1f 18  50 8e 25 c3  87 50 4f b0  f7 65 7f 31
| bytes:  28 3a 97 15  f1 fe 66 af  51 a4 0a 6d  df b0 0e 18
| bytes:  94 01 f8 c0  31 a4 b1 1e  08 fa 8e 3f  2e ea 08 b5
| bytes:  a3 b2 ae 1b  b5 2d f7 3a  91 b4 19 c6  1b 4a 8c 46
| bytes:  d5 e1 77 27  b9 0a d1 df  44 34 7a 17  36 5a bb 3b
| bytes:  55 94 eb 81  fb 7e 01 ff  d9 d5 eb a0  c5 9b c9 ec
| bytes:  a4 d3 dc 48  d7 7c 9a 45  33 da b1 b7  ed 1c cd 5f
| bytes:  d4 8a d5 c0  8b 7b 02 68  a2 8c 5c e6  5e 9d 03 f4
| bytes:  d2 1a c7 0f  18 eb c7 7f  d2 36 00 d1  aa 5e d2 be
| bytes:  45 bf 46 98  3b d9 da d1  d6 c7 bc 6f  1a 9a 23 f8
| bytes:  35 47 65 df  d6 ee 4e 0c  69 f9 cc 32  d4 35 1d 2a
| bytes:  9e e3 04 89  8d 1a 5f a9  c2 f4 14 9a  d4 e3 60 68
| bytes:  9f 17 0a d6  2e c1 36 f2  4d 35 ff 2c  14 95 e2 87
| bytes:  2a 7e e2 6f  0a f4 4f 21  6d b7 59 72  11 70 09 c6
| bytes:  62 6b 1e 68  11 21 ad b1  05 00 00 0c  01 06 00 00
| bytes:  c0 01 03 21  15 00 00 0c  01 06 00 03  c0 01 02 17
| bytes:  15 00 00 0c  01 00 00 00  c0 01 03 21  00 00 00 0c
| bytes:  01 00 00 00  c0 01 02 17
| concat_symkey_bytes key(0x7fd420007160) length(556) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420007160) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420007160) length(556) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420007160
| xor_symkey_chunk merge symkey(0x7fd420010440) bytes(0x7fff61379c20/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420010440) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420007160) symkey(2: 0x7fd42000eab0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420007160) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420013560) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420007160
| prf hashed inner:: free key 0x7fd42000eab0
| prf key: free key 0x7fd420010440
| prf outer hash hash(oakley_sha) symkey(0x7fd420013560) to bytes
| symkey: key(0x7fd420013560) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash  1c 1c c5 0d  5a 2a 6f d7  bb ee 9a 75  9e 8a 94 de
| prf outer hash  5f e9 cb f0
| prf outer: free key 0x7fd420013560
| prf final bytes  1c 1c c5 0d  5a 2a 6f d7  bb ee 9a 75  9e 8a 94 de
| prf final bytes  5f e9 cb f0
| HASH(1) computed:
|   1c 1c c5 0d  5a 2a 6f d7  bb ee 9a 75  9e 8a 94 de
|   5f e9 cb f0
| last Phase 1 IV:  2e 33 34 10  87 3b cc 95  0a b0 8d 3c  21 38 90 43
| current Phase 1 IV:  2e 33 34 10  87 3b cc 95  0a b0 8d 3c  21 38 90 43
| computed Phase 2 IV:
|   5f 67 ac 48  07 ed ac 6d  d4 2e 18 d1  fa a4 28 3f
|   61 a9 11 2b
| encrypting:  01 00 00 18  1c 1c c5 0d  5a 2a 6f d7  bb ee 9a 75
| encrypting:  9e 8a 94 de  5f e9 cb f0  0a 00 00 90  00 00 00 01
| encrypting:  00 00 00 01  00 00 00 84  00 03 04 04  05 7b 1c 36
| encrypting:  03 00 00 20  00 0c 00 00  80 03 00 0e  80 04 00 04
| encrypting:  80 01 00 01  80 02 70 80  80 05 00 02  80 06 00 80
| encrypting:  03 00 00 20  01 0c 00 00  80 03 00 0e  80 04 00 04
| encrypting:  80 01 00 01  80 02 70 80  80 05 00 01  80 06 00 80
| encrypting:  03 00 00 1c  02 03 00 00  80 03 00 0e  80 04 00 04
| encrypting:  80 01 00 01  80 02 70 80  80 05 00 02  00 00 00 1c
| encrypting:  03 03 00 00  80 03 00 0e  80 04 00 04  80 01 00 01
| encrypting:  80 02 70 80  80 05 00 01  04 00 00 24  9b a2 27 ff
| encrypting:  20 4d 02 c0  17 a8 14 e4  6a 8d 7a d0  66 28 1b b4
| encrypting:  6d e1 fa f0  88 61 7e 11  9a f0 61 ab  05 00 01 04
| encrypting:  92 2b 8f 33  c9 6a d9 d5  19 fa 47 fa  4c d8 4d 39
| encrypting:  30 b3 7e ee  66 8c 1f 3e  49 c0 1f 18  50 8e 25 c3
| encrypting:  87 50 4f b0  f7 65 7f 31  28 3a 97 15  f1 fe 66 af
| encrypting:  51 a4 0a 6d  df b0 0e 18  94 01 f8 c0  31 a4 b1 1e
| encrypting:  08 fa 8e 3f  2e ea 08 b5  a3 b2 ae 1b  b5 2d f7 3a
| encrypting:  91 b4 19 c6  1b 4a 8c 46  d5 e1 77 27  b9 0a d1 df
| encrypting:  44 34 7a 17  36 5a bb 3b  55 94 eb 81  fb 7e 01 ff
| encrypting:  d9 d5 eb a0  c5 9b c9 ec  a4 d3 dc 48  d7 7c 9a 45
| encrypting:  33 da b1 b7  ed 1c cd 5f  d4 8a d5 c0  8b 7b 02 68
| encrypting:  a2 8c 5c e6  5e 9d 03 f4  d2 1a c7 0f  18 eb c7 7f
| encrypting:  d2 36 00 d1  aa 5e d2 be  45 bf 46 98  3b d9 da d1
| encrypting:  d6 c7 bc 6f  1a 9a 23 f8  35 47 65 df  d6 ee 4e 0c
| encrypting:  69 f9 cc 32  d4 35 1d 2a  9e e3 04 89  8d 1a 5f a9
| encrypting:  c2 f4 14 9a  d4 e3 60 68  9f 17 0a d6  2e c1 36 f2
| encrypting:  4d 35 ff 2c  14 95 e2 87  2a 7e e2 6f  0a f4 4f 21
| encrypting:  6d b7 59 72  11 70 09 c6  62 6b 1e 68  11 21 ad b1
| encrypting:  05 00 00 0c  01 06 00 00  c0 01 03 21  15 00 00 0c
| encrypting:  01 06 00 03  c0 01 02 17  15 00 00 0c  01 00 00 00
| encrypting:  c0 01 03 21  00 00 00 0c  01 00 00 00  c0 01 02 17
| IV:  5f 67 ac 48  07 ed ac 6d  d4 2e 18 d1  fa a4 28 3f
| IV:  61 a9 11 2b
| unpadded size is: 512
| encrypting 512 using OAKLEY_AES_CBC
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| next IV:  03 e3 59 9e  1c bc 21 47  36 93 ff f4  4e 66 2a 17
| no IKEv1 message padding required
| emitting length of ISAKMP Message: 540
| sending 544 bytes for reply packet from quick_outI1 through eth1:4500 to 192.1.2.23:4500 (using #2)
|   00 00 00 00  16 be dc ea  e2 2b 8c 83  f7 5c b7 35
|   07 e0 34 03  08 10 20 01  8b 59 9a 61  00 00 02 1c
|   1e 26 46 b3  68 9f 63 8a  ce 01 f1 13  b1 3f ec 5d
|   82 8d d8 e9  f6 74 63 c8  2b db 0d 6e  c4 53 d4 e6
|   41 96 70 82  5c 98 cb 79  69 3b 3a 1a  d2 c2 50 4d
|   ac 8f 84 bb  7d 03 ac 57  bd 67 20 e3  68 c7 a8 59
|   db 21 80 6b  f7 bc 27 4e  e3 0a 87 3a  a1 01 ce 77
|   dd f0 d0 1c  d5 74 f1 4b  96 c4 1c a6  ff cd 59 f4
|   20 a6 06 ae  1d a8 b9 ec  3d c0 a1 10  cb 4f 36 e5
|   cb b2 07 25  cc 75 03 78  1e a1 fb 47  63 47 e7 39
|   4d 6e 7b d9  8e 45 60 50  82 d8 f4 a7  d6 4e 6e 11
|   fa a2 6a a0  47 f6 6d 35  69 72 b0 30  1d b6 d0 1c
|   63 ff 7f 4c  9f d9 37 33  19 2b 6e 03  50 77 52 5e
|   7d 68 a0 ad  d2 2c ee c2  f1 f3 0e 8f  d5 1e d7 18
|   00 90 6b a2  b0 2c 73 83  f4 01 9e b9  2b 52 b7 22
|   23 73 1f 80  18 53 d2 91  37 2d 43 e3  39 7e 3d 12
|   dc 0b 2d d0  8a c9 24 36  6e 94 58 71  d3 f8 ab fe
|   e9 a3 8b 03  3b d2 3a 11  69 79 bb 00  70 19 01 3a
|   72 1e 06 65  0e 2f 39 84  d9 92 05 81  13 9c e9 cd
|   fb 9a 2d 26  31 18 fa 55  65 e5 6d 6b  12 b6 e7 33
|   94 2c 45 4f  51 7f e7 d3  68 24 79 17  d1 4a 36 3f
|   66 3c 46 08  9b a9 a3 e2  36 72 01 57  2f 7d cb c7
|   b2 0d 4e 69  f5 42 4f d5  f6 6d 35 11  1b bf 8d 30
|   87 46 96 95  46 cf 86 6e  9a 69 90 18  e6 75 72 6c
|   d3 88 9a 55  ec 70 50 27  b3 e3 a7 23  9a c5 15 60
|   7e 21 55 42  f9 db a4 85  e5 04 40 14  01 c0 47 f8
|   43 b3 4e a6  9d 8d 3b 17  b8 a1 b6 0d  6d de fe 50
|   58 d5 03 87  bd 26 36 dc  d7 44 27 91  17 09 be c5
|   f4 f0 7e 93  92 e1 11 3b  f7 81 45 5f  e8 31 87 ba
|   5f b5 e0 36  aa 74 c8 2d  cb d2 69 3f  06 c6 f1 62
|   f1 00 db 6f  28 51 07 7e  c8 e9 fe 22  9c c5 3d 97
|   c1 5a 94 53  23 f9 19 e2  ba 7f 22 8e  85 c7 6e 65
|   cb 61 aa df  69 0e 41 45  33 8b f5 01  70 41 19 c7
|   03 e3 59 9e  1c bc 21 47  36 93 ff f4  4e 66 2a 17
| state: #2 requesting EVENT_CRYPTO_FAILED to be deleted
| event_schedule_ms called for about 500 ms
| event_schedule_tv called for about 0 seconds and change
| inserting event EVENT_v1_RETRANSMIT, timeout in 0.500000 seconds for #2
| *received 428 bytes from 192.1.2.23:4500 on eth1 (port=4500)
|   16 be dc ea  e2 2b 8c 83  f7 5c b7 35  07 e0 34 03
|   08 10 20 01  8b 59 9a 61  00 00 01 ac  1f 49 50 b9
|   54 66 84 10  e2 60 1d c6  31 b8 cc eb  47 45 87 f9
|   3b 5c c6 00  47 31 6a 4f  93 b6 17 5d  bb 47 86 56
|   18 0a 52 5e  f3 07 2a 0d  2a a0 6e 20  77 85 53 9b
|   92 43 9b 86  21 a8 a7 08  f3 af 49 b4  3c 85 b1 86
|   54 32 1c a9  1c 7c 1a 78  4f 4b 86 20  66 be 60 fa
|   ce 49 50 7a  3f a9 41 af  39 62 a1 60  36 bf b1 65
|   5d 2e 7a 83  d6 21 57 4a  99 1f f6 8d  fd b1 b3 d3
|   18 a4 d8 cf  aa d5 92 c0  af 85 62 e4  00 9e 44 06
|   b6 77 19 c2  79 71 09 62  cc fd 49 b8  ba e5 b2 58
|   d2 ae 53 9a  e8 6c 91 48  c6 3a 1c bb  06 55 53 b4
|   1a 1a aa a6  ca fe 2b d0  65 a3 13 b2  74 86 58 dc
|   4f 25 ae 12  38 21 7a 86  3e 07 4e 0b  35 ab e2 6b
|   d0 9f 00 99  df b0 2d fd  b3 1d 22 9f  ff 81 61 b1
|   4e be 88 5b  0a ce c7 9c  ec 3e fa 25  e4 98 92 5d
|   d4 7c 41 e3  e6 92 c1 e1  05 7b 42 3a  7e 52 66 8b
|   5e 3c dd 59  48 87 3e 4d  b6 e8 b0 79  b7 9b 18 d2
|   6e 25 05 55  60 33 8d 57  26 c1 30 da  aa 4c 44 c6
|   fe d1 a7 59  07 17 1e 15  2a 77 f6 20  6d 51 08 6e
|   0a 9f 03 f8  75 32 f1 6e  7c 0f f5 8c  ec 69 e2 25
|   43 04 64 04  2b 22 28 47  fc 3d d4 29  50 dd f5 96
|   fb bc 1a 66  ae cd 37 ed  98 7d 1d 18  27 b7 2b 86
|   28 e4 13 22  fb b2 b4 2f  84 45 9e d8  9f bb cb 8d
|   81 4f 23 fb  84 45 96 18  69 bb 06 90  3e 9c 4c 5a
|   0d 56 e4 e4  d5 ee 6b ea  51 8e fb 9c  82 2e 73 be
|   96 96 74 20  7d c3 69 a3  d6 41 fd 02
| **parse ISAKMP Message:
|    initiator cookie:
|   16 be dc ea  e2 2b 8c 83
|    responder cookie:
|   f7 5c b7 35  07 e0 34 03
|    next payload type: ISAKMP_NEXT_HASH (0x8)
|    ISAKMP version: ISAKMP Version 1.0 (rfc2407) (0x10)
|    exchange type: ISAKMP_XCHG_QUICK (0x20)
|    flags: ISAKMP_FLAG_v1_ENCRYPTION (0x1)
|    message ID:  8b 59 9a 61
|    length: 428 (0x1ac)
|  processing version=1.0 packet with exchange type=ISAKMP_XCHG_QUICK (32)
| finding hash chain in state hash table
|   ICOOKIE:  16 be dc ea  e2 2b 8c 83
|   RCOOKIE:  f7 5c b7 35  07 e0 34 03
| found hash chain 9
| v1 peer and cookies match on #2, provided msgid 8b599a61 == 8b599a61
| v1 state object #2 found, in STATE_QUICK_I1
| processing connection "north-east-port3"
| #2 state_busy:2286 st != NULL && st->st_calculating == FALSE;
| received encrypted packet from 192.1.2.23:4500
| decrypting 400 bytes using algorithm OAKLEY_AES_CBC
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| decrypted:
|   01 00 00 18  10 e2 82 7e  8a 5f 63 22  0a 10 76 ad
|   ec 3d 2d 96  7b df d4 5c  0a 00 00 38  00 00 00 01
|   00 00 00 01  00 00 00 2c  00 03 04 01  e1 59 0d bc
|   00 00 00 20  00 0c 00 00  80 03 00 0e  80 04 00 04
|   80 01 00 01  80 02 70 80  80 05 00 02  80 06 00 80
|   04 00 00 24  55 64 3d f1  23 20 b4 86  a5 8e 14 58
|   07 93 60 0b  4f bd 79 e2  db 0d 8e c7  1e 80 4a 91
|   68 1c 17 fd  05 00 01 04  30 96 fa 46  ac 93 dd be
|   3b 49 5a 07  6a c6 f2 90  81 30 55 f0  31 06 92 33
|   0c 24 d1 0a  40 8b f7 f0  35 80 8b f4  d5 10 23 6a
|   a2 c9 2b 2c  5e 71 ea ff  ea 69 6f 2b  74 28 3f 10
|   43 77 ca 8f  9d 6a a4 60  cc c8 34 a4  2b 5a e3 ac
|   7e 60 c6 ee  89 53 68 21  28 8b f0 b6  a8 5a 05 39
|   0d 82 23 f3  95 5f 84 c4  c5 2f c3 04  25 df 9b 6e
|   c4 d9 62 c8  32 b0 db 27  2e dd 8c b7  44 5a 77 76
|   8b d6 51 13  fb 5e 73 31  6b 0e 10 8a  87 98 1a ff
|   ac 36 4a f5  22 3e 79 82  37 ae b4 de  d4 55 57 5d
|   59 0c ed 7a  c2 19 a6 43  59 3f a0 12  60 02 23 8a
|   e8 19 aa 91  3c db 57 a8  f4 e4 ba d1  05 12 15 20
|   a3 7c ee ef  08 60 7a eb  fb 81 09 4c  ae 0e cb aa
|   44 44 50 49  26 8e 0c af  33 8b c1 97  f2 fd 5c 20
|   75 eb b2 5b  05 2e 9d ee  99 30 be 39  67 a3 dc fe
|   57 97 90 20  fe d4 65 78  2c 2d 68 06  c0 27 39 c2
|   8f c5 dc ed  9c 93 76 6e  05 00 00 0c  01 06 00 00
|   c0 01 03 21  00 00 00 0c  01 06 00 03  c0 01 02 17
| next IV:  82 2e 73 be  96 96 74 20  7d c3 69 a3  d6 41 fd 02
| got payload 0x100  (ISAKMP_NEXT_HASH) needed: 0x502opt: 0x200030
| ***parse ISAKMP Hash Payload:
|    next payload type: ISAKMP_NEXT_SA (0x1)
|    length: 24 (0x18)
| got payload 0x2  (ISAKMP_NEXT_SA) needed: 0x402opt: 0x200030
| ***parse ISAKMP Security Association Payload:
|    next payload type: ISAKMP_NEXT_NONCE (0xa)
|    length: 56 (0x38)
|    DOI: ISAKMP_DOI_IPSEC (0x1)
| got payload 0x400  (ISAKMP_NEXT_NONCE) needed: 0x400opt: 0x200030
| ***parse ISAKMP Nonce Payload:
|    next payload type: ISAKMP_NEXT_KE (0x4)
|    length: 36 (0x24)
| got payload 0x10  (ISAKMP_NEXT_KE) needed: 0x0opt: 0x200030
| ***parse ISAKMP Key Exchange Payload:
|    next payload type: ISAKMP_NEXT_ID (0x5)
|    length: 260 (0x104)
| got payload 0x20  (ISAKMP_NEXT_ID) needed: 0x0opt: 0x200030
| ***parse ISAKMP Identification Payload (IPsec DOI):
|    next payload type: ISAKMP_NEXT_ID (0x5)
|    length: 12 (0xc)
|    ID type: ID_IPV4_ADDR (0x1)
|    Protocol ID: 6 (0x6)
|    port: 0 (0x0)
|      obj:   c0 01 03 21
| got payload 0x20  (ISAKMP_NEXT_ID) needed: 0x0opt: 0x200030
| ***parse ISAKMP Identification Payload (IPsec DOI):
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    length: 12 (0xc)
|    ID type: ID_IPV4_ADDR (0x1)
|    Protocol ID: 6 (0x6)
|    port: 3 (0x3)
|      obj:   c0 01 02 17
| **emit ISAKMP Message:
|    initiator cookie:
|   16 be dc ea  e2 2b 8c 83
|    responder cookie:
|   f7 5c b7 35  07 e0 34 03
|    next payload type: ISAKMP_NEXT_HASH (0x8)
|    ISAKMP version: ISAKMP Version 1.0 (rfc2407) (0x10)
|    exchange type: ISAKMP_XCHG_QUICK (0x20)
|    flags: ISAKMP_FLAG_v1_ENCRYPTION (0x1)
|    message ID:  8b 59 9a 61
| hmac prf: init 0x7fd430c04cb0
| hmac prf: init symkey symkey 0x7fd42000b9b0 (length 20)
| hmac prf: update
| concat_symkey_bytes merge symkey(0x7fd42000b9b0) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000b9b0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd420013560) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd420013560) bytes(0x7fff6137a5d0/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420013560) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| hmac prf: update bytes data 0x7fd430c08068 (length 4)
| concat_symkey_bytes merge symkey(0x7fd420010440) bytes(0x7fd430c08068/4) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| bytes:  8b 59 9a 61
| concat_symkey_bytes key(0x7fd42000eab0) length(68) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420010440
| hmac prf: update bytes data 0x7fd430c00360 (length 32)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c00360/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(68) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  9b a2 27 ff  20 4d 02 c0  17 a8 14 e4  6a 8d 7a d0
| bytes:  66 28 1b b4  6d e1 fa f0  88 61 7e 11  9a f0 61 ab
| concat_symkey_bytes key(0x7fd420010440) length(100) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: update bytes data 0x7fd430c03a04 (length 376)
| concat_symkey_bytes merge symkey(0x7fd420010440) bytes(0x7fd430c03a04/376) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(100) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  0a 00 00 38  00 00 00 01  00 00 00 01  00 00 00 2c
| bytes:  00 03 04 01  e1 59 0d bc  00 00 00 20  00 0c 00 00
| bytes:  80 03 00 0e  80 04 00 04  80 01 00 01  80 02 70 80
| bytes:  80 05 00 02  80 06 00 80  04 00 00 24  55 64 3d f1
| bytes:  23 20 b4 86  a5 8e 14 58  07 93 60 0b  4f bd 79 e2
| bytes:  db 0d 8e c7  1e 80 4a 91  68 1c 17 fd  05 00 01 04
| bytes:  30 96 fa 46  ac 93 dd be  3b 49 5a 07  6a c6 f2 90
| bytes:  81 30 55 f0  31 06 92 33  0c 24 d1 0a  40 8b f7 f0
| bytes:  35 80 8b f4  d5 10 23 6a  a2 c9 2b 2c  5e 71 ea ff
| bytes:  ea 69 6f 2b  74 28 3f 10  43 77 ca 8f  9d 6a a4 60
| bytes:  cc c8 34 a4  2b 5a e3 ac  7e 60 c6 ee  89 53 68 21
| bytes:  28 8b f0 b6  a8 5a 05 39  0d 82 23 f3  95 5f 84 c4
| bytes:  c5 2f c3 04  25 df 9b 6e  c4 d9 62 c8  32 b0 db 27
| bytes:  2e dd 8c b7  44 5a 77 76  8b d6 51 13  fb 5e 73 31
| bytes:  6b 0e 10 8a  87 98 1a ff  ac 36 4a f5  22 3e 79 82
| bytes:  37 ae b4 de  d4 55 57 5d  59 0c ed 7a  c2 19 a6 43
| bytes:  59 3f a0 12  60 02 23 8a  e8 19 aa 91  3c db 57 a8
| bytes:  f4 e4 ba d1  05 12 15 20  a3 7c ee ef  08 60 7a eb
| bytes:  fb 81 09 4c  ae 0e cb aa  44 44 50 49  26 8e 0c af
| bytes:  33 8b c1 97  f2 fd 5c 20  75 eb b2 5b  05 2e 9d ee
| bytes:  99 30 be 39  67 a3 dc fe  57 97 90 20  fe d4 65 78
| bytes:  2c 2d 68 06  c0 27 39 c2  8f c5 dc ed  9c 93 76 6e
| bytes:  05 00 00 0c  01 06 00 00  c0 01 03 21  00 00 00 0c
| bytes:  01 06 00 03  c0 01 02 17
| concat_symkey_bytes key(0x7fd42000eab0) length(476) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420010440
| hmac prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd42000eab0) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(476) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420010440) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd42000eab0
| xor_symkey_chunk merge symkey(0x7fd420013560) bytes(0x7fff6137a5b0/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420013560) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd42000eab0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd42000eab0) symkey(2: 0x7fd420010440) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd42000eab0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420010440) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420007160) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd42000eab0
| prf hashed inner:: free key 0x7fd420010440
| prf key: free key 0x7fd420013560
| prf outer hash hash(oakley_sha) symkey(0x7fd420007160) to bytes
| symkey: key(0x7fd420007160) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash  10 e2 82 7e  8a 5f 63 22  0a 10 76 ad  ec 3d 2d 96
| prf outer hash  7b df d4 5c
| prf outer: free key 0x7fd420007160
| prf final bytes  10 e2 82 7e  8a 5f 63 22  0a 10 76 ad  ec 3d 2d 96
| prf final bytes  7b df d4 5c
| HASH(2) computed:
|   10 e2 82 7e  8a 5f 63 22  0a 10 76 ad  ec 3d 2d 96
|   7b df d4 5c
| ****parse IPsec DOI SIT:
|    IPsec DOI SIT: SIT_IDENTITY_ONLY (0x1)
| ****parse ISAKMP Proposal Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    length: 44 (0x2c)
|    proposal number: 0 (0x0)
|    protocol ID: PROTO_IPSEC_ESP (0x3)
|    SPI size: 4 (0x4)
|    number of transforms: 1 (0x1)
| parsing 4 raw bytes of ISAKMP Proposal Payload into SPI
| SPI  e1 59 0d bc
| *****parse ISAKMP Transform Payload (ESP):
|    next payload type: ISAKMP_NEXT_NONE (0x0)
|    length: 32 (0x20)
|    ESP transform number: 0 (0x0)
|    ESP transform ID: ESP_AES (0xc)
| ******parse ISAKMP IPsec DOI attribute:
|    af+type: GROUP_DESCRIPTION (0x8003)
|    length/value: 14 (0xe)
|    [14 is OAKLEY_GROUP_MODP2048]
| ******parse ISAKMP IPsec DOI attribute:
|    af+type: ENCAPSULATION_MODE (0x8004)
|    length/value: 4 (0x4)
|    [4 is ENCAPSULATION_MODE_UDP_TRANSPORT_RFC]
| NAT-T RFC: Installing IPsec SA with ENCAP, st->hidden_variables.st_nat_traversal is RFC 3947 (NAT-Traversal)+I am behind NAT
| ******parse ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_TYPE (0x8001)
|    length/value: 1 (0x1)
|    [1 is SA_LIFE_TYPE_SECONDS]
| ******parse ISAKMP IPsec DOI attribute:
|    af+type: SA_LIFE_DURATION (0x8002)
|    length/value: 28800 (0x7080)
| ******parse ISAKMP IPsec DOI attribute:
|    af+type: AUTH_ALGORITHM (0x8005)
|    length/value: 2 (0x2)
|    [2 is AUTH_ALGORITHM_HMAC_SHA1]
| ******parse ISAKMP IPsec DOI attribute:
|    af+type: KEY_LENGTH (0x8006)
|    length/value: 128 (0x80)
| check_kernel_encrypt_alg(12,128): OK
| DH public value received:
|   30 96 fa 46  ac 93 dd be  3b 49 5a 07  6a c6 f2 90
|   81 30 55 f0  31 06 92 33  0c 24 d1 0a  40 8b f7 f0
|   35 80 8b f4  d5 10 23 6a  a2 c9 2b 2c  5e 71 ea ff
|   ea 69 6f 2b  74 28 3f 10  43 77 ca 8f  9d 6a a4 60
|   cc c8 34 a4  2b 5a e3 ac  7e 60 c6 ee  89 53 68 21
|   28 8b f0 b6  a8 5a 05 39  0d 82 23 f3  95 5f 84 c4
|   c5 2f c3 04  25 df 9b 6e  c4 d9 62 c8  32 b0 db 27
|   2e dd 8c b7  44 5a 77 76  8b d6 51 13  fb 5e 73 31
|   6b 0e 10 8a  87 98 1a ff  ac 36 4a f5  22 3e 79 82
|   37 ae b4 de  d4 55 57 5d  59 0c ed 7a  c2 19 a6 43
|   59 3f a0 12  60 02 23 8a  e8 19 aa 91  3c db 57 a8
|   f4 e4 ba d1  05 12 15 20  a3 7c ee ef  08 60 7a eb
|   fb 81 09 4c  ae 0e cb aa  44 44 50 49  26 8e 0c af
|   33 8b c1 97  f2 fd 5c 20  75 eb b2 5b  05 2e 9d ee
|   99 30 be 39  67 a3 dc fe  57 97 90 20  fe d4 65 78
|   2c 2d 68 06  c0 27 39 c2  8f c5 dc ed  9c 93 76 6e
| started looking for secret for @north->@east of kind PPK_PSK
| actually looking for secret for @north->@east of kind PPK_PSK
| line 1: key type PPK_PSK(@north) to type PPK_RSA
| concluding with best_match=0 best=(nil) (lineno=-1)
| Copying DH pub key pointer to be sent to a thread helper
| crypto helper 0: pcw_work: 0
| asking crypto helper 0 to do compute dh (V1 Phase 2 PFS); request ID 4 (len=2776, pcw_work=0)
| crypto helper 0 read fd: 12
| crypto helper 0 doing compute dh (V1 Phase 2 PFS); request ID 4
| peer's g:   30 96 fa 46  ac 93 dd be  3b 49 5a 07  6a c6 f2 90
| peer's g:   81 30 55 f0  31 06 92 33  0c 24 d1 0a  40 8b f7 f0
| peer's g:   35 80 8b f4  d5 10 23 6a  a2 c9 2b 2c  5e 71 ea ff
| peer's g:   ea 69 6f 2b  74 28 3f 10  43 77 ca 8f  9d 6a a4 60
| peer's g:   cc c8 34 a4  2b 5a e3 ac  7e 60 c6 ee  89 53 68 21
| peer's g:   28 8b f0 b6  a8 5a 05 39  0d 82 23 f3  95 5f 84 c4
| peer's g:   c5 2f c3 04  25 df 9b 6e  c4 d9 62 c8  32 b0 db 27
| peer's g:   2e dd 8c b7  44 5a 77 76  8b d6 51 13  fb 5e 73 31
| peer's g:   6b 0e 10 8a  87 98 1a ff  ac 36 4a f5  22 3e 79 82
| peer's g:   37 ae b4 de  d4 55 57 5d  59 0c ed 7a  c2 19 a6 43
| peer's g:   59 3f a0 12  60 02 23 8a  e8 19 aa 91  3c db 57 a8
| peer's g:   f4 e4 ba d1  05 12 15 20  a3 7c ee ef  08 60 7a eb
| peer's g:   fb 81 09 4c  ae 0e cb aa  44 44 50 49  26 8e 0c af
| peer's g:   33 8b c1 97  f2 fd 5c 20  75 eb b2 5b  05 2e 9d ee
| peer's g:   99 30 be 39  67 a3 dc fe  57 97 90 20  fe d4 65 78
| peer's g:   2c 2d 68 06  c0 27 39 c2  8f c5 dc ed  9c 93 76 6e
| Started DH shared-secret computation in NSS:
| crypto helper 0 finished compute dh (V1 Phase 2 PFS); request ID 4 time elapsed 1397 usec
| #2 send_crypto_helper_request:613 st->st_calculating = TRUE;
| state: #2 requesting EVENT_v1_RETRANSMIT to be deleted
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_CRYPTO_FAILED, timeout in 60.000000 seconds for #2
| complete v1 state transition with STF_SUSPEND
| crypto helper 0 has finished work (pcw_work now 1)
| crypto helper 0 replies to request ID 4
| calling continuation function 0x7fd42f8bf870
| quick_inR1_outI2_continue for #2: calculated ke+nonce, calculating DH
| processing connection "north-east-port3"
| #2 quick_inR1_outI2_continue:2517 st->st_calculating = FALSE;
| NAT-Traversal: received 0 NAT-OA.
| our client is 192.1.3.33
| our client protocol/port is 6/0
| peer client is 192.1.2.23
| peer client protocol/port is 6/3
| ***emit ISAKMP Hash Payload:
|    next payload type: ISAKMP_NEXT_NONE (0x0)
| emitting 20 zero bytes of HASH into ISAKMP Hash Payload
| emitting length of ISAKMP Hash Payload: 24
| hmac prf: init 0x7fd430c04cb0
| hmac prf: init symkey symkey 0x7fd42000b9b0 (length 20)
| hmac prf: update
| concat_symkey_bytes merge symkey(0x7fd42000b9b0) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000b9b0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd420013560) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd420013560) bytes(0x7fff61379a80/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420013560) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| hmac prf: update bytes data 0x7fd42f944c40 (length 1)
| concat_symkey_bytes merge symkey(0x7fd420010440) bytes(0x7fd42f944c40/1) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| bytes:  00
| concat_symkey_bytes key(0x7fd42000eab0) length(65) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420010440
| hmac prf: update bytes data 0x7fd430c08068 (length 4)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c08068/4) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(65) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  8b 59 9a 61
| concat_symkey_bytes key(0x7fd420010440) length(69) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: update bytes data 0x7fd430c00360 (length 32)
| concat_symkey_bytes merge symkey(0x7fd420010440) bytes(0x7fd430c00360/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(69) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  9b a2 27 ff  20 4d 02 c0  17 a8 14 e4  6a 8d 7a d0
| bytes:  66 28 1b b4  6d e1 fa f0  88 61 7e 11  9a f0 61 ab
| concat_symkey_bytes key(0x7fd42000eab0) length(101) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420010440
| hmac prf: update bytes data 0x7fd430c04130 (length 32)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c04130/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(101) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  55 64 3d f1  23 20 b4 86  a5 8e 14 58  07 93 60 0b
| bytes:  4f bd 79 e2  db 0d 8e c7  1e 80 4a 91  68 1c 17 fd
| concat_symkey_bytes key(0x7fd420010440) length(133) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420010440) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(133) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420010440
| xor_symkey_chunk merge symkey(0x7fd420013560) bytes(0x7fff61379a60/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420013560) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420010440) symkey(2: 0x7fd42000eab0) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd42000eab0) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420011cd0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420010440
| prf hashed inner:: free key 0x7fd42000eab0
| prf key: free key 0x7fd420013560
| prf outer hash hash(oakley_sha) symkey(0x7fd420011cd0) to bytes
| symkey: key(0x7fd420011cd0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash  2d a1 1a 30  b5 b7 48 8a  dd 86 03 1d  bc e1 9b a4
| prf outer hash  de 52 f5 c9
| prf outer: free key 0x7fd420011cd0
| prf final bytes  2d a1 1a 30  b5 b7 48 8a  dd 86 03 1d  bc e1 9b a4
| prf final bytes  de 52 f5 c9
| HASH(3) computed:  2d a1 1a 30  b5 b7 48 8a  dd 86 03 1d  bc e1 9b a4
| HASH(3) computed:  de 52 f5 c9
| compute_proto_keymat:needed_len (after ESP enc)=16
| compute_proto_keymat:needed_len (after ESP auth)=36
| hmac prf: init 0x7fd430c04cb0
| hmac prf: init symkey symkey 0x7fd42000a130 (length 20)
| hmac prf: update
| concat_symkey_bytes merge symkey(0x7fd42000a130) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000a130) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd420011cd0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd420011cd0) bytes(0x7fff61379a20/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420011cd0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420013560) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| hmac prf: init 0x7fd430c05830
| hmac prf: init symkey symkey 0x7fd42000a130 (length 20)
| hmac prf: update
| concat_symkey_bytes merge symkey(0x7fd42000a130) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000a130) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd42000eab0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd42000eab0) bytes(0x7fff61379a20/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000eab0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| hmac prf: update symkey g^xy 0x7fd420007160 (length 256)
| concat: merge symkey(1: 0x7fd420013560) symkey(2: 0x7fd420007160) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420013560) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420007160) length(256) type/mechanism(CONCATENATE_DATA_AND_BASE 0x00000363)
| concat: key(0x7fd430c0b050) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420013560
| hmac prf: update symkey g^xy 0x7fd420007160 (length 256)
| concat: merge symkey(1: 0x7fd420010440) symkey(2: 0x7fd420007160) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420007160) length(256) type/mechanism(CONCATENATE_DATA_AND_BASE 0x00000363)
| concat: key(0x7fd420013560) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420010440
| hmac prf: update bytes data 0x7fff61379b0c (length 1)
| concat_symkey_bytes merge symkey(0x7fd430c0b050) bytes(0x7fff61379b0c/1) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430c0b050) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  03
| concat_symkey_bytes key(0x7fd420010440) length(321) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd430c0b050
| hmac prf: update bytes data 0x7fff61379b0c (length 1)
| concat_symkey_bytes merge symkey(0x7fd420013560) bytes(0x7fff61379b0c/1) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(320) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  03
| concat_symkey_bytes key(0x7fd430c0b050) length(321) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420013560
| hmac prf: update bytes data 0x7fd430c07f18 (length 4)
| concat_symkey_bytes merge symkey(0x7fd420010440) bytes(0x7fd430c07f18/4) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(321) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  05 7b 1c 36
| concat_symkey_bytes key(0x7fd420013560) length(325) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420010440
| hmac prf: update bytes data 0x7fd430c07f00 (length 4)
| concat_symkey_bytes merge symkey(0x7fd430c0b050) bytes(0x7fd430c07f00/4) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430c0b050) length(321) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  e1 59 0d bc
| concat_symkey_bytes key(0x7fd420010440) length(325) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd430c0b050
| hmac prf: update bytes data 0x7fd430c00360 (length 32)
| concat_symkey_bytes merge symkey(0x7fd420013560) bytes(0x7fd430c00360/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(325) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  9b a2 27 ff  20 4d 02 c0  17 a8 14 e4  6a 8d 7a d0
| bytes:  66 28 1b b4  6d e1 fa f0  88 61 7e 11  9a f0 61 ab
| concat_symkey_bytes key(0x7fd430c0b050) length(357) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420013560
| hmac prf: update bytes data 0x7fd430c00360 (length 32)
| concat_symkey_bytes merge symkey(0x7fd420010440) bytes(0x7fd430c00360/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(325) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  9b a2 27 ff  20 4d 02 c0  17 a8 14 e4  6a 8d 7a d0
| bytes:  66 28 1b b4  6d e1 fa f0  88 61 7e 11  9a f0 61 ab
| concat_symkey_bytes key(0x7fd420013560) length(357) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420010440
| hmac prf: update bytes data 0x7fd430c04130 (length 32)
| concat_symkey_bytes merge symkey(0x7fd430c0b050) bytes(0x7fd430c04130/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430c0b050) length(357) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  55 64 3d f1  23 20 b4 86  a5 8e 14 58  07 93 60 0b
| bytes:  4f bd 79 e2  db 0d 8e c7  1e 80 4a 91  68 1c 17 fd
| concat_symkey_bytes key(0x7fd420010440) length(389) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd430c0b050
| hmac prf: update bytes data 0x7fd430c04130 (length 32)
| concat_symkey_bytes merge symkey(0x7fd420013560) bytes(0x7fd430c04130/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(357) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  55 64 3d f1  23 20 b4 86  a5 8e 14 58  07 93 60 0b
| bytes:  4f bd 79 e2  db 0d 8e c7  1e 80 4a 91  68 1c 17 fd
| concat_symkey_bytes key(0x7fd430c0b050) length(389) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420013560
| hmac prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd420010440) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420010440) length(389) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420013560) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd420010440
| xor_symkey_chunk merge symkey(0x7fd420011cd0) bytes(0x7fff61379a00/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420011cd0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd420010440) symkey(2: 0x7fd420013560) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420010440) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420013560) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd430c0c820) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420010440
| prf hashed inner:: free key 0x7fd420013560
| prf key: free key 0x7fd420011cd0
| prf outer hash hash(oakley_sha) symkey(0x7fd430c0c820) to bytes
| symkey: key(0x7fd430c0c820) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash  19 b3 21 02  92 f6 52 4e  bc 5b e5 bc  5f ce 2d b8
| prf outer hash  d4 6f 89 77
| prf outer: free key 0x7fd430c0c820
| prf final bytes  19 b3 21 02  92 f6 52 4e  bc 5b e5 bc  5f ce 2d b8
| prf final bytes  d4 6f 89 77
| hmac prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd430c0b050) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430c0b050) length(389) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd430c0c820) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd430c0b050
| xor_symkey_chunk merge symkey(0x7fd42000eab0) bytes(0x7fff61379a00/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd42000eab0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd430c0b050) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd430c0b050) symkey(2: 0x7fd430c0c820) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd430c0b050) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd430c0c820) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420011cd0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd430c0b050
| prf hashed inner:: free key 0x7fd430c0c820
| prf key: free key 0x7fd42000eab0
| prf outer hash hash(oakley_sha) symkey(0x7fd420011cd0) to bytes
| symkey: key(0x7fd420011cd0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash  a3 ce 66 59  49 34 c5 23  03 b3 f2 b0  92 3a 14 10
| prf outer hash  08 97 27 4d
| prf outer: free key 0x7fd420011cd0
| prf final bytes  a3 ce 66 59  49 34 c5 23  03 b3 f2 b0  92 3a 14 10
| prf final bytes  08 97 27 4d
| hmac prf: init 0x7fd430c05830
| hmac prf: init symkey symkey 0x7fd42000a130 (length 20)
| hmac prf: update
| concat_symkey_bytes merge symkey(0x7fd42000a130) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000a130) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd420011cd0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd420011cd0) bytes(0x7fff61379a20/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420011cd0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd42000eab0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| hmac prf: init 0x7fd430c04cb0
| hmac prf: init symkey symkey 0x7fd42000a130 (length 20)
| hmac prf: update
| concat_symkey_bytes merge symkey(0x7fd42000a130) bytes(0x7fd42fb97de0/44) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000a130) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
| bytes:  00 00 00 00  00 00 00 00  00 00 00 00
| concat_symkey_bytes key(0x7fd430c0c820) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| xor_symkey_chunk merge symkey(0x7fd430c0c820) bytes(0x7fff61379a20/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd430c0c820) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| bytes:  36 36 36 36  36 36 36 36  36 36 36 36  36 36 36 36
| xor_symkey_chunk key(0x7fd430c0b050) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| hmac prf: update bytes data 0x7fd430c05870 (length 20)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c05870/20) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| bytes:  19 b3 21 02  92 f6 52 4e  bc 5b e5 bc  5f ce 2d b8
| bytes:  d4 6f 89 77
| concat_symkey_bytes key(0x7fd420013560) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: update bytes data 0x7fd430c0b020 (length 20)
| concat_symkey_bytes merge symkey(0x7fd430c0b050) bytes(0x7fd430c0b020/20) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430c0b050) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| bytes:  a3 ce 66 59  49 34 c5 23  03 b3 f2 b0  92 3a 14 10
| bytes:  08 97 27 4d
| concat_symkey_bytes key(0x7fd42000eab0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd430c0b050
| hmac prf: update symkey g^xy 0x7fd420007160 (length 256)
| concat: merge symkey(1: 0x7fd420013560) symkey(2: 0x7fd420007160) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd420013560) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| symkey 2: key(0x7fd420007160) length(256) type/mechanism(CONCATENATE_DATA_AND_BASE 0x00000363)
| concat: key(0x7fd430c0b050) length(340) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd420013560
| hmac prf: update symkey g^xy 0x7fd420007160 (length 256)
| concat: merge symkey(1: 0x7fd42000eab0) symkey(2: 0x7fd420007160) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd42000eab0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| symkey 2: key(0x7fd420007160) length(256) type/mechanism(CONCATENATE_DATA_AND_BASE 0x00000363)
| concat: key(0x7fd420013560) length(340) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd42000eab0
| hmac prf: update bytes data 0x7fff61379b0c (length 1)
| concat_symkey_bytes merge symkey(0x7fd430c0b050) bytes(0x7fff61379b0c/1) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430c0b050) length(340) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  03
| concat_symkey_bytes key(0x7fd42000eab0) length(341) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd430c0b050
| hmac prf: update bytes data 0x7fff61379b0c (length 1)
| concat_symkey_bytes merge symkey(0x7fd420013560) bytes(0x7fff61379b0c/1) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(340) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  03
| concat_symkey_bytes key(0x7fd430c0b050) length(341) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420013560
| hmac prf: update bytes data 0x7fd430c07f18 (length 4)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c07f18/4) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(341) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  05 7b 1c 36
| concat_symkey_bytes key(0x7fd420013560) length(345) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: update bytes data 0x7fd430c07f00 (length 4)
| concat_symkey_bytes merge symkey(0x7fd430c0b050) bytes(0x7fd430c07f00/4) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430c0b050) length(341) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  e1 59 0d bc
| concat_symkey_bytes key(0x7fd42000eab0) length(345) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd430c0b050
| hmac prf: update bytes data 0x7fd430c00360 (length 32)
| concat_symkey_bytes merge symkey(0x7fd420013560) bytes(0x7fd430c00360/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(345) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  9b a2 27 ff  20 4d 02 c0  17 a8 14 e4  6a 8d 7a d0
| bytes:  66 28 1b b4  6d e1 fa f0  88 61 7e 11  9a f0 61 ab
| concat_symkey_bytes key(0x7fd430c0b050) length(377) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420013560
| hmac prf: update bytes data 0x7fd430c00360 (length 32)
| concat_symkey_bytes merge symkey(0x7fd42000eab0) bytes(0x7fd430c00360/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(345) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  9b a2 27 ff  20 4d 02 c0  17 a8 14 e4  6a 8d 7a d0
| bytes:  66 28 1b b4  6d e1 fa f0  88 61 7e 11  9a f0 61 ab
| concat_symkey_bytes key(0x7fd420013560) length(377) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd42000eab0
| hmac prf: update bytes data 0x7fd430c04130 (length 32)
| concat_symkey_bytes merge symkey(0x7fd430c0b050) bytes(0x7fd430c04130/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430c0b050) length(377) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  55 64 3d f1  23 20 b4 86  a5 8e 14 58  07 93 60 0b
| bytes:  4f bd 79 e2  db 0d 8e c7  1e 80 4a 91  68 1c 17 fd
| concat_symkey_bytes key(0x7fd42000eab0) length(409) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd430c0b050
| hmac prf: update bytes data 0x7fd430c04130 (length 32)
| concat_symkey_bytes merge symkey(0x7fd420013560) bytes(0x7fd430c04130/32) - derive(CONCATENATE_BASE_AND_DATA) target(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd420013560) length(377) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  55 64 3d f1  23 20 b4 86  a5 8e 14 58  07 93 60 0b
| bytes:  4f bd 79 e2  db 0d 8e c7  1e 80 4a 91  68 1c 17 fd
| concat_symkey_bytes key(0x7fd430c0b050) length(409) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_bytes: free key 0x7fd420013560
| hmac prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd42000eab0) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd42000eab0) length(409) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420013560) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd42000eab0
| xor_symkey_chunk merge symkey(0x7fd420011cd0) bytes(0x7fff61379a00/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd420011cd0) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd42000eab0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd42000eab0) symkey(2: 0x7fd420013560) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd42000eab0) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420013560) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420010440) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd42000eab0
| prf hashed inner:: free key 0x7fd420013560
| prf key: free key 0x7fd420011cd0
| prf outer hash hash(oakley_sha) symkey(0x7fd420010440) to bytes
| symkey: key(0x7fd420010440) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash  97 09 b1 65  99 be 88 5f  70 8f 40 b7  58 0c 0f 0c
| prf outer hash  69 42 a2 ed
| prf outer: free key 0x7fd420010440
| prf final bytes  97 09 b1 65  99 be 88 5f  70 8f 40 b7  58 0c 0f 0c
| prf final bytes  69 42 a2 ed
| hmac prf: final
| prf inner hash: hash(oakley_sha) symkey(0x7fd430c0b050) to symkey - derive(SHA1_KEY_DERIVATION)
| symkey: key(0x7fd430c0b050) length(409) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf inner hash: key(0x7fd420010440) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| prf inner:: free key 0x7fd430c0b050
| xor_symkey_chunk merge symkey(0x7fd430c0c820) bytes(0x7fff61379a00/64) - derive(XOR_BASE_AND_DATA) target(CONCATENATE_BASE_AND_DATA)
| symkey: key(0x7fd430c0c820) length(64) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| bytes:  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c  5c 5c 5c 5c
| xor_symkey_chunk key(0x7fd430c0b050) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| concat: merge symkey(1: 0x7fd430c0b050) symkey(2: 0x7fd420010440) - derive(CONCATENATE_BASE_AND_KEY) target(SHA1_KEY_DERIVATION)
| symkey 1: key(0x7fd430c0b050) length(64) type/mechanism(CONCATENATE_BASE_AND_DATA 0x00000362)
| symkey 2: key(0x7fd420010440) length(20) type/mechanism(CONCATENATE_BASE_AND_KEY 0x00000360)
| concat: key(0x7fd420011cd0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| append_symkey_symkey: free key 0x7fd430c0b050
| prf hashed inner:: free key 0x7fd420010440
| prf key: free key 0x7fd430c0c820
| prf outer hash hash(oakley_sha) symkey(0x7fd420011cd0) to bytes
| symkey: key(0x7fd420011cd0) length(84) type/mechanism(SHA1_KEY_DERIVATION 0x00000392)
| prf outer hash  ed 97 88 eb  51 80 48 be  ac ec c5 80  60 16 54 07
| prf outer hash  ee 78 91 55
| prf outer: free key 0x7fd420011cd0
| prf final bytes  ed 97 88 eb  51 80 48 be  ac ec c5 80  60 16 54 07
| prf final bytes  ee 78 91 55
| ESP KEYMAT
|   KEYMAT computed:  19 b3 21 02  92 f6 52 4e  bc 5b e5 bc  5f ce 2d b8
|   KEYMAT computed:  d4 6f 89 77  97 09 b1 65  99 be 88 5f  70 8f 40 b7
|   KEYMAT computed:  58 0c 0f 0c
|   Peer KEYMAT computed:
|   a3 ce 66 59  49 34 c5 23  03 b3 f2 b0  92 3a 14 10
|   08 97 27 4d  ed 97 88 eb  51 80 48 be  ac ec c5 80
|   60 16 54 07
| install_ipsec_sa() for #2: inbound and outbound
| could_route called for north-east-port3 (kind=CK_PERMANENT)
|  conn north-east-port3 mark 0/0000000000, 0/0000000000 vs
|  conn north-east-port3 mark 0/0000000000, 0/0000000000
|  conn north-east-port3 mark 0/0000000000, 0/0000000000 vs
|  conn north-east-pass mark 0/0000000000, 0/0000000000
| route owner of "north-east-port3" unrouted: NULL; eroute owner: NULL
| looking for alg with transid: 12 keylen: 128 auth: 2
| checking transid: 11 keylen: 0 auth: 1
| checking transid: 11 keylen: 0 auth: 2
| checking transid: 3 keylen: 24 auth: 0
| checking transid: 3 keylen: 24 auth: 1
| checking transid: 3 keylen: 24 auth: 2
| checking transid: 12 keylen: 16 auth: 0
| checking transid: 12 keylen: 16 auth: 1
| checking transid: 12 keylen: 16 auth: 2
| st->st_esp.keymat_len=36 is key_len=16 + authkeylen=20
| setting IPsec SA replay-window to 32
| ESP enckey:  a3 ce 66 59  49 34 c5 23  03 b3 f2 b0  92 3a 14 10
| ESP authkey:  08 97 27 4d  ed 97 88 eb  51 80 48 be  ac ec c5 80
| ESP authkey:  60 16 54 07
| netlink: enabling transport mode
| netlink: setting IPsec SA replay-window to 32 using old-style req
| set up outgoing SA, ref=0/4294901761
| looking for alg with transid: 12 keylen: 128 auth: 2
| checking transid: 11 keylen: 0 auth: 1
| checking transid: 11 keylen: 0 auth: 2
| checking transid: 3 keylen: 24 auth: 0
| checking transid: 3 keylen: 24 auth: 1
| checking transid: 3 keylen: 24 auth: 2
| checking transid: 12 keylen: 16 auth: 0
| checking transid: 12 keylen: 16 auth: 1
| checking transid: 12 keylen: 16 auth: 2
| st->st_esp.keymat_len=36 is key_len=16 + authkeylen=20
| setting IPsec SA replay-window to 32
| ESP enckey:  19 b3 21 02  92 f6 52 4e  bc 5b e5 bc  5f ce 2d b8
| ESP authkey:  d4 6f 89 77  97 09 b1 65  99 be 88 5f  70 8f 40 b7
| ESP authkey:  58 0c 0f 0c
| netlink: enabling transport mode
| netlink: setting IPsec SA replay-window to 32 using old-style req
| add inbound eroute 192.1.2.23/32:3 --6-> 192.1.3.33/32:0 => esp.10000@192.1.3.33 (raw_eroute)
| satype(3) is not used in netlink_raw_eroute.
| netlink_raw_eroute: using host address instead of client subnet
| raw_eroute result=success
| set up incoming SA, ref=0/4294901761
| sr for #2: unrouted
|  conn north-east-port3 mark 0/0000000000, 0/0000000000 vs
|  conn north-east-port3 mark 0/0000000000, 0/0000000000
|  conn north-east-port3 mark 0/0000000000, 0/0000000000 vs
|  conn north-east-pass mark 0/0000000000, 0/0000000000
| route owner of "north-east-port3" unrouted: NULL; eroute owner: NULL
| route_and_eroute with c: north-east-port3 (next: none) ero:null esr:{(nil)} ro:null rosr:{(nil)} and state: #2
| eroute_connection add eroute 192.1.3.33/32:0 --6-> 192.1.2.23/32:3 => esp.e1590dbc@192.1.2.23 (raw_eroute)
| satype(3) is not used in netlink_raw_eroute.
| netlink_raw_eroute: using host address instead of client subnet
| raw_eroute result=success
| command executing up-host
| get esp.e1590dbc@192.1.2.23
| get esp.57b1c36@192.1.3.33
| trusted_ca_nss: trustee A = '(empty)'
| trusted_ca_nss: trustor B = '(empty)'
| executing up-host: PLUTO_VERB='up-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-port3' PLUTO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUTO_MY_ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33' PLUTO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='6' PLUTO_SA_REQID='16388' PLUTO_SA_TYPE='ESP' PLUTO_PEER='192.1.2.23' PLUTO_PEER_ID='@east' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' PLUTO_PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='3' PLUTO_PEER_PROTOCOL='6' PLUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='1464131717' PLUTO_CONN_POLICY='RSASIG+ENCRYPT+PFS+UP+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO' PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILED=0 PLUTO_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLUTO_PEER_BANNER='' PLUTO_NM_CONFIGURED='0' PLUTO_INBYTES='0' PLUTO_OUTBYTES='0' VTI_IFACE='' VTI_ROUTING='no' ipsec _updown 2>&
| popen cmd is 1002 chars long
| cmd(   0):PLUTO_VERB='up-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-port3' PLU:
| cmd(  80):TO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUTO_MY_:
| cmd( 160):ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33' PLU:
| cmd( 240):TO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='6' PLUT:
| cmd( 320):O_SA_REQID='16388' PLUTO_SA_TYPE='ESP' PLUTO_PEER='192.1.2.23' PLUTO_PEER_ID='@e:
| cmd( 400):ast' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' PLUTO_:
| cmd( 480):PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='3' PLUTO_PEER_PROTOCOL='6' P:
| cmd( 560):LUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='1464131717' PLUTO_CONN_POLIC:
| cmd( 640):Y='RSASIG+ENCRYPT+PFS+UP+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_:
| cmd( 720):NO' PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILED=0 P:
| cmd( 800):LUTO_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLUTO_PE:
| cmd( 880):ER_BANNER='' PLUTO_NM_CONFIGURED='0' PLUTO_INBYTES='0' PLUTO_OUTBYTES='0' VTI_IF:
| cmd( 960):ACE='' VTI_ROUTING='no' ipsec _updown 2>&1:
| route_and_eroute: firewall_notified: true
| command executing prepare-host
| get esp.e1590dbc@192.1.2.23
| get esp.57b1c36@192.1.3.33
| trusted_ca_nss: trustee A = '(empty)'
| trusted_ca_nss: trustor B = '(empty)'
| executing prepare-host: PLUTO_VERB='prepare-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-port3' PLUTO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUTO_MY_ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33' PLUTO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='6' PLUTO_SA_REQID='16388' PLUTO_SA_TYPE='ESP' PLUTO_PEER='192.1.2.23' PLUTO_PEER_ID='@east' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' PLUTO_PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='3' PLUTO_PEER_PROTOCOL='6' PLUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='1464131717' PLUTO_CONN_POLICY='RSASIG+ENCRYPT+PFS+UP+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO' PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILED=0 PLUTO_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLUTO_PEER_BANNER='' PLUTO_NM_CONFIGURED='0' PLUTO_INBYTES='0' PLUTO_OUTBYTES='0' VTI_IFACE='' VTI_ROUTING='no' ipsec _
| popen cmd is 1007 chars long
| cmd(   0):PLUTO_VERB='prepare-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-port3:
| cmd(  80):' PLUTO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUT:
| cmd( 160):O_MY_ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33:
| cmd( 240):' PLUTO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='6':
| cmd( 320): PLUTO_SA_REQID='16388' PLUTO_SA_TYPE='ESP' PLUTO_PEER='192.1.2.23' PLUTO_PEER_I:
| cmd( 400):D='@east' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' P:
| cmd( 480):LUTO_PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='3' PLUTO_PEER_PROTOCOL=:
| cmd( 560):'6' PLUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='1464131717' PLUTO_CONN_:
| cmd( 640):POLICY='RSASIG+ENCRYPT+PFS+UP+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW:
| cmd( 720):+ESN_NO' PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILE:
| cmd( 800):D=0 PLUTO_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLU:
| cmd( 880):TO_PEER_BANNER='' PLUTO_NM_CONFIGURED='0' PLUTO_INBYTES='0' PLUTO_OUTBYTES='0' V:
| cmd( 960):TI_IFACE='' VTI_ROUTING='no' ipsec _updown 2>&1:
| command executing route-host
| get esp.e1590dbc@192.1.2.23
| get esp.57b1c36@192.1.3.33
| trusted_ca_nss: trustee A = '(empty)'
| trusted_ca_nss: trustor B = '(empty)'
| executing route-host: PLUTO_VERB='route-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-port3' PLUTO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUTO_MY_ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33' PLUTO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='6' PLUTO_SA_REQID='16388' PLUTO_SA_TYPE='ESP' PLUTO_PEER='192.1.2.23' PLUTO_PEER_ID='@east' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' PLUTO_PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='3' PLUTO_PEER_PROTOCOL='6' PLUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='1464131717' PLUTO_CONN_POLICY='RSASIG+ENCRYPT+PFS+UP+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+ESN_NO' PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILED=0 PLUTO_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLUTO_PEER_BANNER='' PLUTO_NM_CONFIGURED='0' PLUTO_INBYTES='0' PLUTO_OUTBYTES='0' VTI_IFACE='' VTI_ROUTING='no' ipsec _updo
| popen cmd is 1005 chars long
| cmd(   0):PLUTO_VERB='route-host' PLUTO_VERSION='2.0' PLUTO_CONNECTION='north-east-port3' :
| cmd(  80):PLUTO_INTERFACE='eth1' PLUTO_NEXT_HOP='192.1.3.254' PLUTO_ME='192.1.3.33' PLUTO_:
| cmd( 160):MY_ID='@north' PLUTO_MY_CLIENT='192.1.3.33/32' PLUTO_MY_CLIENT_NET='192.1.3.33' :
| cmd( 240):PLUTO_MY_CLIENT_MASK='255.255.255.255' PLUTO_MY_PORT='0' PLUTO_MY_PROTOCOL='6' P:
| cmd( 320):LUTO_SA_REQID='16388' PLUTO_SA_TYPE='ESP' PLUTO_PEER='192.1.2.23' PLUTO_PEER_ID=:
| cmd( 400):'@east' PLUTO_PEER_CLIENT='192.1.2.23/32' PLUTO_PEER_CLIENT_NET='192.1.2.23' PLU:
| cmd( 480):TO_PEER_CLIENT_MASK='255.255.255.255' PLUTO_PEER_PORT='3' PLUTO_PEER_PROTOCOL='6:
| cmd( 560):' PLUTO_PEER_CA='' PLUTO_STACK='netkey' PLUTO_ADDTIME='1464131717' PLUTO_CONN_PO:
| cmd( 640):LICY='RSASIG+ENCRYPT+PFS+UP+IKEV1_ALLOW+IKEV2_ALLOW+SAREF_TRACK+IKE_FRAG_ALLOW+E:
| cmd( 720):SN_NO' PLUTO_CONN_KIND='CK_PERMANENT' PLUTO_CONN_ADDRFAMILY='ipv4' XAUTH_FAILED=:
| cmd( 800):0 PLUTO_IS_PEER_CISCO='0' PLUTO_PEER_DNS_INFO='' PLUTO_PEER_DOMAIN_INFO='' PLUTO:
| cmd( 880):_PEER_BANNER='' PLUTO_NM_CONFIGURED='0' PLUTO_INBYTES='0' PLUTO_OUTBYTES='0' VTI:
| cmd( 960):_IFACE='' VTI_ROUTING='no' ipsec _updown 2>&1:
| route_and_eroute: instance "north-east-port3", setting eroute_owner {spd=0x7fd430c00508,sr=0x7fd430c00508} to #2 (was #0) (newest_ipsec_sa=#0)
| encrypting:  00 00 00 18  2d a1 1a 30  b5 b7 48 8a  dd 86 03 1d
| encrypting:  bc e1 9b a4  de 52 f5 c9
| IV:  82 2e 73 be  96 96 74 20  7d c3 69 a3  d6 41 fd 02
| unpadded size is: 24
| emitting 8 zero bytes of encryption padding into ISAKMP Message
| encrypting 32 using OAKLEY_AES_CBC
| NSS ike_alg_nss_cbc: aes - enter
| NSS ike_alg_nss_cbc: aes - exit
| next IV:  63 b2 06 74  82 d2 f5 6f  4b c0 aa a3  4b 20 61 b1
| no IKEv1 message padding required
| emitting length of ISAKMP Message: 60
| inR1_outI2: instance north-east-port3[0], setting IKEv1 newest_ipsec_sa to #2 (was #2) (spd.eroute=#2) cloned from #1
| complete v1 state transition with STF_OK
"north-east-port3" #2: transition from state STATE_QUICK_I1 to state STATE_QUICK_I2
| child state #2: STATE_QUICK_I1(authenticated-ipsec) > STATE_QUICK_I2(authenticated-ipsec)
| ignore states: 0
| half-open-ike states: 0
| open-ike states: 0
| established-anonymous-ike states: 0
| established-authenticated-ike states: 1
| anonymous-ipsec states: 0
| authenticated-ipsec states: 1
| informational states: 0
| unknown states: 0
| category states: 2 count states: 2
| state: #2 requesting EVENT_CRYPTO_FAILED to be deleted
| sending reply packet to 192.1.2.23:4500 (from port 4500)
| sending 64 bytes for STATE_QUICK_I1 through eth1:4500 to 192.1.2.23:4500 (using #2)
|   00 00 00 00  16 be dc ea  e2 2b 8c 83  f7 5c b7 35
|   07 e0 34 03  08 10 20 01  8b 59 9a 61  00 00 00 3c
|   3c 2e fe 7c  b9 b0 2e cd  e2 81 87 cb  7f 86 13 58
|   63 b2 06 74  82 d2 f5 6f  4b c0 aa a3  4b 20 61 b1
| event_schedule_ms called for about 28048000 ms
| event_schedule_tv called for about 28048 seconds and change
| inserting event EVENT_SA_REPLACE, timeout in 28048.000000 seconds for #2
| NAT-T: their IKE port is '500'
| NAT-T: forceencaps is 'disabled'
"north-east-port3" #2: STATE_QUICK_I2: sent QI2, IPsec SA established transport mode {ESP/NAT=>0xe1590dbc <0x057b1c36 xfrm=AES_128-HMAC_SHA1 NATOA=none NATD=192.1.2.23:4500 DPD=passive}
| modecfg pull: noquirk policy:push not-client
| phase 1 is done, looking for phase 2 to unpend
| get esp.57b1c36@192.1.3.33
| get esp.e1590dbc@192.1.2.23
| #2 fmt_state:1818 st->st_calculating == FALSE;
| get esp.57b1c36@192.1.3.33
| get esp.e1590dbc@192.1.2.23
| #1 fmt_state:1818 st->st_calculating == FALSE;
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 0.000000
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_PENDING_PHASE2
| event_schedule called for 120 seconds
| event_schedule_tv called for about 120 seconds and change
| inserting event EVENT_PENDING_PHASE2, timeout in 120.000000 seconds
| pending review: connection "north-east-port3" checked
| pending review: connection "north-east-pass" has no negotiated policy, skipped
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 0.000000
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 0.000000
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_PENDING_PHASE2
| event_schedule called for 120 seconds
| event_schedule_tv called for about 120 seconds and change
| inserting event EVENT_PENDING_PHASE2, timeout in 120.000000 seconds
| pending review: connection "north-east-port3" checked
| pending review: connection "north-east-pass" has no negotiated policy, skipped
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 0.000000
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 0.000000
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_PENDING_PHASE2
| event_schedule called for 120 seconds
| event_schedule_tv called for about 120 seconds and change
| inserting event EVENT_PENDING_PHASE2, timeout in 120.000000 seconds
| pending review: connection "north-east-port3" checked
| pending review: connection "north-east-pass" has no negotiated policy, skipped
| handling event EVENT_PENDING_DDNS
| event_schedule called for 60 seconds
| event_schedule_tv called for about 60 seconds and change
| inserting event EVENT_PENDING_DDNS, timeout in 60.000000 seconds
| elapsed time in connection_check_ddns for hostname lookup 0.000000
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
| handling event EVENT_SHUNT_SCAN
| expiring aged bare shunts
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_SHUNT_SCAN, timeout in 20.000000 seconds
| handling event EVENT_NAT_T_KEEPALIVE
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#2)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #2)
|   ff
| processing connection "north-east-port3"
| Sending of NAT-T KEEP-ALIVE enabled by per-conn configuration (nat_keepalive=yes)
| processing connection "north-east-port3"
| ka_event: send NAT-KA to 192.1.2.23:4500 (state=#1)
| sending NAT-T Keep Alive
| sending 1 bytes for NAT-T Keep Alive through eth1:4500 to 192.1.2.23:4500 (using #1)
|   ff
| event_schedule called for 20 seconds
| event_schedule_tv called for about 20 seconds and change
| inserting event EVENT_NAT_T_KEEPALIVE, timeout in 20.000000 seconds
| handling event EVENT_SD_WATCHDOG
| pluto_sd: executing action action:watchdog(3), status 0
| event_schedule called for 15 seconds
| event_schedule_tv called for about 15 seconds and change
| inserting event EVENT_SD_WATCHDOG, timeout in 15.000000 seconds
